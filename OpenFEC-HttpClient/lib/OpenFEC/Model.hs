{-
   OpenFEC

   This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.       The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://transition.fec.gov/pages/brochures/saleuse.shtml).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!

   OpenAPI spec version: 2.0
   OpenFEC API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : OpenFEC.Model
-}

{-# LANGUAGE DeriveDataTypeable         #-}
{-# LANGUAGE DeriveFoldable             #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DeriveTraversable          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase                 #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NamedFieldPuns             #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE RecordWildCards            #-}
{-# LANGUAGE TupleSections              #-}
{-# LANGUAGE TypeFamilies               #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenFEC.Model where

import           OpenFEC.Core
import           OpenFEC.MimeTypes

import           Data.Aeson             ((.:), (.:!), (.:?), (.=))

import qualified Control.Arrow          as P (left)
import qualified Data.Aeson             as A
import qualified Data.ByteString        as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8  as BC
import qualified Data.ByteString.Lazy   as BL
import qualified Data.Data              as P (TypeRep, Typeable, typeOf,
                                              typeRep)
import qualified Data.Foldable          as P
import qualified Data.HashMap.Lazy      as HM
import qualified Data.Map               as Map
import qualified Data.Maybe             as P
import qualified Data.Set               as Set
import qualified Data.Text              as T
import qualified Data.Text.Encoding     as T
import qualified Data.Time              as TI
import qualified Lens.Micro             as L
import qualified Web.FormUrlEncoded     as WH
import qualified Web.HttpApiData        as WH

import           Control.Applicative    ((<|>))
import           Control.Applicative    (Alternative)
import           Data.Function          ((&))
import           Data.Monoid            ((<>))
import           Data.Text              (Text)
import           Prelude                (Applicative, Bool (..), Char, Double,
                                         FilePath, Float, Functor, Int, Integer,
                                         Maybe (..), Monad, String, fmap, maybe,
                                         mempty, pure, undefined, ($), (.),
                                         (/=), (<$>), (<*>), (=<<), (>>=))

import qualified Prelude                as P



-- * Parameter newtypes


-- ** AfCommitteeId
newtype AfCommitteeId = AfCommitteeId { unAfCommitteeId :: Text } deriving (P.Eq, P.Show)

-- ** AfFdFineAmount
newtype AfFdFineAmount = AfFdFineAmount { unAfFdFineAmount :: Int } deriving (P.Eq, P.Show)

-- ** AfMaxFdDate
newtype AfMaxFdDate = AfMaxFdDate { unAfMaxFdDate :: Date } deriving (P.Eq, P.Show)

-- ** AfMaxRtbDate
newtype AfMaxRtbDate = AfMaxRtbDate { unAfMaxRtbDate :: Date } deriving (P.Eq, P.Show)

-- ** AfMinFdDate
newtype AfMinFdDate = AfMinFdDate { unAfMinFdDate :: Date } deriving (P.Eq, P.Show)

-- ** AfMinRtbDate
newtype AfMinRtbDate = AfMinRtbDate { unAfMinRtbDate :: Date } deriving (P.Eq, P.Show)

-- ** AfName
newtype AfName = AfName { unAfName :: [Text] } deriving (P.Eq, P.Show)

-- ** AfReportYear
newtype AfReportYear = AfReportYear { unAfReportYear :: Text } deriving (P.Eq, P.Show)

-- ** AfRtbFineAmount
newtype AfRtbFineAmount = AfRtbFineAmount { unAfRtbFineAmount :: Int } deriving (P.Eq, P.Show)

-- ** AmendmentIndicator
newtype AmendmentIndicator = AmendmentIndicator { unAmendmentIndicator :: [E'Inner8] } deriving (P.Eq, P.Show)

-- ** AmendmentIndicator[Text]
--newtype AmendmentIndicator[Text] = AmendmentIndicator[Text] { unAmendmentIndicator[Text] :: [Text] } deriving (P.Eq, P.Show)

-- ** AnalystId
newtype AnalystId = AnalystId { unAnalystId :: [Int] } deriving (P.Eq, P.Show)

-- ** AnalystShortId
newtype AnalystShortId = AnalystShortId { unAnalystShortId :: [Int] } deriving (P.Eq, P.Show)

-- ** AoCategory
newtype AoCategory = AoCategory { unAoCategory :: [E'Inner11] } deriving (P.Eq, P.Show)

-- ** AoCitationRequireAll
newtype AoCitationRequireAll = AoCitationRequireAll { unAoCitationRequireAll :: Bool } deriving (P.Eq, P.Show)

-- ** AoEntityName
newtype AoEntityName = AoEntityName { unAoEntityName :: [Text] } deriving (P.Eq, P.Show)

-- ** AoIsPending
newtype AoIsPending = AoIsPending { unAoIsPending :: Bool } deriving (P.Eq, P.Show)

-- ** AoMaxIssueDate
newtype AoMaxIssueDate = AoMaxIssueDate { unAoMaxIssueDate :: Date } deriving (P.Eq, P.Show)

-- ** AoMaxRequestDate
newtype AoMaxRequestDate = AoMaxRequestDate { unAoMaxRequestDate :: Date } deriving (P.Eq, P.Show)

-- ** AoMinIssueDate
newtype AoMinIssueDate = AoMinIssueDate { unAoMinIssueDate :: Date } deriving (P.Eq, P.Show)

-- ** AoMinRequestDate
newtype AoMinRequestDate = AoMinRequestDate { unAoMinRequestDate :: Date } deriving (P.Eq, P.Show)

-- ** AoName
newtype AoName = AoName { unAoName :: [Text] } deriving (P.Eq, P.Show)

-- ** AoNo
newtype AoNo = AoNo { unAoNo :: [Text] } deriving (P.Eq, P.Show)

-- ** AoRegulatoryCitation
newtype AoRegulatoryCitation = AoRegulatoryCitation { unAoRegulatoryCitation :: [Text] } deriving (P.Eq, P.Show)

-- ** AoRequestor
newtype AoRequestor = AoRequestor { unAoRequestor :: Text } deriving (P.Eq, P.Show)

-- ** AoRequestorType
newtype AoRequestorType = AoRequestorType { unAoRequestorType :: [E'Inner12] } deriving (P.Eq, P.Show)

-- ** AoStatus
newtype AoStatus = AoStatus { unAoStatus :: Text } deriving (P.Eq, P.Show)

-- ** AoStatutoryCitation
newtype AoStatutoryCitation = AoStatutoryCitation { unAoStatutoryCitation :: [Text] } deriving (P.Eq, P.Show)

-- ** ApiKey
newtype ApiKey = ApiKey { unApiKey :: Text } deriving (P.Eq, P.Show)

-- ** AuditCaseId
newtype AuditCaseId = AuditCaseId { unAuditCaseId :: [Text] } deriving (P.Eq, P.Show)

-- ** AuditId
newtype AuditId = AuditId { unAuditId :: [Int] } deriving (P.Eq, P.Show)

-- ** BeginningImageNumber
newtype BeginningImageNumber = BeginningImageNumber { unBeginningImageNumber :: [Text] } deriving (P.Eq, P.Show)

-- ** CalendarCategoryId
newtype CalendarCategoryId = CalendarCategoryId { unCalendarCategoryId :: [Int] } deriving (P.Eq, P.Show)

-- ** CandidateCommitteeId
newtype CandidateCommitteeId = CandidateCommitteeId { unCandidateCommitteeId :: [Text] } deriving (P.Eq, P.Show)

-- ** CandidateId
newtype CandidateId = CandidateId { unCandidateId :: [Text] } deriving (P.Eq, P.Show)

-- ** CandidateIdText
newtype CandidateIdText = CandidateIdText { unCandidateIdText :: Text } deriving (P.Eq, P.Show)

-- ** CandidateName
newtype CandidateName = CandidateName { unCandidateName :: [Text] } deriving (P.Eq, P.Show)

-- ** CandidateOffice
newtype CandidateOffice = CandidateOffice { unCandidateOffice :: [E'Inner2] } deriving (P.Eq, P.Show)

-- ** CandidateOfficeDistrict
newtype CandidateOfficeDistrict = CandidateOfficeDistrict { unCandidateOfficeDistrict :: [Text] } deriving (P.Eq, P.Show)

-- ** CandidateOfficeState
newtype CandidateOfficeState = CandidateOfficeState { unCandidateOfficeState :: [Text] } deriving (P.Eq, P.Show)

-- ** CandidateParty
newtype CandidateParty = CandidateParty { unCandidateParty :: [Text] } deriving (P.Eq, P.Show)

-- ** CandidateStatus
newtype CandidateStatus = CandidateStatus { unCandidateStatus :: [E'Inner] } deriving (P.Eq, P.Show)

-- ** CaseDispositions
newtype CaseDispositions = CaseDispositions { unCaseDispositions :: [Text] } deriving (P.Eq, P.Show)

-- ** CaseDocumentCategory
newtype CaseDocumentCategory = CaseDocumentCategory { unCaseDocumentCategory :: [Text] } deriving (P.Eq, P.Show)

-- ** CaseElectionCycles
newtype CaseElectionCycles = CaseElectionCycles { unCaseElectionCycles :: Int } deriving (P.Eq, P.Show)

-- ** CaseMaxCloseDate
newtype CaseMaxCloseDate = CaseMaxCloseDate { unCaseMaxCloseDate :: Date } deriving (P.Eq, P.Show)

-- ** CaseMaxOpenDate
newtype CaseMaxOpenDate = CaseMaxOpenDate { unCaseMaxOpenDate :: Date } deriving (P.Eq, P.Show)

-- ** CaseMinCloseDate
newtype CaseMinCloseDate = CaseMinCloseDate { unCaseMinCloseDate :: Date } deriving (P.Eq, P.Show)

-- ** CaseMinOpenDate
newtype CaseMinOpenDate = CaseMinOpenDate { unCaseMinOpenDate :: Date } deriving (P.Eq, P.Show)

-- ** CaseNo
newtype CaseNo = CaseNo { unCaseNo :: [Text] } deriving (P.Eq, P.Show)

-- ** CaseRespondents
newtype CaseRespondents = CaseRespondents { unCaseRespondents :: Text } deriving (P.Eq, P.Show)

-- ** CommitteeDesignation
newtype CommitteeDesignation = CommitteeDesignation { unCommitteeDesignation :: Text } deriving (P.Eq, P.Show)

-- ** CommitteeDesignationFull
newtype CommitteeDesignationFull = CommitteeDesignationFull { unCommitteeDesignationFull :: Text } deriving (P.Eq, P.Show)

-- ** CommitteeId
newtype CommitteeId = CommitteeId { unCommitteeId :: [Text] } deriving (P.Eq, P.Show)

-- ** CommitteeIdText
newtype CommitteeIdText = CommitteeIdText { unCommitteeIdText :: Text } deriving (P.Eq, P.Show)

-- ** CommitteeType
newtype CommitteeType = CommitteeType { unCommitteeType :: [Text] } deriving (P.Eq, P.Show)

-- ** CommitteeType2
newtype CommitteeType2 = CommitteeType2 { unCommitteeType2 :: [E'Inner5] } deriving (P.Eq, P.Show)

-- ** CommitteeType3
newtype CommitteeType3 = CommitteeType3 { unCommitteeType3 :: E'CommitteeType } deriving (P.Eq, P.Show)

-- ** CommitteeType4
newtype CommitteeType4 = CommitteeType4 { unCommitteeType4 :: E'CommitteeType2 } deriving (P.Eq, P.Show)

-- ** CommitteeTypeFull
newtype CommitteeTypeFull = CommitteeTypeFull { unCommitteeTypeFull :: Text } deriving (P.Eq, P.Show)

-- ** CommitteeTypeText
newtype CommitteeTypeText = CommitteeTypeText { unCommitteeTypeText :: Text } deriving (P.Eq, P.Show)

-- ** ContributorCity
newtype ContributorCity = ContributorCity { unContributorCity :: [Text] } deriving (P.Eq, P.Show)

-- ** ContributorEmployer
newtype ContributorEmployer = ContributorEmployer { unContributorEmployer :: [Text] } deriving (P.Eq, P.Show)

-- ** ContributorId
newtype ContributorId = ContributorId { unContributorId :: [Text] } deriving (P.Eq, P.Show)

-- ** ContributorName
newtype ContributorName = ContributorName { unContributorName :: [Text] } deriving (P.Eq, P.Show)

-- ** ContributorOccupation
newtype ContributorOccupation = ContributorOccupation { unContributorOccupation :: [Text] } deriving (P.Eq, P.Show)

-- ** ContributorState
newtype ContributorState = ContributorState { unContributorState :: [Text] } deriving (P.Eq, P.Show)

-- ** ContributorType
newtype ContributorType = ContributorType { unContributorType :: [E'Inner14] } deriving (P.Eq, P.Show)

-- ** ContributorZip
newtype ContributorZip = ContributorZip { unContributorZip :: [Text] } deriving (P.Eq, P.Show)

-- ** CreditorDebtorName
newtype CreditorDebtorName = CreditorDebtorName { unCreditorDebtorName :: [Text] } deriving (P.Eq, P.Show)

-- ** Cycle
newtype Cycle = Cycle { unCycle :: [Int] } deriving (P.Eq, P.Show)

-- ** CycleInt
newtype CycleInt = CycleInt { unCycleInt :: Int } deriving (P.Eq, P.Show)

-- ** Description
newtype Description = Description { unDescription :: [Text] } deriving (P.Eq, P.Show)

-- ** DescriptionText
newtype DescriptionText = DescriptionText { unDescriptionText :: Text } deriving (P.Eq, P.Show)

-- ** Designation
newtype Designation = Designation { unDesignation :: [E'Inner6] } deriving (P.Eq, P.Show)

-- ** DesignationText
newtype DesignationText = DesignationText { unDesignationText :: Text } deriving (P.Eq, P.Show)

-- ** DisbursementDescription
newtype DisbursementDescription = DisbursementDescription { unDisbursementDescription :: [Text] } deriving (P.Eq, P.Show)

-- ** DisbursementPurposeCategory
newtype DisbursementPurposeCategory = DisbursementPurposeCategory { unDisbursementPurposeCategory :: [Text] } deriving (P.Eq, P.Show)

-- ** District
newtype District = District { unDistrict :: [Text] } deriving (P.Eq, P.Show)

-- ** DistrictText
newtype DistrictText = DistrictText { unDistrictText :: Text } deriving (P.Eq, P.Show)

-- ** DocumentType
newtype DocumentType = DocumentType { unDocumentType :: [Text] } deriving (P.Eq, P.Show)

-- ** ElectionDistrict
newtype ElectionDistrict = ElectionDistrict { unElectionDistrict :: [Text] } deriving (P.Eq, P.Show)

-- ** ElectionFull
newtype ElectionFull = ElectionFull { unElectionFull :: Bool } deriving (P.Eq, P.Show)

-- ** ElectionParty
newtype ElectionParty = ElectionParty { unElectionParty :: [Text] } deriving (P.Eq, P.Show)

-- ** ElectionState
newtype ElectionState = ElectionState { unElectionState :: [Text] } deriving (P.Eq, P.Show)

-- ** ElectionTypeId
newtype ElectionTypeId = ElectionTypeId { unElectionTypeId :: [Text] } deriving (P.Eq, P.Show)

-- ** ElectionYear
newtype ElectionYear = ElectionYear { unElectionYear :: [Int] } deriving (P.Eq, P.Show)

-- ** ElectionYear[Text]
--newtype ElectionYear[Text] = ElectionYear[Text] { unElectionYear[Text] :: [Text] } deriving (P.Eq, P.Show)

-- ** Email
newtype Email = Email { unEmail :: [Text] } deriving (P.Eq, P.Show)

-- ** Employer
newtype Employer = Employer { unEmployer :: [Text] } deriving (P.Eq, P.Show)

-- ** EventId
newtype EventId = EventId { unEventId :: Int } deriving (P.Eq, P.Show)

-- ** FederalFundsFlag
newtype FederalFundsFlag = FederalFundsFlag { unFederalFundsFlag :: Bool } deriving (P.Eq, P.Show)

-- ** FileNumber
newtype FileNumber = FileNumber { unFileNumber :: [Int] } deriving (P.Eq, P.Show)

-- ** FilerType
newtype FilerType = FilerType { unFilerType :: E'FilerType } deriving (P.Eq, P.Show)

-- ** FilingForm
newtype FilingForm = FilingForm { unFilingForm :: [Text] } deriving (P.Eq, P.Show)

-- ** FilingFrequency
newtype FilingFrequency = FilingFrequency { unFilingFrequency :: [E'Inner7] } deriving (P.Eq, P.Show)

-- ** FormType
newtype FormType = FormType { unFormType :: [Text] } deriving (P.Eq, P.Show)

-- ** FromHit
newtype FromHit = FromHit { unFromHit :: Int } deriving (P.Eq, P.Show)

-- ** FullElection
newtype FullElection = FullElection { unFullElection :: Bool } deriving (P.Eq, P.Show)

-- ** HasRaisedFunds
newtype HasRaisedFunds = HasRaisedFunds { unHasRaisedFunds :: Bool } deriving (P.Eq, P.Show)

-- ** HideNull
newtype HideNull = HideNull { unHideNull :: Bool } deriving (P.Eq, P.Show)

-- ** HitsReturned
newtype HitsReturned = HitsReturned { unHitsReturned :: Int } deriving (P.Eq, P.Show)

-- ** ImageNumber
newtype ImageNumber = ImageNumber { unImageNumber :: [Text] } deriving (P.Eq, P.Show)

-- ** IncumbentChallenge
newtype IncumbentChallenge = IncumbentChallenge { unIncumbentChallenge :: [E'Inner3] } deriving (P.Eq, P.Show)

-- ** IsAmended
newtype IsAmended = IsAmended { unIsAmended :: Bool } deriving (P.Eq, P.Show)

-- ** IsIndividual
newtype IsIndividual = IsIndividual { unIsIndividual :: Bool } deriving (P.Eq, P.Show)

-- ** IsNotice
newtype IsNotice = IsNotice { unIsNotice :: [Bool] } deriving (P.Eq, P.Show)

-- ** LastContributionReceiptAmount
newtype LastContributionReceiptAmount = LastContributionReceiptAmount { unLastContributionReceiptAmount :: Float } deriving (P.Eq, P.Show)

-- ** LastContributionReceiptDate
newtype LastContributionReceiptDate = LastContributionReceiptDate { unLastContributionReceiptDate :: Date } deriving (P.Eq, P.Show)

-- ** LastContributorAggregateYtd
newtype LastContributorAggregateYtd = LastContributorAggregateYtd { unLastContributorAggregateYtd :: Float } deriving (P.Eq, P.Show)

-- ** LastDisbursementAmount
newtype LastDisbursementAmount = LastDisbursementAmount { unLastDisbursementAmount :: Float } deriving (P.Eq, P.Show)

-- ** LastDisbursementDate
newtype LastDisbursementDate = LastDisbursementDate { unLastDisbursementDate :: Date } deriving (P.Eq, P.Show)

-- ** LastExpenditureAmount
newtype LastExpenditureAmount = LastExpenditureAmount { unLastExpenditureAmount :: Float } deriving (P.Eq, P.Show)

-- ** LastExpenditureDate
newtype LastExpenditureDate = LastExpenditureDate { unLastExpenditureDate :: Date } deriving (P.Eq, P.Show)

-- ** LastIndex
newtype LastIndex = LastIndex { unLastIndex :: Int } deriving (P.Eq, P.Show)

-- ** LastOfficeTotalYtd
newtype LastOfficeTotalYtd = LastOfficeTotalYtd { unLastOfficeTotalYtd :: Float } deriving (P.Eq, P.Show)

-- ** LineNumber
newtype LineNumber = LineNumber { unLineNumber :: Text } deriving (P.Eq, P.Show)

-- ** LoanerName
newtype LoanerName = LoanerName { unLoanerName :: [Text] } deriving (P.Eq, P.Show)

-- ** MaxAmount
newtype MaxAmount = MaxAmount { unMaxAmount :: Text } deriving (P.Eq, P.Show)

-- ** MaxAmountIncurred
newtype MaxAmountIncurred = MaxAmountIncurred { unMaxAmountIncurred :: Float } deriving (P.Eq, P.Show)

-- ** MaxAssignmentUpdateDate
newtype MaxAssignmentUpdateDate = MaxAssignmentUpdateDate { unMaxAssignmentUpdateDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxCashOnHandEndPeriod
newtype MaxCashOnHandEndPeriod = MaxCashOnHandEndPeriod { unMaxCashOnHandEndPeriod :: Text } deriving (P.Eq, P.Show)

-- ** MaxCashOnHandEndPeriodAmount
newtype MaxCashOnHandEndPeriodAmount = MaxCashOnHandEndPeriodAmount { unMaxCashOnHandEndPeriodAmount :: Text } deriving (P.Eq, P.Show)

-- ** MaxCreateDate
newtype MaxCreateDate = MaxCreateDate { unMaxCreateDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxDate
newtype MaxDate = MaxDate { unMaxDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxDebtsOwedByCommittee
newtype MaxDebtsOwedByCommittee = MaxDebtsOwedByCommittee { unMaxDebtsOwedByCommittee :: Text } deriving (P.Eq, P.Show)

-- ** MaxDebtsOwedExpenditures
newtype MaxDebtsOwedExpenditures = MaxDebtsOwedExpenditures { unMaxDebtsOwedExpenditures :: Text } deriving (P.Eq, P.Show)

-- ** MaxDisbursements
newtype MaxDisbursements = MaxDisbursements { unMaxDisbursements :: Text } deriving (P.Eq, P.Show)

-- ** MaxDisbursementsAmount
newtype MaxDisbursementsAmount = MaxDisbursementsAmount { unMaxDisbursementsAmount :: Text } deriving (P.Eq, P.Show)

-- ** MaxDueDate
newtype MaxDueDate = MaxDueDate { unMaxDueDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxElectionCycle
newtype MaxElectionCycle = MaxElectionCycle { unMaxElectionCycle :: Int } deriving (P.Eq, P.Show)

-- ** MaxElectionDate
newtype MaxElectionDate = MaxElectionDate { unMaxElectionDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxEndDate
newtype MaxEndDate = MaxEndDate { unMaxEndDate :: DateTime } deriving (P.Eq, P.Show)

-- ** MaxExpenditureAmount
newtype MaxExpenditureAmount = MaxExpenditureAmount { unMaxExpenditureAmount :: Date } deriving (P.Eq, P.Show)

-- ** MaxExpenditureDate
newtype MaxExpenditureDate = MaxExpenditureDate { unMaxExpenditureDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxFirstFileDate
newtype MaxFirstFileDate = MaxFirstFileDate { unMaxFirstFileDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxImageNumber
newtype MaxImageNumber = MaxImageNumber { unMaxImageNumber :: Text } deriving (P.Eq, P.Show)

-- ** MaxIndependentExpenditures
newtype MaxIndependentExpenditures = MaxIndependentExpenditures { unMaxIndependentExpenditures :: Text } deriving (P.Eq, P.Show)

-- ** MaxLastF1Date
newtype MaxLastF1Date = MaxLastF1Date { unMaxLastF1Date :: Date } deriving (P.Eq, P.Show)

-- ** MaxPartyCoordinatedExpenditures
newtype MaxPartyCoordinatedExpenditures = MaxPartyCoordinatedExpenditures { unMaxPartyCoordinatedExpenditures :: Text } deriving (P.Eq, P.Show)

-- ** MaxPaymentPeriod
newtype MaxPaymentPeriod = MaxPaymentPeriod { unMaxPaymentPeriod :: Float } deriving (P.Eq, P.Show)

-- ** MaxPaymentToDate
newtype MaxPaymentToDate = MaxPaymentToDate { unMaxPaymentToDate :: Int } deriving (P.Eq, P.Show)

-- ** MaxPrimaryGeneralDate
newtype MaxPrimaryGeneralDate = MaxPrimaryGeneralDate { unMaxPrimaryGeneralDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxReceiptDate
newtype MaxReceiptDate = MaxReceiptDate { unMaxReceiptDate :: Date } deriving (P.Eq, P.Show)

-- ** MaxReceiptDateDateTime
newtype MaxReceiptDateDateTime = MaxReceiptDateDateTime { unMaxReceiptDateDateTime :: DateTime } deriving (P.Eq, P.Show)

-- ** MaxReceipts
newtype MaxReceipts = MaxReceipts { unMaxReceipts :: Text } deriving (P.Eq, P.Show)

-- ** MaxReceiptsAmount
newtype MaxReceiptsAmount = MaxReceiptsAmount { unMaxReceiptsAmount :: Text } deriving (P.Eq, P.Show)

-- ** MaxStartDate
newtype MaxStartDate = MaxStartDate { unMaxStartDate :: DateTime } deriving (P.Eq, P.Show)

-- ** MaxTotalContributions
newtype MaxTotalContributions = MaxTotalContributions { unMaxTotalContributions :: Text } deriving (P.Eq, P.Show)

-- ** MaxUpdateDate
newtype MaxUpdateDate = MaxUpdateDate { unMaxUpdateDate :: Date } deriving (P.Eq, P.Show)

-- ** MinAmount
newtype MinAmount = MinAmount { unMinAmount :: Text } deriving (P.Eq, P.Show)

-- ** MinAmountIncurred
newtype MinAmountIncurred = MinAmountIncurred { unMinAmountIncurred :: Float } deriving (P.Eq, P.Show)

-- ** MinAssignmentUpdateDate
newtype MinAssignmentUpdateDate = MinAssignmentUpdateDate { unMinAssignmentUpdateDate :: Date } deriving (P.Eq, P.Show)

-- ** MinCashOnHandEndPeriod
newtype MinCashOnHandEndPeriod = MinCashOnHandEndPeriod { unMinCashOnHandEndPeriod :: Text } deriving (P.Eq, P.Show)

-- ** MinCashOnHandEndPeriodAmount
newtype MinCashOnHandEndPeriodAmount = MinCashOnHandEndPeriodAmount { unMinCashOnHandEndPeriodAmount :: Text } deriving (P.Eq, P.Show)

-- ** MinCreateDate
newtype MinCreateDate = MinCreateDate { unMinCreateDate :: Date } deriving (P.Eq, P.Show)

-- ** MinDate
newtype MinDate = MinDate { unMinDate :: Date } deriving (P.Eq, P.Show)

-- ** MinDebtsOwedAmount
newtype MinDebtsOwedAmount = MinDebtsOwedAmount { unMinDebtsOwedAmount :: Text } deriving (P.Eq, P.Show)

-- ** MinDebtsOwedByCommittee
newtype MinDebtsOwedByCommittee = MinDebtsOwedByCommittee { unMinDebtsOwedByCommittee :: Text } deriving (P.Eq, P.Show)

-- ** MinDisbursements
newtype MinDisbursements = MinDisbursements { unMinDisbursements :: Text } deriving (P.Eq, P.Show)

-- ** MinDisbursementsAmount
newtype MinDisbursementsAmount = MinDisbursementsAmount { unMinDisbursementsAmount :: Text } deriving (P.Eq, P.Show)

-- ** MinDueDate
newtype MinDueDate = MinDueDate { unMinDueDate :: Date } deriving (P.Eq, P.Show)

-- ** MinElectionCycle
newtype MinElectionCycle = MinElectionCycle { unMinElectionCycle :: Int } deriving (P.Eq, P.Show)

-- ** MinElectionDate
newtype MinElectionDate = MinElectionDate { unMinElectionDate :: Date } deriving (P.Eq, P.Show)

-- ** MinEndDate
newtype MinEndDate = MinEndDate { unMinEndDate :: DateTime } deriving (P.Eq, P.Show)

-- ** MinExpenditureAmount
newtype MinExpenditureAmount = MinExpenditureAmount { unMinExpenditureAmount :: Date } deriving (P.Eq, P.Show)

-- ** MinExpenditureDate
newtype MinExpenditureDate = MinExpenditureDate { unMinExpenditureDate :: Date } deriving (P.Eq, P.Show)

-- ** MinFirstFileDate
newtype MinFirstFileDate = MinFirstFileDate { unMinFirstFileDate :: Date } deriving (P.Eq, P.Show)

-- ** MinImageNumber
newtype MinImageNumber = MinImageNumber { unMinImageNumber :: Text } deriving (P.Eq, P.Show)

-- ** MinIndependentExpenditures
newtype MinIndependentExpenditures = MinIndependentExpenditures { unMinIndependentExpenditures :: Text } deriving (P.Eq, P.Show)

-- ** MinLastF1Date
newtype MinLastF1Date = MinLastF1Date { unMinLastF1Date :: Date } deriving (P.Eq, P.Show)

-- ** MinPartyCoordinatedExpenditures
newtype MinPartyCoordinatedExpenditures = MinPartyCoordinatedExpenditures { unMinPartyCoordinatedExpenditures :: Text } deriving (P.Eq, P.Show)

-- ** MinPaymentPeriod
newtype MinPaymentPeriod = MinPaymentPeriod { unMinPaymentPeriod :: Float } deriving (P.Eq, P.Show)

-- ** MinPaymentToDate
newtype MinPaymentToDate = MinPaymentToDate { unMinPaymentToDate :: Int } deriving (P.Eq, P.Show)

-- ** MinPrimaryGeneralDate
newtype MinPrimaryGeneralDate = MinPrimaryGeneralDate { unMinPrimaryGeneralDate :: Date } deriving (P.Eq, P.Show)

-- ** MinReceiptDate
newtype MinReceiptDate = MinReceiptDate { unMinReceiptDate :: Date } deriving (P.Eq, P.Show)

-- ** MinReceiptDateDateTime
newtype MinReceiptDateDateTime = MinReceiptDateDateTime { unMinReceiptDateDateTime :: DateTime } deriving (P.Eq, P.Show)

-- ** MinReceipts
newtype MinReceipts = MinReceipts { unMinReceipts :: Text } deriving (P.Eq, P.Show)

-- ** MinReceiptsAmount
newtype MinReceiptsAmount = MinReceiptsAmount { unMinReceiptsAmount :: Text } deriving (P.Eq, P.Show)

-- ** MinStartDate
newtype MinStartDate = MinStartDate { unMinStartDate :: DateTime } deriving (P.Eq, P.Show)

-- ** MinTotalContributions
newtype MinTotalContributions = MinTotalContributions { unMinTotalContributions :: Text } deriving (P.Eq, P.Show)

-- ** MinUpdateDate
newtype MinUpdateDate = MinUpdateDate { unMinUpdateDate :: Date } deriving (P.Eq, P.Show)

-- ** MostRecent
newtype MostRecent = MostRecent { unMostRecent :: Bool } deriving (P.Eq, P.Show)

-- ** MurDispositions
newtype MurDispositions = MurDispositions { unMurDispositions :: [Text] } deriving (P.Eq, P.Show)

-- ** MurDocumentCategory
newtype MurDocumentCategory = MurDocumentCategory { unMurDocumentCategory :: [Text] } deriving (P.Eq, P.Show)

-- ** MurElectionCycles
newtype MurElectionCycles = MurElectionCycles { unMurElectionCycles :: Int } deriving (P.Eq, P.Show)

-- ** MurMaxCloseDate
newtype MurMaxCloseDate = MurMaxCloseDate { unMurMaxCloseDate :: Date } deriving (P.Eq, P.Show)

-- ** MurMaxOpenDate
newtype MurMaxOpenDate = MurMaxOpenDate { unMurMaxOpenDate :: Date } deriving (P.Eq, P.Show)

-- ** MurMinCloseDate
newtype MurMinCloseDate = MurMinCloseDate { unMurMinCloseDate :: Date } deriving (P.Eq, P.Show)

-- ** MurMinOpenDate
newtype MurMinOpenDate = MurMinOpenDate { unMurMinOpenDate :: Date } deriving (P.Eq, P.Show)

-- ** MurNo
newtype MurNo = MurNo { unMurNo :: [Text] } deriving (P.Eq, P.Show)

-- ** MurRespondents
newtype MurRespondents = MurRespondents { unMurRespondents :: Text } deriving (P.Eq, P.Show)

-- ** Name
newtype Name = Name { unName :: [Text] } deriving (P.Eq, P.Show)

-- ** NatureOfDebt
newtype NatureOfDebt = NatureOfDebt { unNatureOfDebt :: Text } deriving (P.Eq, P.Show)

-- ** Occupation
newtype Occupation = Occupation { unOccupation :: [Text] } deriving (P.Eq, P.Show)

-- ** Office
newtype Office = Office { unOffice :: [E'Inner2] } deriving (P.Eq, P.Show)

-- ** Office2
newtype Office2 = Office2 { unOffice2 :: E'Office } deriving (P.Eq, P.Show)

-- ** Office3
newtype Office3 = Office3 { unOffice3 :: [E'Office] } deriving (P.Eq, P.Show)

-- ** OfficeSought
newtype OfficeSought = OfficeSought { unOfficeSought :: [E'Inner10] } deriving (P.Eq, P.Show)

-- ** OrganizationType
newtype OrganizationType = OrganizationType { unOrganizationType :: [E'Inner4] } deriving (P.Eq, P.Show)

-- ** Page
newtype Page = Page { unPage :: Int } deriving (P.Eq, P.Show)

-- ** ParamType
newtype ParamType = ParamType { unParamType :: Text } deriving (P.Eq, P.Show)

-- ** ParamType[Text]
--newtype ParamType[Text] = ParamType[Text] { unParamType[Text] :: [Text] } deriving (P.Eq, P.Show)

-- ** Party
newtype Party = Party { unParty :: [Text] } deriving (P.Eq, P.Show)

-- ** PayeeName
newtype PayeeName = PayeeName { unPayeeName :: [Text] } deriving (P.Eq, P.Show)

-- ** PerPage
newtype PerPage = PerPage { unPerPage :: Int } deriving (P.Eq, P.Show)

-- ** PrimaryCategoryId
newtype PrimaryCategoryId = PrimaryCategoryId { unPrimaryCategoryId :: Text } deriving (P.Eq, P.Show)

-- ** PrimaryCategoryId[Text]
--newtype PrimaryCategoryId[Text] = PrimaryCategoryId[Text] { unPrimaryCategoryId[Text] :: [Text] } deriving (P.Eq, P.Show)

-- ** PrimaryCategoryName
newtype PrimaryCategoryName = PrimaryCategoryName { unPrimaryCategoryName :: [Text] } deriving (P.Eq, P.Show)

-- ** PrimaryGeneralIndicator
newtype PrimaryGeneralIndicator = PrimaryGeneralIndicator { unPrimaryGeneralIndicator :: [Text] } deriving (P.Eq, P.Show)

-- ** Purpose
newtype Purpose = Purpose { unPurpose :: [Text] } deriving (P.Eq, P.Show)

-- ** Q
newtype Q = Q { unQ :: [Text] } deriving (P.Eq, P.Show)

-- ** QText
newtype QText = QText { unQText :: Text } deriving (P.Eq, P.Show)

-- ** Qq
newtype Qq = Qq { unQq :: [Text] } deriving (P.Eq, P.Show)

-- ** RecipientCity
newtype RecipientCity = RecipientCity { unRecipientCity :: [Text] } deriving (P.Eq, P.Show)

-- ** RecipientCommitteeId
newtype RecipientCommitteeId = RecipientCommitteeId { unRecipientCommitteeId :: [Text] } deriving (P.Eq, P.Show)

-- ** RecipientId
newtype RecipientId = RecipientId { unRecipientId :: [Text] } deriving (P.Eq, P.Show)

-- ** RecipientName
newtype RecipientName = RecipientName { unRecipientName :: [Text] } deriving (P.Eq, P.Show)

-- ** RecipientState
newtype RecipientState = RecipientState { unRecipientState :: [Text] } deriving (P.Eq, P.Show)

-- ** Renderer
newtype Renderer = Renderer { unRenderer :: E'Renderer } deriving (P.Eq, P.Show)

-- ** ReportType2
newtype ReportType2 = ReportType2 { unReportType2 :: [Text] } deriving (P.Eq, P.Show)

-- ** ReportYear
newtype ReportYear = ReportYear { unReportYear :: [Int] } deriving (P.Eq, P.Show)

-- ** RequestType
newtype RequestType = RequestType { unRequestType :: [Text] } deriving (P.Eq, P.Show)

-- ** Size
newtype Size = Size { unSize :: [E'Inner9] } deriving (P.Eq, P.Show)

-- ** Sort
newtype Sort = Sort { unSort :: [Text] } deriving (P.Eq, P.Show)

-- ** SortHideNull
newtype SortHideNull = SortHideNull { unSortHideNull :: Bool } deriving (P.Eq, P.Show)

-- ** SortNullOnly
newtype SortNullOnly = SortNullOnly { unSortNullOnly :: Bool } deriving (P.Eq, P.Show)

-- ** SortText
newtype SortText = SortText { unSortText :: Text } deriving (P.Eq, P.Show)

-- ** SpenderCommitteeType
newtype SpenderCommitteeType = SpenderCommitteeType { unSpenderCommitteeType :: [E'Inner5] } deriving (P.Eq, P.Show)

-- ** State
newtype State = State { unState :: [Text] } deriving (P.Eq, P.Show)

-- ** StateText
newtype StateText = StateText { unStateText :: Text } deriving (P.Eq, P.Show)

-- ** StatusNum
newtype StatusNum = StatusNum { unStatusNum :: [E'Inner13] } deriving (P.Eq, P.Show)

-- ** SubCategoryId
newtype SubCategoryId = SubCategoryId { unSubCategoryId :: Text } deriving (P.Eq, P.Show)

-- ** SubId
newtype SubId = SubId { unSubId :: Text } deriving (P.Eq, P.Show)

-- ** Summary
newtype Summary = Summary { unSummary :: [Text] } deriving (P.Eq, P.Show)

-- ** SupportOppose
newtype SupportOppose = SupportOppose { unSupportOppose :: E'SupportOppose } deriving (P.Eq, P.Show)

-- ** SupportOpposeIndicator
newtype SupportOpposeIndicator = SupportOpposeIndicator { unSupportOpposeIndicator :: [E'SupportOppose] } deriving (P.Eq, P.Show)

-- ** TelephoneExt
newtype TelephoneExt = TelephoneExt { unTelephoneExt :: [Int] } deriving (P.Eq, P.Show)

-- ** Title
newtype Title = Title { unTitle :: [Text] } deriving (P.Eq, P.Show)

-- ** TreasurerName
newtype TreasurerName = TreasurerName { unTreasurerName :: [Text] } deriving (P.Eq, P.Show)

-- ** TwoYearTransactionPeriod
newtype TwoYearTransactionPeriod = TwoYearTransactionPeriod { unTwoYearTransactionPeriod :: Int } deriving (P.Eq, P.Show)

-- ** Year
newtype Year = Year { unYear :: Text } deriving (P.Eq, P.Show)

-- ** Year[Int]
--newtype Year[Int] = Year[Int] { unYear[Int] :: [Int] } deriving (P.Eq, P.Show)

-- ** Zip
newtype Zip = Zip { unZip :: [Text] } deriving (P.Eq, P.Show)

-- ** Zip[Int]
--newtype Zip[Int] = Zip[Int] { unZip[Int] :: [Int] } deriving (P.Eq, P.Show)

-- * Models


-- ** AuditCandidateSearch
-- | AuditCandidateSearch
data AuditCandidateSearch = AuditCandidateSearch
  { auditCandidateSearchId   :: !(Maybe Text) -- ^ "id"
  , auditCandidateSearchName :: !(Maybe Text) -- ^ "name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCandidateSearch
instance A.FromJSON AuditCandidateSearch where
  parseJSON = A.withObject "AuditCandidateSearch" $ \o ->
    AuditCandidateSearch
      <$> (o .:? "id")
      <*> (o .:? "name")

-- | ToJSON AuditCandidateSearch
instance A.ToJSON AuditCandidateSearch where
  toJSON AuditCandidateSearch {..} =
   _omitNulls
      [ "id" .= auditCandidateSearchId
      , "name" .= auditCandidateSearchName
      ]


-- | Construct a value of type 'AuditCandidateSearch' (by applying it's required fields, if any)
mkAuditCandidateSearch
  :: AuditCandidateSearch
mkAuditCandidateSearch =
  AuditCandidateSearch
  { auditCandidateSearchId = Nothing
  , auditCandidateSearchName = Nothing
  }

-- ** AuditCandidateSearchList
-- | AuditCandidateSearchList
data AuditCandidateSearchList = AuditCandidateSearchList
  { auditCandidateSearchListResults :: !(Maybe [AuditCandidateSearch]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCandidateSearchList
instance A.FromJSON AuditCandidateSearchList where
  parseJSON = A.withObject "AuditCandidateSearchList" $ \o ->
    AuditCandidateSearchList
      <$> (o .:? "results")

-- | ToJSON AuditCandidateSearchList
instance A.ToJSON AuditCandidateSearchList where
  toJSON AuditCandidateSearchList {..} =
   _omitNulls
      [ "results" .= auditCandidateSearchListResults
      ]


-- | Construct a value of type 'AuditCandidateSearchList' (by applying it's required fields, if any)
mkAuditCandidateSearchList
  :: AuditCandidateSearchList
mkAuditCandidateSearchList =
  AuditCandidateSearchList
  { auditCandidateSearchListResults = Nothing
  }

-- ** AuditCase
-- | AuditCase
data AuditCase = AuditCase
  { auditCaseAuditCaseId          :: !(Maybe Text) -- ^ "audit_case_id"
  , auditCaseAuditId              :: !(Maybe Int) -- ^ "audit_id"
  , auditCaseCandidateId          :: !(Maybe Text) -- ^ "candidate_id"
  , auditCaseCandidateName        :: !(Maybe Text) -- ^ "candidate_name"
  , auditCaseCommitteeDescription :: !(Maybe Text) -- ^ "committee_description"
  , auditCaseCommitteeDesignation :: !(Maybe Text) -- ^ "committee_designation"
  , auditCaseCommitteeId          :: !(Maybe Text) -- ^ "committee_id"
  , auditCaseCommitteeName        :: !(Maybe Text) -- ^ "committee_name"
  , auditCaseCommitteeType        :: !(Maybe Text) -- ^ "committee_type"
  , auditCaseCycle                :: !(Maybe Int) -- ^ "cycle"
  , auditCaseFarReleaseDate       :: !(Maybe Date) -- ^ "far_release_date"
  , auditCaseLinkToReport         :: !(Maybe Text) -- ^ "link_to_report" -  URL for retrieving the PDF document
  , auditCasePrimaryCategoryList  :: !(Maybe [AuditCaseCategoryRelation]) -- ^ "primary_category_list"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCase
instance A.FromJSON AuditCase where
  parseJSON = A.withObject "AuditCase" $ \o ->
    AuditCase
      <$> (o .:? "audit_case_id")
      <*> (o .:? "audit_id")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "committee_description")
      <*> (o .:? "committee_designation")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "cycle")
      <*> (o .:? "far_release_date")
      <*> (o .:? "link_to_report")
      <*> (o .:? "primary_category_list")

-- | ToJSON AuditCase
instance A.ToJSON AuditCase where
  toJSON AuditCase {..} =
   _omitNulls
      [ "audit_case_id" .= auditCaseAuditCaseId
      , "audit_id" .= auditCaseAuditId
      , "candidate_id" .= auditCaseCandidateId
      , "candidate_name" .= auditCaseCandidateName
      , "committee_description" .= auditCaseCommitteeDescription
      , "committee_designation" .= auditCaseCommitteeDesignation
      , "committee_id" .= auditCaseCommitteeId
      , "committee_name" .= auditCaseCommitteeName
      , "committee_type" .= auditCaseCommitteeType
      , "cycle" .= auditCaseCycle
      , "far_release_date" .= auditCaseFarReleaseDate
      , "link_to_report" .= auditCaseLinkToReport
      , "primary_category_list" .= auditCasePrimaryCategoryList
      ]


-- | Construct a value of type 'AuditCase' (by applying it's required fields, if any)
mkAuditCase
  :: AuditCase
mkAuditCase =
  AuditCase
  { auditCaseAuditCaseId = Nothing
  , auditCaseAuditId = Nothing
  , auditCaseCandidateId = Nothing
  , auditCaseCandidateName = Nothing
  , auditCaseCommitteeDescription = Nothing
  , auditCaseCommitteeDesignation = Nothing
  , auditCaseCommitteeId = Nothing
  , auditCaseCommitteeName = Nothing
  , auditCaseCommitteeType = Nothing
  , auditCaseCycle = Nothing
  , auditCaseFarReleaseDate = Nothing
  , auditCaseLinkToReport = Nothing
  , auditCasePrimaryCategoryList = Nothing
  }

-- ** AuditCaseCategoryRelation
-- | AuditCaseCategoryRelation
data AuditCaseCategoryRelation = AuditCaseCategoryRelation
  { auditCaseCategoryRelationPrimaryCategoryId :: !(Maybe Text) -- ^ "primary_category_id"
  , auditCaseCategoryRelationPrimaryCategoryName :: !(Maybe Text) -- ^ "primary_category_name"
  , auditCaseCategoryRelationSubCategoryList :: !(Maybe [AuditCaseSubCategory]) -- ^ "sub_category_list"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCaseCategoryRelation
instance A.FromJSON AuditCaseCategoryRelation where
  parseJSON = A.withObject "AuditCaseCategoryRelation" $ \o ->
    AuditCaseCategoryRelation
      <$> (o .:? "primary_category_id")
      <*> (o .:? "primary_category_name")
      <*> (o .:? "sub_category_list")

-- | ToJSON AuditCaseCategoryRelation
instance A.ToJSON AuditCaseCategoryRelation where
  toJSON AuditCaseCategoryRelation {..} =
   _omitNulls
      [ "primary_category_id" .= auditCaseCategoryRelationPrimaryCategoryId
      , "primary_category_name" .= auditCaseCategoryRelationPrimaryCategoryName
      , "sub_category_list" .= auditCaseCategoryRelationSubCategoryList
      ]


-- | Construct a value of type 'AuditCaseCategoryRelation' (by applying it's required fields, if any)
mkAuditCaseCategoryRelation
  :: AuditCaseCategoryRelation
mkAuditCaseCategoryRelation =
  AuditCaseCategoryRelation
  { auditCaseCategoryRelationPrimaryCategoryId = Nothing
  , auditCaseCategoryRelationPrimaryCategoryName = Nothing
  , auditCaseCategoryRelationSubCategoryList = Nothing
  }

-- ** AuditCaseCategoryRelationPage
-- | AuditCaseCategoryRelationPage
data AuditCaseCategoryRelationPage = AuditCaseCategoryRelationPage
  { auditCaseCategoryRelationPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , auditCaseCategoryRelationPageResults :: !(Maybe [AuditCaseCategoryRelation]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCaseCategoryRelationPage
instance A.FromJSON AuditCaseCategoryRelationPage where
  parseJSON = A.withObject "AuditCaseCategoryRelationPage" $ \o ->
    AuditCaseCategoryRelationPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON AuditCaseCategoryRelationPage
instance A.ToJSON AuditCaseCategoryRelationPage where
  toJSON AuditCaseCategoryRelationPage {..} =
   _omitNulls
      [ "pagination" .= auditCaseCategoryRelationPagePagination
      , "results" .= auditCaseCategoryRelationPageResults
      ]


-- | Construct a value of type 'AuditCaseCategoryRelationPage' (by applying it's required fields, if any)
mkAuditCaseCategoryRelationPage
  :: AuditCaseCategoryRelationPage
mkAuditCaseCategoryRelationPage =
  AuditCaseCategoryRelationPage
  { auditCaseCategoryRelationPagePagination = Nothing
  , auditCaseCategoryRelationPageResults = Nothing
  }

-- ** AuditCasePage
-- | AuditCasePage
data AuditCasePage = AuditCasePage
  { auditCasePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , auditCasePageResults    :: !(Maybe [AuditCase]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCasePage
instance A.FromJSON AuditCasePage where
  parseJSON = A.withObject "AuditCasePage" $ \o ->
    AuditCasePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON AuditCasePage
instance A.ToJSON AuditCasePage where
  toJSON AuditCasePage {..} =
   _omitNulls
      [ "pagination" .= auditCasePagePagination
      , "results" .= auditCasePageResults
      ]


-- | Construct a value of type 'AuditCasePage' (by applying it's required fields, if any)
mkAuditCasePage
  :: AuditCasePage
mkAuditCasePage =
  AuditCasePage
  { auditCasePagePagination = Nothing
  , auditCasePageResults = Nothing
  }

-- ** AuditCaseSubCategory
-- | AuditCaseSubCategory
data AuditCaseSubCategory = AuditCaseSubCategory
  { auditCaseSubCategorySubCategoryId   :: !(Maybe Text) -- ^ "sub_category_id"
  , auditCaseSubCategorySubCategoryName :: !(Maybe Text) -- ^ "sub_category_name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCaseSubCategory
instance A.FromJSON AuditCaseSubCategory where
  parseJSON = A.withObject "AuditCaseSubCategory" $ \o ->
    AuditCaseSubCategory
      <$> (o .:? "sub_category_id")
      <*> (o .:? "sub_category_name")

-- | ToJSON AuditCaseSubCategory
instance A.ToJSON AuditCaseSubCategory where
  toJSON AuditCaseSubCategory {..} =
   _omitNulls
      [ "sub_category_id" .= auditCaseSubCategorySubCategoryId
      , "sub_category_name" .= auditCaseSubCategorySubCategoryName
      ]


-- | Construct a value of type 'AuditCaseSubCategory' (by applying it's required fields, if any)
mkAuditCaseSubCategory
  :: AuditCaseSubCategory
mkAuditCaseSubCategory =
  AuditCaseSubCategory
  { auditCaseSubCategorySubCategoryId = Nothing
  , auditCaseSubCategorySubCategoryName = Nothing
  }

-- ** AuditCaseSubCategoryPage
-- | AuditCaseSubCategoryPage
data AuditCaseSubCategoryPage = AuditCaseSubCategoryPage
  { auditCaseSubCategoryPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , auditCaseSubCategoryPageResults    :: !(Maybe [AuditCaseSubCategory]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCaseSubCategoryPage
instance A.FromJSON AuditCaseSubCategoryPage where
  parseJSON = A.withObject "AuditCaseSubCategoryPage" $ \o ->
    AuditCaseSubCategoryPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON AuditCaseSubCategoryPage
instance A.ToJSON AuditCaseSubCategoryPage where
  toJSON AuditCaseSubCategoryPage {..} =
   _omitNulls
      [ "pagination" .= auditCaseSubCategoryPagePagination
      , "results" .= auditCaseSubCategoryPageResults
      ]


-- | Construct a value of type 'AuditCaseSubCategoryPage' (by applying it's required fields, if any)
mkAuditCaseSubCategoryPage
  :: AuditCaseSubCategoryPage
mkAuditCaseSubCategoryPage =
  AuditCaseSubCategoryPage
  { auditCaseSubCategoryPagePagination = Nothing
  , auditCaseSubCategoryPageResults = Nothing
  }

-- ** AuditCategory
-- | AuditCategory
data AuditCategory = AuditCategory
  { auditCategoryPrimaryCategoryId   :: !(Maybe Text) -- ^ "primary_category_id"
  , auditCategoryPrimaryCategoryName :: !(Maybe Text) -- ^ "primary_category_name"
  , auditCategorySubCategoryList     :: !(Maybe [AuditCategoryRelation]) -- ^ "sub_category_list"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCategory
instance A.FromJSON AuditCategory where
  parseJSON = A.withObject "AuditCategory" $ \o ->
    AuditCategory
      <$> (o .:? "primary_category_id")
      <*> (o .:? "primary_category_name")
      <*> (o .:? "sub_category_list")

-- | ToJSON AuditCategory
instance A.ToJSON AuditCategory where
  toJSON AuditCategory {..} =
   _omitNulls
      [ "primary_category_id" .= auditCategoryPrimaryCategoryId
      , "primary_category_name" .= auditCategoryPrimaryCategoryName
      , "sub_category_list" .= auditCategorySubCategoryList
      ]


-- | Construct a value of type 'AuditCategory' (by applying it's required fields, if any)
mkAuditCategory
  :: AuditCategory
mkAuditCategory =
  AuditCategory
  { auditCategoryPrimaryCategoryId = Nothing
  , auditCategoryPrimaryCategoryName = Nothing
  , auditCategorySubCategoryList = Nothing
  }

-- ** AuditCategoryPage
-- | AuditCategoryPage
data AuditCategoryPage = AuditCategoryPage
  { auditCategoryPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , auditCategoryPageResults    :: !(Maybe [AuditCategory]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCategoryPage
instance A.FromJSON AuditCategoryPage where
  parseJSON = A.withObject "AuditCategoryPage" $ \o ->
    AuditCategoryPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON AuditCategoryPage
instance A.ToJSON AuditCategoryPage where
  toJSON AuditCategoryPage {..} =
   _omitNulls
      [ "pagination" .= auditCategoryPagePagination
      , "results" .= auditCategoryPageResults
      ]


-- | Construct a value of type 'AuditCategoryPage' (by applying it's required fields, if any)
mkAuditCategoryPage
  :: AuditCategoryPage
mkAuditCategoryPage =
  AuditCategoryPage
  { auditCategoryPagePagination = Nothing
  , auditCategoryPageResults = Nothing
  }

-- ** AuditCategoryRelation
-- | AuditCategoryRelation
data AuditCategoryRelation = AuditCategoryRelation
  { auditCategoryRelationSubCategoryId   :: !(Maybe Text) -- ^ "sub_category_id"
  , auditCategoryRelationSubCategoryName :: !(Maybe Text) -- ^ "sub_category_name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCategoryRelation
instance A.FromJSON AuditCategoryRelation where
  parseJSON = A.withObject "AuditCategoryRelation" $ \o ->
    AuditCategoryRelation
      <$> (o .:? "sub_category_id")
      <*> (o .:? "sub_category_name")

-- | ToJSON AuditCategoryRelation
instance A.ToJSON AuditCategoryRelation where
  toJSON AuditCategoryRelation {..} =
   _omitNulls
      [ "sub_category_id" .= auditCategoryRelationSubCategoryId
      , "sub_category_name" .= auditCategoryRelationSubCategoryName
      ]


-- | Construct a value of type 'AuditCategoryRelation' (by applying it's required fields, if any)
mkAuditCategoryRelation
  :: AuditCategoryRelation
mkAuditCategoryRelation =
  AuditCategoryRelation
  { auditCategoryRelationSubCategoryId = Nothing
  , auditCategoryRelationSubCategoryName = Nothing
  }

-- ** AuditCategoryRelationPage
-- | AuditCategoryRelationPage
data AuditCategoryRelationPage = AuditCategoryRelationPage
  { auditCategoryRelationPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , auditCategoryRelationPageResults    :: !(Maybe [AuditCategoryRelation]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCategoryRelationPage
instance A.FromJSON AuditCategoryRelationPage where
  parseJSON = A.withObject "AuditCategoryRelationPage" $ \o ->
    AuditCategoryRelationPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON AuditCategoryRelationPage
instance A.ToJSON AuditCategoryRelationPage where
  toJSON AuditCategoryRelationPage {..} =
   _omitNulls
      [ "pagination" .= auditCategoryRelationPagePagination
      , "results" .= auditCategoryRelationPageResults
      ]


-- | Construct a value of type 'AuditCategoryRelationPage' (by applying it's required fields, if any)
mkAuditCategoryRelationPage
  :: AuditCategoryRelationPage
mkAuditCategoryRelationPage =
  AuditCategoryRelationPage
  { auditCategoryRelationPagePagination = Nothing
  , auditCategoryRelationPageResults = Nothing
  }

-- ** AuditCommitteeSearch
-- | AuditCommitteeSearch
data AuditCommitteeSearch = AuditCommitteeSearch
  { auditCommitteeSearchId   :: !(Maybe Text) -- ^ "id"
  , auditCommitteeSearchName :: !(Maybe Text) -- ^ "name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCommitteeSearch
instance A.FromJSON AuditCommitteeSearch where
  parseJSON = A.withObject "AuditCommitteeSearch" $ \o ->
    AuditCommitteeSearch
      <$> (o .:? "id")
      <*> (o .:? "name")

-- | ToJSON AuditCommitteeSearch
instance A.ToJSON AuditCommitteeSearch where
  toJSON AuditCommitteeSearch {..} =
   _omitNulls
      [ "id" .= auditCommitteeSearchId
      , "name" .= auditCommitteeSearchName
      ]


-- | Construct a value of type 'AuditCommitteeSearch' (by applying it's required fields, if any)
mkAuditCommitteeSearch
  :: AuditCommitteeSearch
mkAuditCommitteeSearch =
  AuditCommitteeSearch
  { auditCommitteeSearchId = Nothing
  , auditCommitteeSearchName = Nothing
  }

-- ** AuditCommitteeSearchList
-- | AuditCommitteeSearchList
data AuditCommitteeSearchList = AuditCommitteeSearchList
  { auditCommitteeSearchListResults :: !(Maybe [AuditCommitteeSearch]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditCommitteeSearchList
instance A.FromJSON AuditCommitteeSearchList where
  parseJSON = A.withObject "AuditCommitteeSearchList" $ \o ->
    AuditCommitteeSearchList
      <$> (o .:? "results")

-- | ToJSON AuditCommitteeSearchList
instance A.ToJSON AuditCommitteeSearchList where
  toJSON AuditCommitteeSearchList {..} =
   _omitNulls
      [ "results" .= auditCommitteeSearchListResults
      ]


-- | Construct a value of type 'AuditCommitteeSearchList' (by applying it's required fields, if any)
mkAuditCommitteeSearchList
  :: AuditCommitteeSearchList
mkAuditCommitteeSearchList =
  AuditCommitteeSearchList
  { auditCommitteeSearchListResults = Nothing
  }

-- ** AuditPrimaryCategory
-- | AuditPrimaryCategory
data AuditPrimaryCategory = AuditPrimaryCategory
  { auditPrimaryCategoryPrimaryCategoryId   :: !(Maybe Text) -- ^ "primary_category_id"
  , auditPrimaryCategoryPrimaryCategoryName :: !(Maybe Text) -- ^ "primary_category_name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditPrimaryCategory
instance A.FromJSON AuditPrimaryCategory where
  parseJSON = A.withObject "AuditPrimaryCategory" $ \o ->
    AuditPrimaryCategory
      <$> (o .:? "primary_category_id")
      <*> (o .:? "primary_category_name")

-- | ToJSON AuditPrimaryCategory
instance A.ToJSON AuditPrimaryCategory where
  toJSON AuditPrimaryCategory {..} =
   _omitNulls
      [ "primary_category_id" .= auditPrimaryCategoryPrimaryCategoryId
      , "primary_category_name" .= auditPrimaryCategoryPrimaryCategoryName
      ]


-- | Construct a value of type 'AuditPrimaryCategory' (by applying it's required fields, if any)
mkAuditPrimaryCategory
  :: AuditPrimaryCategory
mkAuditPrimaryCategory =
  AuditPrimaryCategory
  { auditPrimaryCategoryPrimaryCategoryId = Nothing
  , auditPrimaryCategoryPrimaryCategoryName = Nothing
  }

-- ** AuditPrimaryCategoryPage
-- | AuditPrimaryCategoryPage
data AuditPrimaryCategoryPage = AuditPrimaryCategoryPage
  { auditPrimaryCategoryPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , auditPrimaryCategoryPageResults    :: !(Maybe [AuditPrimaryCategory]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON AuditPrimaryCategoryPage
instance A.FromJSON AuditPrimaryCategoryPage where
  parseJSON = A.withObject "AuditPrimaryCategoryPage" $ \o ->
    AuditPrimaryCategoryPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON AuditPrimaryCategoryPage
instance A.ToJSON AuditPrimaryCategoryPage where
  toJSON AuditPrimaryCategoryPage {..} =
   _omitNulls
      [ "pagination" .= auditPrimaryCategoryPagePagination
      , "results" .= auditPrimaryCategoryPageResults
      ]


-- | Construct a value of type 'AuditPrimaryCategoryPage' (by applying it's required fields, if any)
mkAuditPrimaryCategoryPage
  :: AuditPrimaryCategoryPage
mkAuditPrimaryCategoryPage =
  AuditPrimaryCategoryPage
  { auditPrimaryCategoryPagePagination = Nothing
  , auditPrimaryCategoryPageResults = Nothing
  }

-- ** BaseF3Filing
-- | BaseF3Filing
data BaseF3Filing = BaseF3Filing
  { baseF3FilingAmendedAddress            :: !(Maybe Text) -- ^ "amended_address"
  , baseF3FilingAmendedBy                 :: !(Maybe Int) -- ^ "amended_by"
  , baseF3FilingAmendment                 :: !(Maybe Text) -- ^ "amendment"
  , baseF3FilingAmendmentChain            :: !(Maybe [Int]) -- ^ "amendment_chain"
  , baseF3FilingBeginningImageNumber      :: !(Maybe Text) -- ^ "beginning_image_number"
  , baseF3FilingCandidateFirstName        :: !(Maybe Text) -- ^ "candidate_first_name"
  , baseF3FilingCandidateId               :: !(Maybe Text) -- ^ "candidate_id"
  , baseF3FilingCandidateLastName         :: !(Maybe Text) -- ^ "candidate_last_name"
  , baseF3FilingCandidateMiddleName       :: !(Maybe Text) -- ^ "candidate_middle_name"
  , baseF3FilingCandidateName             :: !(Maybe Text) -- ^ "candidate_name"
  , baseF3FilingCandidatePrefix           :: !(Maybe Text) -- ^ "candidate_prefix"
  , baseF3FilingCandidateSuffix           :: !(Maybe Text) -- ^ "candidate_suffix"
  , baseF3FilingCashOnHandBeginningPeriod :: !(Maybe Int) -- ^ "cash_on_hand_beginning_period"
  , baseF3FilingCity                      :: !(Maybe Text) -- ^ "city"
  , baseF3FilingCommitteeId               :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , baseF3FilingCommitteeName             :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , baseF3FilingCoverageEndDate           :: !(Maybe Date) -- ^ "coverage_end_date"
  , baseF3FilingCoverageStartDate         :: !(Maybe Date) -- ^ "coverage_start_date"
  , baseF3FilingCsvUrl                    :: !(Maybe Text) -- ^ "csv_url"
  , baseF3FilingDistrict                  :: !(Maybe Int) -- ^ "district"
  , baseF3FilingDocumentDescription       :: !(Maybe Text) -- ^ "document_description"
  , baseF3FilingElectionDate              :: !(Maybe Date) -- ^ "election_date"
  , baseF3FilingElectionState             :: !(Maybe Text) -- ^ "election_state"
  , baseF3FilingF3z1                      :: !(Maybe Int) -- ^ "f3z1"
  , baseF3FilingFecFileId                 :: !(Maybe Text) -- ^ "fec_file_id"
  , baseF3FilingFecUrl                    :: !(Maybe Text) -- ^ "fec_url"
  , baseF3FilingFileNumber                :: !(Maybe Int) -- ^ "file_number"
  , baseF3FilingGeneralElection           :: !(Maybe Text) -- ^ "general_election"
  , baseF3FilingIsAmended                 :: !(Maybe Bool) -- ^ "is_amended"
  , baseF3FilingMostRecent                :: !(Maybe Bool) -- ^ "most_recent"
  , baseF3FilingMostRecentFiling          :: !(Maybe Int) -- ^ "most_recent_filing"
  , baseF3FilingPdfUrl                    :: !(Maybe Text) -- ^ "pdf_url"
  , baseF3FilingPrefix                    :: !(Maybe Text) -- ^ "prefix"
  , baseF3FilingPrimaryElection           :: !(Maybe Text) -- ^ "primary_election"
  , baseF3FilingReceiptDate               :: !(Maybe Date) -- ^ "receipt_date"
  , baseF3FilingReport                    :: !(Maybe Text) -- ^ "report"
  , baseF3FilingReportType                :: !(Maybe Text) -- ^ "report_type"
  , baseF3FilingReportYear                :: !(Maybe Int) -- ^ "report_year"
  , baseF3FilingRptPgi                    :: !(Maybe Text) -- ^ "rpt_pgi" - Election type  Convention, Primary, General, Special, Runoff etc.
  , baseF3FilingRunoffElection            :: !(Maybe Text) -- ^ "runoff_election"
  , baseF3FilingSignDate                  :: !(Maybe Date) -- ^ "sign_date"
  , baseF3FilingSpecialElection           :: !(Maybe Text) -- ^ "special_election"
  , baseF3FilingState                     :: !(Maybe Text) -- ^ "state"
  , baseF3FilingStreet1                   :: !(Maybe Text) -- ^ "street_1"
  , baseF3FilingStreet2                   :: !(Maybe Text) -- ^ "street_2"
  , baseF3FilingSuffix                    :: !(Maybe Text) -- ^ "suffix"
  , baseF3FilingSummaryLines              :: !(Maybe Text) -- ^ "summary_lines"
  , baseF3FilingTreasurerFirstName        :: !(Maybe Text) -- ^ "treasurer_first_name"
  , baseF3FilingTreasurerLastName         :: !(Maybe Text) -- ^ "treasurer_last_name"
  , baseF3FilingTreasurerMiddleName       :: !(Maybe Text) -- ^ "treasurer_middle_name"
  , baseF3FilingTreasurerName             :: !(Maybe Text) -- ^ "treasurer_name"
  , baseF3FilingZip                       :: !(Maybe Text) -- ^ "zip"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON BaseF3Filing
instance A.FromJSON BaseF3Filing where
  parseJSON = A.withObject "BaseF3Filing" $ \o ->
    BaseF3Filing
      <$> (o .:? "amended_address")
      <*> (o .:? "amended_by")
      <*> (o .:? "amendment")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "city")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "district")
      <*> (o .:? "document_description")
      <*> (o .:? "election_date")
      <*> (o .:? "election_state")
      <*> (o .:? "f3z1")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "file_number")
      <*> (o .:? "general_election")
      <*> (o .:? "is_amended")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_filing")
      <*> (o .:? "pdf_url")
      <*> (o .:? "prefix")
      <*> (o .:? "primary_election")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "rpt_pgi")
      <*> (o .:? "runoff_election")
      <*> (o .:? "sign_date")
      <*> (o .:? "special_election")
      <*> (o .:? "state")
      <*> (o .:? "street_1")
      <*> (o .:? "street_2")
      <*> (o .:? "suffix")
      <*> (o .:? "summary_lines")
      <*> (o .:? "treasurer_first_name")
      <*> (o .:? "treasurer_last_name")
      <*> (o .:? "treasurer_middle_name")
      <*> (o .:? "treasurer_name")
      <*> (o .:? "zip")

-- | ToJSON BaseF3Filing
instance A.ToJSON BaseF3Filing where
  toJSON BaseF3Filing {..} =
   _omitNulls
      [ "amended_address" .= baseF3FilingAmendedAddress
      , "amended_by" .= baseF3FilingAmendedBy
      , "amendment" .= baseF3FilingAmendment
      , "amendment_chain" .= baseF3FilingAmendmentChain
      , "beginning_image_number" .= baseF3FilingBeginningImageNumber
      , "candidate_first_name" .= baseF3FilingCandidateFirstName
      , "candidate_id" .= baseF3FilingCandidateId
      , "candidate_last_name" .= baseF3FilingCandidateLastName
      , "candidate_middle_name" .= baseF3FilingCandidateMiddleName
      , "candidate_name" .= baseF3FilingCandidateName
      , "candidate_prefix" .= baseF3FilingCandidatePrefix
      , "candidate_suffix" .= baseF3FilingCandidateSuffix
      , "cash_on_hand_beginning_period" .= baseF3FilingCashOnHandBeginningPeriod
      , "city" .= baseF3FilingCity
      , "committee_id" .= baseF3FilingCommitteeId
      , "committee_name" .= baseF3FilingCommitteeName
      , "coverage_end_date" .= baseF3FilingCoverageEndDate
      , "coverage_start_date" .= baseF3FilingCoverageStartDate
      , "csv_url" .= baseF3FilingCsvUrl
      , "district" .= baseF3FilingDistrict
      , "document_description" .= baseF3FilingDocumentDescription
      , "election_date" .= baseF3FilingElectionDate
      , "election_state" .= baseF3FilingElectionState
      , "f3z1" .= baseF3FilingF3z1
      , "fec_file_id" .= baseF3FilingFecFileId
      , "fec_url" .= baseF3FilingFecUrl
      , "file_number" .= baseF3FilingFileNumber
      , "general_election" .= baseF3FilingGeneralElection
      , "is_amended" .= baseF3FilingIsAmended
      , "most_recent" .= baseF3FilingMostRecent
      , "most_recent_filing" .= baseF3FilingMostRecentFiling
      , "pdf_url" .= baseF3FilingPdfUrl
      , "prefix" .= baseF3FilingPrefix
      , "primary_election" .= baseF3FilingPrimaryElection
      , "receipt_date" .= baseF3FilingReceiptDate
      , "report" .= baseF3FilingReport
      , "report_type" .= baseF3FilingReportType
      , "report_year" .= baseF3FilingReportYear
      , "rpt_pgi" .= baseF3FilingRptPgi
      , "runoff_election" .= baseF3FilingRunoffElection
      , "sign_date" .= baseF3FilingSignDate
      , "special_election" .= baseF3FilingSpecialElection
      , "state" .= baseF3FilingState
      , "street_1" .= baseF3FilingStreet1
      , "street_2" .= baseF3FilingStreet2
      , "suffix" .= baseF3FilingSuffix
      , "summary_lines" .= baseF3FilingSummaryLines
      , "treasurer_first_name" .= baseF3FilingTreasurerFirstName
      , "treasurer_last_name" .= baseF3FilingTreasurerLastName
      , "treasurer_middle_name" .= baseF3FilingTreasurerMiddleName
      , "treasurer_name" .= baseF3FilingTreasurerName
      , "zip" .= baseF3FilingZip
      ]


-- | Construct a value of type 'BaseF3Filing' (by applying it's required fields, if any)
mkBaseF3Filing
  :: BaseF3Filing
mkBaseF3Filing =
  BaseF3Filing
  { baseF3FilingAmendedAddress = Nothing
  , baseF3FilingAmendedBy = Nothing
  , baseF3FilingAmendment = Nothing
  , baseF3FilingAmendmentChain = Nothing
  , baseF3FilingBeginningImageNumber = Nothing
  , baseF3FilingCandidateFirstName = Nothing
  , baseF3FilingCandidateId = Nothing
  , baseF3FilingCandidateLastName = Nothing
  , baseF3FilingCandidateMiddleName = Nothing
  , baseF3FilingCandidateName = Nothing
  , baseF3FilingCandidatePrefix = Nothing
  , baseF3FilingCandidateSuffix = Nothing
  , baseF3FilingCashOnHandBeginningPeriod = Nothing
  , baseF3FilingCity = Nothing
  , baseF3FilingCommitteeId = Nothing
  , baseF3FilingCommitteeName = Nothing
  , baseF3FilingCoverageEndDate = Nothing
  , baseF3FilingCoverageStartDate = Nothing
  , baseF3FilingCsvUrl = Nothing
  , baseF3FilingDistrict = Nothing
  , baseF3FilingDocumentDescription = Nothing
  , baseF3FilingElectionDate = Nothing
  , baseF3FilingElectionState = Nothing
  , baseF3FilingF3z1 = Nothing
  , baseF3FilingFecFileId = Nothing
  , baseF3FilingFecUrl = Nothing
  , baseF3FilingFileNumber = Nothing
  , baseF3FilingGeneralElection = Nothing
  , baseF3FilingIsAmended = Nothing
  , baseF3FilingMostRecent = Nothing
  , baseF3FilingMostRecentFiling = Nothing
  , baseF3FilingPdfUrl = Nothing
  , baseF3FilingPrefix = Nothing
  , baseF3FilingPrimaryElection = Nothing
  , baseF3FilingReceiptDate = Nothing
  , baseF3FilingReport = Nothing
  , baseF3FilingReportType = Nothing
  , baseF3FilingReportYear = Nothing
  , baseF3FilingRptPgi = Nothing
  , baseF3FilingRunoffElection = Nothing
  , baseF3FilingSignDate = Nothing
  , baseF3FilingSpecialElection = Nothing
  , baseF3FilingState = Nothing
  , baseF3FilingStreet1 = Nothing
  , baseF3FilingStreet2 = Nothing
  , baseF3FilingSuffix = Nothing
  , baseF3FilingSummaryLines = Nothing
  , baseF3FilingTreasurerFirstName = Nothing
  , baseF3FilingTreasurerLastName = Nothing
  , baseF3FilingTreasurerMiddleName = Nothing
  , baseF3FilingTreasurerName = Nothing
  , baseF3FilingZip = Nothing
  }

-- ** BaseF3FilingPage
-- | BaseF3FilingPage
data BaseF3FilingPage = BaseF3FilingPage
  { baseF3FilingPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , baseF3FilingPageResults    :: !(Maybe [BaseF3Filing]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON BaseF3FilingPage
instance A.FromJSON BaseF3FilingPage where
  parseJSON = A.withObject "BaseF3FilingPage" $ \o ->
    BaseF3FilingPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON BaseF3FilingPage
instance A.ToJSON BaseF3FilingPage where
  toJSON BaseF3FilingPage {..} =
   _omitNulls
      [ "pagination" .= baseF3FilingPagePagination
      , "results" .= baseF3FilingPageResults
      ]


-- | Construct a value of type 'BaseF3FilingPage' (by applying it's required fields, if any)
mkBaseF3FilingPage
  :: BaseF3FilingPage
mkBaseF3FilingPage =
  BaseF3FilingPage
  { baseF3FilingPagePagination = Nothing
  , baseF3FilingPageResults = Nothing
  }

-- ** BaseF3PFiling
-- | BaseF3PFiling
data BaseF3PFiling = BaseF3PFiling
  { baseF3PFilingAmendedBy                           :: !(Maybe Int) -- ^ "amended_by"
  , baseF3PFilingAmendment                           :: !(Maybe Text) -- ^ "amendment"
  , baseF3PFilingAmendmentChain                      :: !(Maybe [Int]) -- ^ "amendment_chain"
  , baseF3PFilingBeginningImageNumber                :: !(Maybe Text) -- ^ "beginning_image_number"
  , baseF3PFilingCashOnHandBeginningPeriod           :: !(Maybe Float) -- ^ "cash_on_hand_beginning_period"
  , baseF3PFilingCashOnHandEndPeriod                 :: !(Maybe Float) -- ^ "cash_on_hand_end_period"
  , baseF3PFilingCity                                :: !(Maybe Text) -- ^ "city"
  , baseF3PFilingCommitteeId                         :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , baseF3PFilingCommitteeName                       :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , baseF3PFilingCoverageEndDate                     :: !(Maybe Date) -- ^ "coverage_end_date"
  , baseF3PFilingCoverageStartDate                   :: !(Maybe Date) -- ^ "coverage_start_date"
  , baseF3PFilingCsvUrl                              :: !(Maybe Text) -- ^ "csv_url"
  , baseF3PFilingDebtsOwedByCommittee                :: !(Maybe Float) -- ^ "debts_owed_by_committee"
  , baseF3PFilingDebtsOwedToCommittee                :: !(Maybe Float) -- ^ "debts_owed_to_committee"
  , baseF3PFilingDocumentDescription                 :: !(Maybe Text) -- ^ "document_description"
  , baseF3PFilingElectionDate                        :: !(Maybe Date) -- ^ "election_date"
  , baseF3PFilingElectionState                       :: !(Maybe Text) -- ^ "election_state"
  , baseF3PFilingExpenditureSubjectToLimits          :: !(Maybe Float) -- ^ "expenditure_subject_to_limits"
  , baseF3PFilingFecFileId                           :: !(Maybe Text) -- ^ "fec_file_id"
  , baseF3PFilingFecUrl                              :: !(Maybe Text) -- ^ "fec_url"
  , baseF3PFilingFileNumber                          :: !(Maybe Int) -- ^ "file_number"
  , baseF3PFilingGeneralElection                     :: !(Maybe Text) -- ^ "general_election"
  , baseF3PFilingIsAmended                           :: !(Maybe Bool) -- ^ "is_amended"
  , baseF3PFilingMostRecent                          :: !(Maybe Bool) -- ^ "most_recent"
  , baseF3PFilingMostRecentFiling                    :: !(Maybe Int) -- ^ "most_recent_filing"
  , baseF3PFilingNetContributionsCycleToDate         :: !(Maybe Float) -- ^ "net_contributions_cycle_to_date"
  , baseF3PFilingNetOperatingExpendituresCycleToDate :: !(Maybe Float) -- ^ "net_operating_expenditures_cycle_to_date"
  , baseF3PFilingPdfUrl                              :: !(Maybe Text) -- ^ "pdf_url"
  , baseF3PFilingPrefix                              :: !(Maybe Text) -- ^ "prefix"
  , baseF3PFilingPrimaryElection                     :: !(Maybe Text) -- ^ "primary_election"
  , baseF3PFilingReceiptDate                         :: !(Maybe Date) -- ^ "receipt_date"
  , baseF3PFilingReport                              :: !(Maybe Text) -- ^ "report"
  , baseF3PFilingReportType                          :: !(Maybe Text) -- ^ "report_type"
  , baseF3PFilingReportYear                          :: !(Maybe Int) -- ^ "report_year"
  , baseF3PFilingRptPgi                              :: !(Maybe Text) -- ^ "rpt_pgi" - Election type  Convention, Primary, General, Special, Runoff etc.
  , baseF3PFilingSignDate                            :: !(Maybe Date) -- ^ "sign_date"
  , baseF3PFilingState                               :: !(Maybe Text) -- ^ "state"
  , baseF3PFilingStreet1                             :: !(Maybe Text) -- ^ "street_1"
  , baseF3PFilingStreet2                             :: !(Maybe Text) -- ^ "street_2"
  , baseF3PFilingSubtotalSummaryPeriod               :: !(Maybe Text) -- ^ "subtotal_summary_period"
  , baseF3PFilingSuffix                              :: !(Maybe Text) -- ^ "suffix"
  , baseF3PFilingSummaryLines                        :: !(Maybe Text) -- ^ "summary_lines"
  , baseF3PFilingTreasurerFirstName                  :: !(Maybe Text) -- ^ "treasurer_first_name"
  , baseF3PFilingTreasurerLastName                   :: !(Maybe Text) -- ^ "treasurer_last_name"
  , baseF3PFilingTreasurerMiddleName                 :: !(Maybe Text) -- ^ "treasurer_middle_name"
  , baseF3PFilingTreasurerName                       :: !(Maybe Text) -- ^ "treasurer_name"
  , baseF3PFilingZip                                 :: !(Maybe Text) -- ^ "zip"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON BaseF3PFiling
instance A.FromJSON BaseF3PFiling where
  parseJSON = A.withObject "BaseF3PFiling" $ \o ->
    BaseF3PFiling
      <$> (o .:? "amended_by")
      <*> (o .:? "amendment")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "city")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "debts_owed_to_committee")
      <*> (o .:? "document_description")
      <*> (o .:? "election_date")
      <*> (o .:? "election_state")
      <*> (o .:? "expenditure_subject_to_limits")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "file_number")
      <*> (o .:? "general_election")
      <*> (o .:? "is_amended")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_filing")
      <*> (o .:? "net_contributions_cycle_to_date")
      <*> (o .:? "net_operating_expenditures_cycle_to_date")
      <*> (o .:? "pdf_url")
      <*> (o .:? "prefix")
      <*> (o .:? "primary_election")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "rpt_pgi")
      <*> (o .:? "sign_date")
      <*> (o .:? "state")
      <*> (o .:? "street_1")
      <*> (o .:? "street_2")
      <*> (o .:? "subtotal_summary_period")
      <*> (o .:? "suffix")
      <*> (o .:? "summary_lines")
      <*> (o .:? "treasurer_first_name")
      <*> (o .:? "treasurer_last_name")
      <*> (o .:? "treasurer_middle_name")
      <*> (o .:? "treasurer_name")
      <*> (o .:? "zip")

-- | ToJSON BaseF3PFiling
instance A.ToJSON BaseF3PFiling where
  toJSON BaseF3PFiling {..} =
   _omitNulls
      [ "amended_by" .= baseF3PFilingAmendedBy
      , "amendment" .= baseF3PFilingAmendment
      , "amendment_chain" .= baseF3PFilingAmendmentChain
      , "beginning_image_number" .= baseF3PFilingBeginningImageNumber
      , "cash_on_hand_beginning_period" .= baseF3PFilingCashOnHandBeginningPeriod
      , "cash_on_hand_end_period" .= baseF3PFilingCashOnHandEndPeriod
      , "city" .= baseF3PFilingCity
      , "committee_id" .= baseF3PFilingCommitteeId
      , "committee_name" .= baseF3PFilingCommitteeName
      , "coverage_end_date" .= baseF3PFilingCoverageEndDate
      , "coverage_start_date" .= baseF3PFilingCoverageStartDate
      , "csv_url" .= baseF3PFilingCsvUrl
      , "debts_owed_by_committee" .= baseF3PFilingDebtsOwedByCommittee
      , "debts_owed_to_committee" .= baseF3PFilingDebtsOwedToCommittee
      , "document_description" .= baseF3PFilingDocumentDescription
      , "election_date" .= baseF3PFilingElectionDate
      , "election_state" .= baseF3PFilingElectionState
      , "expenditure_subject_to_limits" .= baseF3PFilingExpenditureSubjectToLimits
      , "fec_file_id" .= baseF3PFilingFecFileId
      , "fec_url" .= baseF3PFilingFecUrl
      , "file_number" .= baseF3PFilingFileNumber
      , "general_election" .= baseF3PFilingGeneralElection
      , "is_amended" .= baseF3PFilingIsAmended
      , "most_recent" .= baseF3PFilingMostRecent
      , "most_recent_filing" .= baseF3PFilingMostRecentFiling
      , "net_contributions_cycle_to_date" .= baseF3PFilingNetContributionsCycleToDate
      , "net_operating_expenditures_cycle_to_date" .= baseF3PFilingNetOperatingExpendituresCycleToDate
      , "pdf_url" .= baseF3PFilingPdfUrl
      , "prefix" .= baseF3PFilingPrefix
      , "primary_election" .= baseF3PFilingPrimaryElection
      , "receipt_date" .= baseF3PFilingReceiptDate
      , "report" .= baseF3PFilingReport
      , "report_type" .= baseF3PFilingReportType
      , "report_year" .= baseF3PFilingReportYear
      , "rpt_pgi" .= baseF3PFilingRptPgi
      , "sign_date" .= baseF3PFilingSignDate
      , "state" .= baseF3PFilingState
      , "street_1" .= baseF3PFilingStreet1
      , "street_2" .= baseF3PFilingStreet2
      , "subtotal_summary_period" .= baseF3PFilingSubtotalSummaryPeriod
      , "suffix" .= baseF3PFilingSuffix
      , "summary_lines" .= baseF3PFilingSummaryLines
      , "treasurer_first_name" .= baseF3PFilingTreasurerFirstName
      , "treasurer_last_name" .= baseF3PFilingTreasurerLastName
      , "treasurer_middle_name" .= baseF3PFilingTreasurerMiddleName
      , "treasurer_name" .= baseF3PFilingTreasurerName
      , "zip" .= baseF3PFilingZip
      ]


-- | Construct a value of type 'BaseF3PFiling' (by applying it's required fields, if any)
mkBaseF3PFiling
  :: BaseF3PFiling
mkBaseF3PFiling =
  BaseF3PFiling
  { baseF3PFilingAmendedBy = Nothing
  , baseF3PFilingAmendment = Nothing
  , baseF3PFilingAmendmentChain = Nothing
  , baseF3PFilingBeginningImageNumber = Nothing
  , baseF3PFilingCashOnHandBeginningPeriod = Nothing
  , baseF3PFilingCashOnHandEndPeriod = Nothing
  , baseF3PFilingCity = Nothing
  , baseF3PFilingCommitteeId = Nothing
  , baseF3PFilingCommitteeName = Nothing
  , baseF3PFilingCoverageEndDate = Nothing
  , baseF3PFilingCoverageStartDate = Nothing
  , baseF3PFilingCsvUrl = Nothing
  , baseF3PFilingDebtsOwedByCommittee = Nothing
  , baseF3PFilingDebtsOwedToCommittee = Nothing
  , baseF3PFilingDocumentDescription = Nothing
  , baseF3PFilingElectionDate = Nothing
  , baseF3PFilingElectionState = Nothing
  , baseF3PFilingExpenditureSubjectToLimits = Nothing
  , baseF3PFilingFecFileId = Nothing
  , baseF3PFilingFecUrl = Nothing
  , baseF3PFilingFileNumber = Nothing
  , baseF3PFilingGeneralElection = Nothing
  , baseF3PFilingIsAmended = Nothing
  , baseF3PFilingMostRecent = Nothing
  , baseF3PFilingMostRecentFiling = Nothing
  , baseF3PFilingNetContributionsCycleToDate = Nothing
  , baseF3PFilingNetOperatingExpendituresCycleToDate = Nothing
  , baseF3PFilingPdfUrl = Nothing
  , baseF3PFilingPrefix = Nothing
  , baseF3PFilingPrimaryElection = Nothing
  , baseF3PFilingReceiptDate = Nothing
  , baseF3PFilingReport = Nothing
  , baseF3PFilingReportType = Nothing
  , baseF3PFilingReportYear = Nothing
  , baseF3PFilingRptPgi = Nothing
  , baseF3PFilingSignDate = Nothing
  , baseF3PFilingState = Nothing
  , baseF3PFilingStreet1 = Nothing
  , baseF3PFilingStreet2 = Nothing
  , baseF3PFilingSubtotalSummaryPeriod = Nothing
  , baseF3PFilingSuffix = Nothing
  , baseF3PFilingSummaryLines = Nothing
  , baseF3PFilingTreasurerFirstName = Nothing
  , baseF3PFilingTreasurerLastName = Nothing
  , baseF3PFilingTreasurerMiddleName = Nothing
  , baseF3PFilingTreasurerName = Nothing
  , baseF3PFilingZip = Nothing
  }

-- ** BaseF3PFilingPage
-- | BaseF3PFilingPage
data BaseF3PFilingPage = BaseF3PFilingPage
  { baseF3PFilingPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , baseF3PFilingPageResults    :: !(Maybe [BaseF3PFiling]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON BaseF3PFilingPage
instance A.FromJSON BaseF3PFilingPage where
  parseJSON = A.withObject "BaseF3PFilingPage" $ \o ->
    BaseF3PFilingPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON BaseF3PFilingPage
instance A.ToJSON BaseF3PFilingPage where
  toJSON BaseF3PFilingPage {..} =
   _omitNulls
      [ "pagination" .= baseF3PFilingPagePagination
      , "results" .= baseF3PFilingPageResults
      ]


-- | Construct a value of type 'BaseF3PFilingPage' (by applying it's required fields, if any)
mkBaseF3PFilingPage
  :: BaseF3PFilingPage
mkBaseF3PFilingPage =
  BaseF3PFilingPage
  { baseF3PFilingPagePagination = Nothing
  , baseF3PFilingPageResults = Nothing
  }

-- ** BaseF3XFiling
-- | BaseF3XFiling
data BaseF3XFiling = BaseF3XFiling
  { baseF3XFilingAmendAddress                     :: !(Maybe Text) -- ^ "amend_address"
  , baseF3XFilingAmendedBy                        :: !(Maybe Int) -- ^ "amended_by"
  , baseF3XFilingAmendment                        :: !(Maybe Text) -- ^ "amendment"
  , baseF3XFilingAmendmentChain                   :: !(Maybe [Int]) -- ^ "amendment_chain"
  , baseF3XFilingBeginningImageNumber             :: !(Maybe Text) -- ^ "beginning_image_number"
  , baseF3XFilingCity                             :: !(Maybe Text) -- ^ "city"
  , baseF3XFilingCommitteeId                      :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , baseF3XFilingCommitteeName                    :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , baseF3XFilingCoverageEndDate                  :: !(Maybe Date) -- ^ "coverage_end_date"
  , baseF3XFilingCoverageStartDate                :: !(Maybe Date) -- ^ "coverage_start_date"
  , baseF3XFilingCsvUrl                           :: !(Maybe Text) -- ^ "csv_url"
  , baseF3XFilingDocumentDescription              :: !(Maybe Text) -- ^ "document_description"
  , baseF3XFilingElectionDate                     :: !(Maybe Date) -- ^ "election_date"
  , baseF3XFilingElectionState                    :: !(Maybe Text) -- ^ "election_state"
  , baseF3XFilingFecFileId                        :: !(Maybe Text) -- ^ "fec_file_id"
  , baseF3XFilingFecUrl                           :: !(Maybe Text) -- ^ "fec_url"
  , baseF3XFilingFileNumber                       :: !(Maybe Int) -- ^ "file_number"
  , baseF3XFilingIsAmended                        :: !(Maybe Bool) -- ^ "is_amended"
  , baseF3XFilingMostRecent                       :: !(Maybe Bool) -- ^ "most_recent"
  , baseF3XFilingMostRecentFiling                 :: !(Maybe Int) -- ^ "most_recent_filing"
  , baseF3XFilingPdfUrl                           :: !(Maybe Text) -- ^ "pdf_url"
  , baseF3XFilingQualifiedMulticandidateCommittee :: !(Maybe Text) -- ^ "qualified_multicandidate_committee"
  , baseF3XFilingReceiptDate                      :: !(Maybe Date) -- ^ "receipt_date"
  , baseF3XFilingReport                           :: !(Maybe Text) -- ^ "report"
  , baseF3XFilingReportType                       :: !(Maybe Text) -- ^ "report_type"
  , baseF3XFilingReportYear                       :: !(Maybe Int) -- ^ "report_year"
  , baseF3XFilingRptPgi                           :: !(Maybe Text) -- ^ "rpt_pgi" - Election type  Convention, Primary, General, Special, Runoff etc.
  , baseF3XFilingSignDate                         :: !(Maybe Date) -- ^ "sign_date"
  , baseF3XFilingState                            :: !(Maybe Text) -- ^ "state"
  , baseF3XFilingStreet1                          :: !(Maybe Text) -- ^ "street_1"
  , baseF3XFilingStreet2                          :: !(Maybe Text) -- ^ "street_2"
  , baseF3XFilingSummaryLines                     :: !(Maybe Text) -- ^ "summary_lines"
  , baseF3XFilingZip                              :: !(Maybe Text) -- ^ "zip"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON BaseF3XFiling
instance A.FromJSON BaseF3XFiling where
  parseJSON = A.withObject "BaseF3XFiling" $ \o ->
    BaseF3XFiling
      <$> (o .:? "amend_address")
      <*> (o .:? "amended_by")
      <*> (o .:? "amendment")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "city")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "document_description")
      <*> (o .:? "election_date")
      <*> (o .:? "election_state")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "file_number")
      <*> (o .:? "is_amended")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_filing")
      <*> (o .:? "pdf_url")
      <*> (o .:? "qualified_multicandidate_committee")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "rpt_pgi")
      <*> (o .:? "sign_date")
      <*> (o .:? "state")
      <*> (o .:? "street_1")
      <*> (o .:? "street_2")
      <*> (o .:? "summary_lines")
      <*> (o .:? "zip")

-- | ToJSON BaseF3XFiling
instance A.ToJSON BaseF3XFiling where
  toJSON BaseF3XFiling {..} =
   _omitNulls
      [ "amend_address" .= baseF3XFilingAmendAddress
      , "amended_by" .= baseF3XFilingAmendedBy
      , "amendment" .= baseF3XFilingAmendment
      , "amendment_chain" .= baseF3XFilingAmendmentChain
      , "beginning_image_number" .= baseF3XFilingBeginningImageNumber
      , "city" .= baseF3XFilingCity
      , "committee_id" .= baseF3XFilingCommitteeId
      , "committee_name" .= baseF3XFilingCommitteeName
      , "coverage_end_date" .= baseF3XFilingCoverageEndDate
      , "coverage_start_date" .= baseF3XFilingCoverageStartDate
      , "csv_url" .= baseF3XFilingCsvUrl
      , "document_description" .= baseF3XFilingDocumentDescription
      , "election_date" .= baseF3XFilingElectionDate
      , "election_state" .= baseF3XFilingElectionState
      , "fec_file_id" .= baseF3XFilingFecFileId
      , "fec_url" .= baseF3XFilingFecUrl
      , "file_number" .= baseF3XFilingFileNumber
      , "is_amended" .= baseF3XFilingIsAmended
      , "most_recent" .= baseF3XFilingMostRecent
      , "most_recent_filing" .= baseF3XFilingMostRecentFiling
      , "pdf_url" .= baseF3XFilingPdfUrl
      , "qualified_multicandidate_committee" .= baseF3XFilingQualifiedMulticandidateCommittee
      , "receipt_date" .= baseF3XFilingReceiptDate
      , "report" .= baseF3XFilingReport
      , "report_type" .= baseF3XFilingReportType
      , "report_year" .= baseF3XFilingReportYear
      , "rpt_pgi" .= baseF3XFilingRptPgi
      , "sign_date" .= baseF3XFilingSignDate
      , "state" .= baseF3XFilingState
      , "street_1" .= baseF3XFilingStreet1
      , "street_2" .= baseF3XFilingStreet2
      , "summary_lines" .= baseF3XFilingSummaryLines
      , "zip" .= baseF3XFilingZip
      ]


-- | Construct a value of type 'BaseF3XFiling' (by applying it's required fields, if any)
mkBaseF3XFiling
  :: BaseF3XFiling
mkBaseF3XFiling =
  BaseF3XFiling
  { baseF3XFilingAmendAddress = Nothing
  , baseF3XFilingAmendedBy = Nothing
  , baseF3XFilingAmendment = Nothing
  , baseF3XFilingAmendmentChain = Nothing
  , baseF3XFilingBeginningImageNumber = Nothing
  , baseF3XFilingCity = Nothing
  , baseF3XFilingCommitteeId = Nothing
  , baseF3XFilingCommitteeName = Nothing
  , baseF3XFilingCoverageEndDate = Nothing
  , baseF3XFilingCoverageStartDate = Nothing
  , baseF3XFilingCsvUrl = Nothing
  , baseF3XFilingDocumentDescription = Nothing
  , baseF3XFilingElectionDate = Nothing
  , baseF3XFilingElectionState = Nothing
  , baseF3XFilingFecFileId = Nothing
  , baseF3XFilingFecUrl = Nothing
  , baseF3XFilingFileNumber = Nothing
  , baseF3XFilingIsAmended = Nothing
  , baseF3XFilingMostRecent = Nothing
  , baseF3XFilingMostRecentFiling = Nothing
  , baseF3XFilingPdfUrl = Nothing
  , baseF3XFilingQualifiedMulticandidateCommittee = Nothing
  , baseF3XFilingReceiptDate = Nothing
  , baseF3XFilingReport = Nothing
  , baseF3XFilingReportType = Nothing
  , baseF3XFilingReportYear = Nothing
  , baseF3XFilingRptPgi = Nothing
  , baseF3XFilingSignDate = Nothing
  , baseF3XFilingState = Nothing
  , baseF3XFilingStreet1 = Nothing
  , baseF3XFilingStreet2 = Nothing
  , baseF3XFilingSummaryLines = Nothing
  , baseF3XFilingZip = Nothing
  }

-- ** BaseF3XFilingPage
-- | BaseF3XFilingPage
data BaseF3XFilingPage = BaseF3XFilingPage
  { baseF3XFilingPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , baseF3XFilingPageResults    :: !(Maybe [BaseF3XFiling]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON BaseF3XFilingPage
instance A.FromJSON BaseF3XFilingPage where
  parseJSON = A.withObject "BaseF3XFilingPage" $ \o ->
    BaseF3XFilingPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON BaseF3XFilingPage
instance A.ToJSON BaseF3XFilingPage where
  toJSON BaseF3XFilingPage {..} =
   _omitNulls
      [ "pagination" .= baseF3XFilingPagePagination
      , "results" .= baseF3XFilingPageResults
      ]


-- | Construct a value of type 'BaseF3XFilingPage' (by applying it's required fields, if any)
mkBaseF3XFilingPage
  :: BaseF3XFilingPage
mkBaseF3XFilingPage =
  BaseF3XFilingPage
  { baseF3XFilingPagePagination = Nothing
  , baseF3XFilingPageResults = Nothing
  }

-- ** CalendarDate
-- | CalendarDate
data CalendarDate = CalendarDate
  { calendarDateAllDay             :: !(Maybe Bool) -- ^ "all_day"
  , calendarDateCalendarCategoryId :: !(Maybe Int) -- ^ "calendar_category_id" -  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
  , calendarDateCategory           :: !(Maybe Text) -- ^ "category" -  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
  , calendarDateDescription        :: !(Maybe Text) -- ^ "description"
  , calendarDateEndDate            :: !(Maybe Text) -- ^ "end_date"
  , calendarDateEventId            :: !(Maybe Int) -- ^ "event_id" - An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
  , calendarDateLocation           :: !(Maybe Text) -- ^ "location" - Can be state address or room.
  , calendarDateStartDate          :: !(Maybe Text) -- ^ "start_date"
  , calendarDateState              :: !(Maybe [Text]) -- ^ "state" - The state field only applies to election dates and reporting deadlines, reporting periods and all other dates do not have the array of states to filter on
  , calendarDateSummary            :: !(Maybe Text) -- ^ "summary"
  , calendarDateUrl                :: !(Maybe Text) -- ^ "url" - A url for that event
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CalendarDate
instance A.FromJSON CalendarDate where
  parseJSON = A.withObject "CalendarDate" $ \o ->
    CalendarDate
      <$> (o .:? "all_day")
      <*> (o .:? "calendar_category_id")
      <*> (o .:? "category")
      <*> (o .:? "description")
      <*> (o .:? "end_date")
      <*> (o .:? "event_id")
      <*> (o .:? "location")
      <*> (o .:? "start_date")
      <*> (o .:? "state")
      <*> (o .:? "summary")
      <*> (o .:? "url")

-- | ToJSON CalendarDate
instance A.ToJSON CalendarDate where
  toJSON CalendarDate {..} =
   _omitNulls
      [ "all_day" .= calendarDateAllDay
      , "calendar_category_id" .= calendarDateCalendarCategoryId
      , "category" .= calendarDateCategory
      , "description" .= calendarDateDescription
      , "end_date" .= calendarDateEndDate
      , "event_id" .= calendarDateEventId
      , "location" .= calendarDateLocation
      , "start_date" .= calendarDateStartDate
      , "state" .= calendarDateState
      , "summary" .= calendarDateSummary
      , "url" .= calendarDateUrl
      ]


-- | Construct a value of type 'CalendarDate' (by applying it's required fields, if any)
mkCalendarDate
  :: CalendarDate
mkCalendarDate =
  CalendarDate
  { calendarDateAllDay = Nothing
  , calendarDateCalendarCategoryId = Nothing
  , calendarDateCategory = Nothing
  , calendarDateDescription = Nothing
  , calendarDateEndDate = Nothing
  , calendarDateEventId = Nothing
  , calendarDateLocation = Nothing
  , calendarDateStartDate = Nothing
  , calendarDateState = Nothing
  , calendarDateSummary = Nothing
  , calendarDateUrl = Nothing
  }

-- ** CalendarDatePage
-- | CalendarDatePage
data CalendarDatePage = CalendarDatePage
  { calendarDatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , calendarDatePageResults    :: !(Maybe [CalendarDate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CalendarDatePage
instance A.FromJSON CalendarDatePage where
  parseJSON = A.withObject "CalendarDatePage" $ \o ->
    CalendarDatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CalendarDatePage
instance A.ToJSON CalendarDatePage where
  toJSON CalendarDatePage {..} =
   _omitNulls
      [ "pagination" .= calendarDatePagePagination
      , "results" .= calendarDatePageResults
      ]


-- | Construct a value of type 'CalendarDatePage' (by applying it's required fields, if any)
mkCalendarDatePage
  :: CalendarDatePage
mkCalendarDatePage =
  CalendarDatePage
  { calendarDatePagePagination = Nothing
  , calendarDatePageResults = Nothing
  }

-- ** Candidate
-- | Candidate
data Candidate = Candidate
  { candidateActiveThrough          :: !(Maybe Int) -- ^ "active_through" - Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
  , candidateCandidateId            :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateCandidateStatus        :: !(Maybe Text) -- ^ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateCycles                 :: !(Maybe [Int]) -- ^ "cycles" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
  , candidateDistrict               :: !(Maybe Text) -- ^ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateDistrictNumber         :: !(Maybe Int) -- ^ "district_number" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateElectionDistricts      :: !(Maybe [Text]) -- ^ "election_districts" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateElectionYears          :: !(Maybe [Int]) -- ^ "election_years" - Years in which a candidate ran for office.
  , candidateFederalFundsFlag       :: !(Maybe Bool) -- ^ "federal_funds_flag"
  , candidateFirstFileDate          :: !(Maybe Date) -- ^ "first_file_date" - The day the FEC received the candidate&#39;s first filing. This is a F2 candidate registration.
  , candidateHasRaisedFunds         :: !(Maybe Bool) -- ^ "has_raised_funds"
  , candidateIncumbentChallenge     :: !(Maybe Text) -- ^ "incumbent_challenge" - One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateIncumbentChallengeFull :: !(Maybe Text) -- ^ "incumbent_challenge_full" - Explains if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateLastF2Date             :: !(Maybe Date) -- ^ "last_f2_date" - The day the FEC received the candidate&#39;s most recent Form 2
  , candidateLastFileDate           :: !(Maybe Date) -- ^ "last_file_date" - The day the FEC received the candidate&#39;s most recent filing
  , candidateLoadDate               :: !(Maybe Date) -- ^ "load_date" - Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
  , candidateName                   :: !(Maybe Text) -- ^ "name" - Name of candidate running for office
  , candidateOffice                 :: !(Maybe Text) -- ^ "office" - Federal office candidate runs for: H, S or P
  , candidateOfficeFull             :: !(Maybe Text) -- ^ "office_full" - Federal office candidate runs for: House, Senate or presidential
  , candidateParty                  :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , candidatePartyFull              :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , candidatePrincipalCommittees    :: !(Maybe [Committee]) -- ^ "principal_committees"
  , candidateState                  :: !(Maybe Text) -- ^ "state" - US state or territory where a candidate runs for office
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON Candidate
instance A.FromJSON Candidate where
  parseJSON = A.withObject "Candidate" $ \o ->
    Candidate
      <$> (o .:? "active_through")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_status")
      <*> (o .:? "cycles")
      <*> (o .:? "district")
      <*> (o .:? "district_number")
      <*> (o .:? "election_districts")
      <*> (o .:? "election_years")
      <*> (o .:? "federal_funds_flag")
      <*> (o .:? "first_file_date")
      <*> (o .:? "has_raised_funds")
      <*> (o .:? "incumbent_challenge")
      <*> (o .:? "incumbent_challenge_full")
      <*> (o .:? "last_f2_date")
      <*> (o .:? "last_file_date")
      <*> (o .:? "load_date")
      <*> (o .:? "name")
      <*> (o .:? "office")
      <*> (o .:? "office_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "principal_committees")
      <*> (o .:? "state")

-- | ToJSON Candidate
instance A.ToJSON Candidate where
  toJSON Candidate {..} =
   _omitNulls
      [ "active_through" .= candidateActiveThrough
      , "candidate_id" .= candidateCandidateId
      , "candidate_status" .= candidateCandidateStatus
      , "cycles" .= candidateCycles
      , "district" .= candidateDistrict
      , "district_number" .= candidateDistrictNumber
      , "election_districts" .= candidateElectionDistricts
      , "election_years" .= candidateElectionYears
      , "federal_funds_flag" .= candidateFederalFundsFlag
      , "first_file_date" .= candidateFirstFileDate
      , "has_raised_funds" .= candidateHasRaisedFunds
      , "incumbent_challenge" .= candidateIncumbentChallenge
      , "incumbent_challenge_full" .= candidateIncumbentChallengeFull
      , "last_f2_date" .= candidateLastF2Date
      , "last_file_date" .= candidateLastFileDate
      , "load_date" .= candidateLoadDate
      , "name" .= candidateName
      , "office" .= candidateOffice
      , "office_full" .= candidateOfficeFull
      , "party" .= candidateParty
      , "party_full" .= candidatePartyFull
      , "principal_committees" .= candidatePrincipalCommittees
      , "state" .= candidateState
      ]


-- | Construct a value of type 'Candidate' (by applying it's required fields, if any)
mkCandidate
  :: Candidate
mkCandidate =
  Candidate
  { candidateActiveThrough = Nothing
  , candidateCandidateId = Nothing
  , candidateCandidateStatus = Nothing
  , candidateCycles = Nothing
  , candidateDistrict = Nothing
  , candidateDistrictNumber = Nothing
  , candidateElectionDistricts = Nothing
  , candidateElectionYears = Nothing
  , candidateFederalFundsFlag = Nothing
  , candidateFirstFileDate = Nothing
  , candidateHasRaisedFunds = Nothing
  , candidateIncumbentChallenge = Nothing
  , candidateIncumbentChallengeFull = Nothing
  , candidateLastF2Date = Nothing
  , candidateLastFileDate = Nothing
  , candidateLoadDate = Nothing
  , candidateName = Nothing
  , candidateOffice = Nothing
  , candidateOfficeFull = Nothing
  , candidateParty = Nothing
  , candidatePartyFull = Nothing
  , candidatePrincipalCommittees = Nothing
  , candidateState = Nothing
  }

-- ** CandidateCommitteeTotalsHouseSenate
-- | CandidateCommitteeTotalsHouseSenate
data CandidateCommitteeTotalsHouseSenate = CandidateCommitteeTotalsHouseSenate
  { candidateCommitteeTotalsHouseSenateAllOtherLoans :: !(Maybe Double) -- ^ "all_other_loans"
  , candidateCommitteeTotalsHouseSenateCandidateContribution :: !(Maybe Double) -- ^ "candidate_contribution"
  , candidateCommitteeTotalsHouseSenateCandidateId :: !(Text) -- ^ /Required/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateCommitteeTotalsHouseSenateContributionRefunds :: !(Maybe Double) -- ^ "contribution_refunds"
  , candidateCommitteeTotalsHouseSenateContributions :: !(Maybe Double) -- ^ "contributions" - Contribution
  , candidateCommitteeTotalsHouseSenateCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , candidateCommitteeTotalsHouseSenateCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , candidateCommitteeTotalsHouseSenateCycle :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , candidateCommitteeTotalsHouseSenateDisbursements :: !(Maybe Double) -- ^ "disbursements" - Disbursements
  , candidateCommitteeTotalsHouseSenateExemptLegalAccountingDisbursement :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement"
  , candidateCommitteeTotalsHouseSenateFederalFunds :: !(Maybe Double) -- ^ "federal_funds"
  , candidateCommitteeTotalsHouseSenateFullElection :: !(Bool) -- ^ /Required/ "full_election"
  , candidateCommitteeTotalsHouseSenateFundraisingDisbursements :: !(Maybe Double) -- ^ "fundraising_disbursements"
  , candidateCommitteeTotalsHouseSenateIndividualContributions :: !(Maybe Double) -- ^ "individual_contributions"
  , candidateCommitteeTotalsHouseSenateIndividualItemizedContributions :: !(Maybe Double) -- ^ "individual_itemized_contributions" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
  , candidateCommitteeTotalsHouseSenateIndividualUnitemizedContributions :: !(Maybe Double) -- ^ "individual_unitemized_contributions" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
  , candidateCommitteeTotalsHouseSenateLastBeginningImageNumber :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , candidateCommitteeTotalsHouseSenateLastCashOnHandEndPeriod :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , candidateCommitteeTotalsHouseSenateLastDebtsOwedByCommittee :: !(Maybe Double) -- ^ "last_debts_owed_by_committee"
  , candidateCommitteeTotalsHouseSenateLastDebtsOwedToCommittee :: !(Maybe Double) -- ^ "last_debts_owed_to_committee"
  , candidateCommitteeTotalsHouseSenateLastNetContributions :: !(Maybe Double) -- ^ "last_net_contributions"
  , candidateCommitteeTotalsHouseSenateLastNetOperatingExpenditures :: !(Maybe Double) -- ^ "last_net_operating_expenditures"
  , candidateCommitteeTotalsHouseSenateLastReportTypeFull :: !(Maybe Text) -- ^ "last_report_type_full"
  , candidateCommitteeTotalsHouseSenateLastReportYear :: !(Maybe Int) -- ^ "last_report_year"
  , candidateCommitteeTotalsHouseSenateLoanRepayments :: !(Maybe Double) -- ^ "loan_repayments"
  , candidateCommitteeTotalsHouseSenateLoanRepaymentsCandidateLoans :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans"
  , candidateCommitteeTotalsHouseSenateLoanRepaymentsOtherLoans :: !(Maybe Double) -- ^ "loan_repayments_other_loans"
  , candidateCommitteeTotalsHouseSenateLoans :: !(Maybe Double) -- ^ "loans"
  , candidateCommitteeTotalsHouseSenateLoansMadeByCandidate :: !(Maybe Double) -- ^ "loans_made_by_candidate"
  , candidateCommitteeTotalsHouseSenateNetContributions :: !(Maybe Double) -- ^ "net_contributions"
  , candidateCommitteeTotalsHouseSenateNetOperatingExpenditures :: !(Maybe Double) -- ^ "net_operating_expenditures"
  , candidateCommitteeTotalsHouseSenateOffsetsToFundraisingExpenditures :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures"
  , candidateCommitteeTotalsHouseSenateOffsetsToLegalAccounting :: !(Maybe Double) -- ^ "offsets_to_legal_accounting"
  , candidateCommitteeTotalsHouseSenateOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures"
  , candidateCommitteeTotalsHouseSenateOperatingExpenditures :: !(Maybe Double) -- ^ "operating_expenditures"
  , candidateCommitteeTotalsHouseSenateOtherDisbursements :: !(Maybe Double) -- ^ "other_disbursements"
  , candidateCommitteeTotalsHouseSenateOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "other_political_committee_contributions"
  , candidateCommitteeTotalsHouseSenateOtherReceipts :: !(Maybe Double) -- ^ "other_receipts"
  , candidateCommitteeTotalsHouseSenatePoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "political_party_committee_contributions"
  , candidateCommitteeTotalsHouseSenateReceipts :: !(Maybe Double) -- ^ "receipts"
  , candidateCommitteeTotalsHouseSenateRefundedIndividualContributions :: !(Maybe Double) -- ^ "refunded_individual_contributions"
  , candidateCommitteeTotalsHouseSenateRefundedOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions"
  , candidateCommitteeTotalsHouseSenateRefundedPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions"
  , candidateCommitteeTotalsHouseSenateTotalOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures"
  , candidateCommitteeTotalsHouseSenateTransactionCoverageDate :: !(Maybe DateTime) -- ^ "transaction_coverage_date"
  , candidateCommitteeTotalsHouseSenateTransfersFromOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee"
  , candidateCommitteeTotalsHouseSenateTransfersToOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateCommitteeTotalsHouseSenate
instance A.FromJSON CandidateCommitteeTotalsHouseSenate where
  parseJSON = A.withObject "CandidateCommitteeTotalsHouseSenate" $ \o ->
    CandidateCommitteeTotalsHouseSenate
      <$> (o .:? "all_other_loans")
      <*> (o .:? "candidate_contribution")
      <*> (o .:  "candidate_id")
      <*> (o .:? "contribution_refunds")
      <*> (o .:? "contributions")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "disbursements")
      <*> (o .:? "exempt_legal_accounting_disbursement")
      <*> (o .:? "federal_funds")
      <*> (o .:  "full_election")
      <*> (o .:? "fundraising_disbursements")
      <*> (o .:? "individual_contributions")
      <*> (o .:? "individual_itemized_contributions")
      <*> (o .:? "individual_unitemized_contributions")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "last_debts_owed_by_committee")
      <*> (o .:? "last_debts_owed_to_committee")
      <*> (o .:? "last_net_contributions")
      <*> (o .:? "last_net_operating_expenditures")
      <*> (o .:? "last_report_type_full")
      <*> (o .:? "last_report_year")
      <*> (o .:? "loan_repayments")
      <*> (o .:? "loan_repayments_candidate_loans")
      <*> (o .:? "loan_repayments_other_loans")
      <*> (o .:? "loans")
      <*> (o .:? "loans_made_by_candidate")
      <*> (o .:? "net_contributions")
      <*> (o .:? "net_operating_expenditures")
      <*> (o .:? "offsets_to_fundraising_expenditures")
      <*> (o .:? "offsets_to_legal_accounting")
      <*> (o .:? "offsets_to_operating_expenditures")
      <*> (o .:? "operating_expenditures")
      <*> (o .:? "other_disbursements")
      <*> (o .:? "other_political_committee_contributions")
      <*> (o .:? "other_receipts")
      <*> (o .:? "political_party_committee_contributions")
      <*> (o .:? "receipts")
      <*> (o .:? "refunded_individual_contributions")
      <*> (o .:? "refunded_other_political_committee_contributions")
      <*> (o .:? "refunded_political_party_committee_contributions")
      <*> (o .:? "total_offsets_to_operating_expenditures")
      <*> (o .:? "transaction_coverage_date")
      <*> (o .:? "transfers_from_other_authorized_committee")
      <*> (o .:? "transfers_to_other_authorized_committee")

-- | ToJSON CandidateCommitteeTotalsHouseSenate
instance A.ToJSON CandidateCommitteeTotalsHouseSenate where
  toJSON CandidateCommitteeTotalsHouseSenate {..} =
   _omitNulls
      [ "all_other_loans" .= candidateCommitteeTotalsHouseSenateAllOtherLoans
      , "candidate_contribution" .= candidateCommitteeTotalsHouseSenateCandidateContribution
      , "candidate_id" .= candidateCommitteeTotalsHouseSenateCandidateId
      , "contribution_refunds" .= candidateCommitteeTotalsHouseSenateContributionRefunds
      , "contributions" .= candidateCommitteeTotalsHouseSenateContributions
      , "coverage_end_date" .= candidateCommitteeTotalsHouseSenateCoverageEndDate
      , "coverage_start_date" .= candidateCommitteeTotalsHouseSenateCoverageStartDate
      , "cycle" .= candidateCommitteeTotalsHouseSenateCycle
      , "disbursements" .= candidateCommitteeTotalsHouseSenateDisbursements
      , "exempt_legal_accounting_disbursement" .= candidateCommitteeTotalsHouseSenateExemptLegalAccountingDisbursement
      , "federal_funds" .= candidateCommitteeTotalsHouseSenateFederalFunds
      , "full_election" .= candidateCommitteeTotalsHouseSenateFullElection
      , "fundraising_disbursements" .= candidateCommitteeTotalsHouseSenateFundraisingDisbursements
      , "individual_contributions" .= candidateCommitteeTotalsHouseSenateIndividualContributions
      , "individual_itemized_contributions" .= candidateCommitteeTotalsHouseSenateIndividualItemizedContributions
      , "individual_unitemized_contributions" .= candidateCommitteeTotalsHouseSenateIndividualUnitemizedContributions
      , "last_beginning_image_number" .= candidateCommitteeTotalsHouseSenateLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= candidateCommitteeTotalsHouseSenateLastCashOnHandEndPeriod
      , "last_debts_owed_by_committee" .= candidateCommitteeTotalsHouseSenateLastDebtsOwedByCommittee
      , "last_debts_owed_to_committee" .= candidateCommitteeTotalsHouseSenateLastDebtsOwedToCommittee
      , "last_net_contributions" .= candidateCommitteeTotalsHouseSenateLastNetContributions
      , "last_net_operating_expenditures" .= candidateCommitteeTotalsHouseSenateLastNetOperatingExpenditures
      , "last_report_type_full" .= candidateCommitteeTotalsHouseSenateLastReportTypeFull
      , "last_report_year" .= candidateCommitteeTotalsHouseSenateLastReportYear
      , "loan_repayments" .= candidateCommitteeTotalsHouseSenateLoanRepayments
      , "loan_repayments_candidate_loans" .= candidateCommitteeTotalsHouseSenateLoanRepaymentsCandidateLoans
      , "loan_repayments_other_loans" .= candidateCommitteeTotalsHouseSenateLoanRepaymentsOtherLoans
      , "loans" .= candidateCommitteeTotalsHouseSenateLoans
      , "loans_made_by_candidate" .= candidateCommitteeTotalsHouseSenateLoansMadeByCandidate
      , "net_contributions" .= candidateCommitteeTotalsHouseSenateNetContributions
      , "net_operating_expenditures" .= candidateCommitteeTotalsHouseSenateNetOperatingExpenditures
      , "offsets_to_fundraising_expenditures" .= candidateCommitteeTotalsHouseSenateOffsetsToFundraisingExpenditures
      , "offsets_to_legal_accounting" .= candidateCommitteeTotalsHouseSenateOffsetsToLegalAccounting
      , "offsets_to_operating_expenditures" .= candidateCommitteeTotalsHouseSenateOffsetsToOperatingExpenditures
      , "operating_expenditures" .= candidateCommitteeTotalsHouseSenateOperatingExpenditures
      , "other_disbursements" .= candidateCommitteeTotalsHouseSenateOtherDisbursements
      , "other_political_committee_contributions" .= candidateCommitteeTotalsHouseSenateOtherPoliticalCommitteeContributions
      , "other_receipts" .= candidateCommitteeTotalsHouseSenateOtherReceipts
      , "political_party_committee_contributions" .= candidateCommitteeTotalsHouseSenatePoliticalPartyCommitteeContributions
      , "receipts" .= candidateCommitteeTotalsHouseSenateReceipts
      , "refunded_individual_contributions" .= candidateCommitteeTotalsHouseSenateRefundedIndividualContributions
      , "refunded_other_political_committee_contributions" .= candidateCommitteeTotalsHouseSenateRefundedOtherPoliticalCommitteeContributions
      , "refunded_political_party_committee_contributions" .= candidateCommitteeTotalsHouseSenateRefundedPoliticalPartyCommitteeContributions
      , "total_offsets_to_operating_expenditures" .= candidateCommitteeTotalsHouseSenateTotalOffsetsToOperatingExpenditures
      , "transaction_coverage_date" .= candidateCommitteeTotalsHouseSenateTransactionCoverageDate
      , "transfers_from_other_authorized_committee" .= candidateCommitteeTotalsHouseSenateTransfersFromOtherAuthorizedCommittee
      , "transfers_to_other_authorized_committee" .= candidateCommitteeTotalsHouseSenateTransfersToOtherAuthorizedCommittee
      ]


-- | Construct a value of type 'CandidateCommitteeTotalsHouseSenate' (by applying it's required fields, if any)
mkCandidateCommitteeTotalsHouseSenate
  :: Text -- ^ 'candidateCommitteeTotalsHouseSenateCandidateId':  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  -> Int -- ^ 'candidateCommitteeTotalsHouseSenateCycle':  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  -> Bool -- ^ 'candidateCommitteeTotalsHouseSenateFullElection'
  -> CandidateCommitteeTotalsHouseSenate
mkCandidateCommitteeTotalsHouseSenate candidateCommitteeTotalsHouseSenateCandidateId candidateCommitteeTotalsHouseSenateCycle candidateCommitteeTotalsHouseSenateFullElection =
  CandidateCommitteeTotalsHouseSenate
  { candidateCommitteeTotalsHouseSenateAllOtherLoans = Nothing
  , candidateCommitteeTotalsHouseSenateCandidateContribution = Nothing
  , candidateCommitteeTotalsHouseSenateCandidateId
  , candidateCommitteeTotalsHouseSenateContributionRefunds = Nothing
  , candidateCommitteeTotalsHouseSenateContributions = Nothing
  , candidateCommitteeTotalsHouseSenateCoverageEndDate = Nothing
  , candidateCommitteeTotalsHouseSenateCoverageStartDate = Nothing
  , candidateCommitteeTotalsHouseSenateCycle
  , candidateCommitteeTotalsHouseSenateDisbursements = Nothing
  , candidateCommitteeTotalsHouseSenateExemptLegalAccountingDisbursement = Nothing
  , candidateCommitteeTotalsHouseSenateFederalFunds = Nothing
  , candidateCommitteeTotalsHouseSenateFullElection
  , candidateCommitteeTotalsHouseSenateFundraisingDisbursements = Nothing
  , candidateCommitteeTotalsHouseSenateIndividualContributions = Nothing
  , candidateCommitteeTotalsHouseSenateIndividualItemizedContributions = Nothing
  , candidateCommitteeTotalsHouseSenateIndividualUnitemizedContributions = Nothing
  , candidateCommitteeTotalsHouseSenateLastBeginningImageNumber = Nothing
  , candidateCommitteeTotalsHouseSenateLastCashOnHandEndPeriod = Nothing
  , candidateCommitteeTotalsHouseSenateLastDebtsOwedByCommittee = Nothing
  , candidateCommitteeTotalsHouseSenateLastDebtsOwedToCommittee = Nothing
  , candidateCommitteeTotalsHouseSenateLastNetContributions = Nothing
  , candidateCommitteeTotalsHouseSenateLastNetOperatingExpenditures = Nothing
  , candidateCommitteeTotalsHouseSenateLastReportTypeFull = Nothing
  , candidateCommitteeTotalsHouseSenateLastReportYear = Nothing
  , candidateCommitteeTotalsHouseSenateLoanRepayments = Nothing
  , candidateCommitteeTotalsHouseSenateLoanRepaymentsCandidateLoans = Nothing
  , candidateCommitteeTotalsHouseSenateLoanRepaymentsOtherLoans = Nothing
  , candidateCommitteeTotalsHouseSenateLoans = Nothing
  , candidateCommitteeTotalsHouseSenateLoansMadeByCandidate = Nothing
  , candidateCommitteeTotalsHouseSenateNetContributions = Nothing
  , candidateCommitteeTotalsHouseSenateNetOperatingExpenditures = Nothing
  , candidateCommitteeTotalsHouseSenateOffsetsToFundraisingExpenditures = Nothing
  , candidateCommitteeTotalsHouseSenateOffsetsToLegalAccounting = Nothing
  , candidateCommitteeTotalsHouseSenateOffsetsToOperatingExpenditures = Nothing
  , candidateCommitteeTotalsHouseSenateOperatingExpenditures = Nothing
  , candidateCommitteeTotalsHouseSenateOtherDisbursements = Nothing
  , candidateCommitteeTotalsHouseSenateOtherPoliticalCommitteeContributions = Nothing
  , candidateCommitteeTotalsHouseSenateOtherReceipts = Nothing
  , candidateCommitteeTotalsHouseSenatePoliticalPartyCommitteeContributions = Nothing
  , candidateCommitteeTotalsHouseSenateReceipts = Nothing
  , candidateCommitteeTotalsHouseSenateRefundedIndividualContributions = Nothing
  , candidateCommitteeTotalsHouseSenateRefundedOtherPoliticalCommitteeContributions = Nothing
  , candidateCommitteeTotalsHouseSenateRefundedPoliticalPartyCommitteeContributions = Nothing
  , candidateCommitteeTotalsHouseSenateTotalOffsetsToOperatingExpenditures = Nothing
  , candidateCommitteeTotalsHouseSenateTransactionCoverageDate = Nothing
  , candidateCommitteeTotalsHouseSenateTransfersFromOtherAuthorizedCommittee = Nothing
  , candidateCommitteeTotalsHouseSenateTransfersToOtherAuthorizedCommittee = Nothing
  }

-- ** CandidateCommitteeTotalsHouseSenatePage
-- | CandidateCommitteeTotalsHouseSenatePage
data CandidateCommitteeTotalsHouseSenatePage = CandidateCommitteeTotalsHouseSenatePage
  { candidateCommitteeTotalsHouseSenatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateCommitteeTotalsHouseSenatePageResults :: !(Maybe [CandidateCommitteeTotalsHouseSenate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateCommitteeTotalsHouseSenatePage
instance A.FromJSON CandidateCommitteeTotalsHouseSenatePage where
  parseJSON = A.withObject "CandidateCommitteeTotalsHouseSenatePage" $ \o ->
    CandidateCommitteeTotalsHouseSenatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateCommitteeTotalsHouseSenatePage
instance A.ToJSON CandidateCommitteeTotalsHouseSenatePage where
  toJSON CandidateCommitteeTotalsHouseSenatePage {..} =
   _omitNulls
      [ "pagination" .= candidateCommitteeTotalsHouseSenatePagePagination
      , "results" .= candidateCommitteeTotalsHouseSenatePageResults
      ]


-- | Construct a value of type 'CandidateCommitteeTotalsHouseSenatePage' (by applying it's required fields, if any)
mkCandidateCommitteeTotalsHouseSenatePage
  :: CandidateCommitteeTotalsHouseSenatePage
mkCandidateCommitteeTotalsHouseSenatePage =
  CandidateCommitteeTotalsHouseSenatePage
  { candidateCommitteeTotalsHouseSenatePagePagination = Nothing
  , candidateCommitteeTotalsHouseSenatePageResults = Nothing
  }

-- ** CandidateCommitteeTotalsPresidential
-- | CandidateCommitteeTotalsPresidential
data CandidateCommitteeTotalsPresidential = CandidateCommitteeTotalsPresidential
  { candidateCommitteeTotalsPresidentialCandidateContribution :: !(Maybe Double) -- ^ "candidate_contribution"
  , candidateCommitteeTotalsPresidentialCandidateId :: !(Text) -- ^ /Required/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateCommitteeTotalsPresidentialContributionRefunds :: !(Maybe Double) -- ^ "contribution_refunds"
  , candidateCommitteeTotalsPresidentialContributions :: !(Maybe Double) -- ^ "contributions" - Contribution
  , candidateCommitteeTotalsPresidentialCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , candidateCommitteeTotalsPresidentialCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , candidateCommitteeTotalsPresidentialCycle :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , candidateCommitteeTotalsPresidentialDisbursements :: !(Maybe Double) -- ^ "disbursements" - Disbursements
  , candidateCommitteeTotalsPresidentialExemptLegalAccountingDisbursement :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement"
  , candidateCommitteeTotalsPresidentialFederalFunds :: !(Maybe Double) -- ^ "federal_funds"
  , candidateCommitteeTotalsPresidentialFullElection :: !(Bool) -- ^ /Required/ "full_election"
  , candidateCommitteeTotalsPresidentialFundraisingDisbursements :: !(Maybe Double) -- ^ "fundraising_disbursements"
  , candidateCommitteeTotalsPresidentialIndividualContributions :: !(Maybe Double) -- ^ "individual_contributions"
  , candidateCommitteeTotalsPresidentialIndividualItemizedContributions :: !(Maybe Double) -- ^ "individual_itemized_contributions" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
  , candidateCommitteeTotalsPresidentialIndividualUnitemizedContributions :: !(Maybe Double) -- ^ "individual_unitemized_contributions" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
  , candidateCommitteeTotalsPresidentialLastBeginningImageNumber :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , candidateCommitteeTotalsPresidentialLastCashOnHandEndPeriod :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , candidateCommitteeTotalsPresidentialLastDebtsOwedByCommittee :: !(Maybe Double) -- ^ "last_debts_owed_by_committee"
  , candidateCommitteeTotalsPresidentialLastDebtsOwedToCommittee :: !(Maybe Double) -- ^ "last_debts_owed_to_committee"
  , candidateCommitteeTotalsPresidentialLastReportTypeFull :: !(Maybe Text) -- ^ "last_report_type_full"
  , candidateCommitteeTotalsPresidentialLastReportYear :: !(Maybe Int) -- ^ "last_report_year"
  , candidateCommitteeTotalsPresidentialLoanRepaymentsMade :: !(Maybe Double) -- ^ "loan_repayments_made"
  , candidateCommitteeTotalsPresidentialLoansReceived :: !(Maybe Double) -- ^ "loans_received"
  , candidateCommitteeTotalsPresidentialLoansReceivedFromCandidate :: !(Maybe Double) -- ^ "loans_received_from_candidate"
  , candidateCommitteeTotalsPresidentialNetContributions :: !(Maybe Double) -- ^ "net_contributions"
  , candidateCommitteeTotalsPresidentialNetOperatingExpenditures :: !(Maybe Double) -- ^ "net_operating_expenditures"
  , candidateCommitteeTotalsPresidentialOffsetsToFundraisingExpenditures :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures"
  , candidateCommitteeTotalsPresidentialOffsetsToLegalAccounting :: !(Maybe Double) -- ^ "offsets_to_legal_accounting"
  , candidateCommitteeTotalsPresidentialOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures"
  , candidateCommitteeTotalsPresidentialOperatingExpenditures :: !(Maybe Double) -- ^ "operating_expenditures"
  , candidateCommitteeTotalsPresidentialOtherDisbursements :: !(Maybe Double) -- ^ "other_disbursements"
  , candidateCommitteeTotalsPresidentialOtherLoansReceived :: !(Maybe Double) -- ^ "other_loans_received"
  , candidateCommitteeTotalsPresidentialOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "other_political_committee_contributions"
  , candidateCommitteeTotalsPresidentialOtherReceipts :: !(Maybe Double) -- ^ "other_receipts"
  , candidateCommitteeTotalsPresidentialPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "political_party_committee_contributions"
  , candidateCommitteeTotalsPresidentialReceipts :: !(Maybe Double) -- ^ "receipts"
  , candidateCommitteeTotalsPresidentialRefundedIndividualContributions :: !(Maybe Double) -- ^ "refunded_individual_contributions"
  , candidateCommitteeTotalsPresidentialRefundedOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions"
  , candidateCommitteeTotalsPresidentialRefundedPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions"
  , candidateCommitteeTotalsPresidentialRepaymentsLoansMadeByCandidate :: !(Maybe Double) -- ^ "repayments_loans_made_by_candidate"
  , candidateCommitteeTotalsPresidentialRepaymentsOtherLoans :: !(Maybe Double) -- ^ "repayments_other_loans"
  , candidateCommitteeTotalsPresidentialTotalOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures"
  , candidateCommitteeTotalsPresidentialTransactionCoverageDate :: !(Maybe DateTime) -- ^ "transaction_coverage_date"
  , candidateCommitteeTotalsPresidentialTransfersFromAffiliatedCommittee :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee"
  , candidateCommitteeTotalsPresidentialTransfersToOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateCommitteeTotalsPresidential
instance A.FromJSON CandidateCommitteeTotalsPresidential where
  parseJSON = A.withObject "CandidateCommitteeTotalsPresidential" $ \o ->
    CandidateCommitteeTotalsPresidential
      <$> (o .:? "candidate_contribution")
      <*> (o .:  "candidate_id")
      <*> (o .:? "contribution_refunds")
      <*> (o .:? "contributions")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "disbursements")
      <*> (o .:? "exempt_legal_accounting_disbursement")
      <*> (o .:? "federal_funds")
      <*> (o .:  "full_election")
      <*> (o .:? "fundraising_disbursements")
      <*> (o .:? "individual_contributions")
      <*> (o .:? "individual_itemized_contributions")
      <*> (o .:? "individual_unitemized_contributions")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "last_debts_owed_by_committee")
      <*> (o .:? "last_debts_owed_to_committee")
      <*> (o .:? "last_report_type_full")
      <*> (o .:? "last_report_year")
      <*> (o .:? "loan_repayments_made")
      <*> (o .:? "loans_received")
      <*> (o .:? "loans_received_from_candidate")
      <*> (o .:? "net_contributions")
      <*> (o .:? "net_operating_expenditures")
      <*> (o .:? "offsets_to_fundraising_expenditures")
      <*> (o .:? "offsets_to_legal_accounting")
      <*> (o .:? "offsets_to_operating_expenditures")
      <*> (o .:? "operating_expenditures")
      <*> (o .:? "other_disbursements")
      <*> (o .:? "other_loans_received")
      <*> (o .:? "other_political_committee_contributions")
      <*> (o .:? "other_receipts")
      <*> (o .:? "political_party_committee_contributions")
      <*> (o .:? "receipts")
      <*> (o .:? "refunded_individual_contributions")
      <*> (o .:? "refunded_other_political_committee_contributions")
      <*> (o .:? "refunded_political_party_committee_contributions")
      <*> (o .:? "repayments_loans_made_by_candidate")
      <*> (o .:? "repayments_other_loans")
      <*> (o .:? "total_offsets_to_operating_expenditures")
      <*> (o .:? "transaction_coverage_date")
      <*> (o .:? "transfers_from_affiliated_committee")
      <*> (o .:? "transfers_to_other_authorized_committee")

-- | ToJSON CandidateCommitteeTotalsPresidential
instance A.ToJSON CandidateCommitteeTotalsPresidential where
  toJSON CandidateCommitteeTotalsPresidential {..} =
   _omitNulls
      [ "candidate_contribution" .= candidateCommitteeTotalsPresidentialCandidateContribution
      , "candidate_id" .= candidateCommitteeTotalsPresidentialCandidateId
      , "contribution_refunds" .= candidateCommitteeTotalsPresidentialContributionRefunds
      , "contributions" .= candidateCommitteeTotalsPresidentialContributions
      , "coverage_end_date" .= candidateCommitteeTotalsPresidentialCoverageEndDate
      , "coverage_start_date" .= candidateCommitteeTotalsPresidentialCoverageStartDate
      , "cycle" .= candidateCommitteeTotalsPresidentialCycle
      , "disbursements" .= candidateCommitteeTotalsPresidentialDisbursements
      , "exempt_legal_accounting_disbursement" .= candidateCommitteeTotalsPresidentialExemptLegalAccountingDisbursement
      , "federal_funds" .= candidateCommitteeTotalsPresidentialFederalFunds
      , "full_election" .= candidateCommitteeTotalsPresidentialFullElection
      , "fundraising_disbursements" .= candidateCommitteeTotalsPresidentialFundraisingDisbursements
      , "individual_contributions" .= candidateCommitteeTotalsPresidentialIndividualContributions
      , "individual_itemized_contributions" .= candidateCommitteeTotalsPresidentialIndividualItemizedContributions
      , "individual_unitemized_contributions" .= candidateCommitteeTotalsPresidentialIndividualUnitemizedContributions
      , "last_beginning_image_number" .= candidateCommitteeTotalsPresidentialLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= candidateCommitteeTotalsPresidentialLastCashOnHandEndPeriod
      , "last_debts_owed_by_committee" .= candidateCommitteeTotalsPresidentialLastDebtsOwedByCommittee
      , "last_debts_owed_to_committee" .= candidateCommitteeTotalsPresidentialLastDebtsOwedToCommittee
      , "last_report_type_full" .= candidateCommitteeTotalsPresidentialLastReportTypeFull
      , "last_report_year" .= candidateCommitteeTotalsPresidentialLastReportYear
      , "loan_repayments_made" .= candidateCommitteeTotalsPresidentialLoanRepaymentsMade
      , "loans_received" .= candidateCommitteeTotalsPresidentialLoansReceived
      , "loans_received_from_candidate" .= candidateCommitteeTotalsPresidentialLoansReceivedFromCandidate
      , "net_contributions" .= candidateCommitteeTotalsPresidentialNetContributions
      , "net_operating_expenditures" .= candidateCommitteeTotalsPresidentialNetOperatingExpenditures
      , "offsets_to_fundraising_expenditures" .= candidateCommitteeTotalsPresidentialOffsetsToFundraisingExpenditures
      , "offsets_to_legal_accounting" .= candidateCommitteeTotalsPresidentialOffsetsToLegalAccounting
      , "offsets_to_operating_expenditures" .= candidateCommitteeTotalsPresidentialOffsetsToOperatingExpenditures
      , "operating_expenditures" .= candidateCommitteeTotalsPresidentialOperatingExpenditures
      , "other_disbursements" .= candidateCommitteeTotalsPresidentialOtherDisbursements
      , "other_loans_received" .= candidateCommitteeTotalsPresidentialOtherLoansReceived
      , "other_political_committee_contributions" .= candidateCommitteeTotalsPresidentialOtherPoliticalCommitteeContributions
      , "other_receipts" .= candidateCommitteeTotalsPresidentialOtherReceipts
      , "political_party_committee_contributions" .= candidateCommitteeTotalsPresidentialPoliticalPartyCommitteeContributions
      , "receipts" .= candidateCommitteeTotalsPresidentialReceipts
      , "refunded_individual_contributions" .= candidateCommitteeTotalsPresidentialRefundedIndividualContributions
      , "refunded_other_political_committee_contributions" .= candidateCommitteeTotalsPresidentialRefundedOtherPoliticalCommitteeContributions
      , "refunded_political_party_committee_contributions" .= candidateCommitteeTotalsPresidentialRefundedPoliticalPartyCommitteeContributions
      , "repayments_loans_made_by_candidate" .= candidateCommitteeTotalsPresidentialRepaymentsLoansMadeByCandidate
      , "repayments_other_loans" .= candidateCommitteeTotalsPresidentialRepaymentsOtherLoans
      , "total_offsets_to_operating_expenditures" .= candidateCommitteeTotalsPresidentialTotalOffsetsToOperatingExpenditures
      , "transaction_coverage_date" .= candidateCommitteeTotalsPresidentialTransactionCoverageDate
      , "transfers_from_affiliated_committee" .= candidateCommitteeTotalsPresidentialTransfersFromAffiliatedCommittee
      , "transfers_to_other_authorized_committee" .= candidateCommitteeTotalsPresidentialTransfersToOtherAuthorizedCommittee
      ]


-- | Construct a value of type 'CandidateCommitteeTotalsPresidential' (by applying it's required fields, if any)
mkCandidateCommitteeTotalsPresidential
  :: Text -- ^ 'candidateCommitteeTotalsPresidentialCandidateId':  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  -> Int -- ^ 'candidateCommitteeTotalsPresidentialCycle':  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  -> Bool -- ^ 'candidateCommitteeTotalsPresidentialFullElection'
  -> CandidateCommitteeTotalsPresidential
mkCandidateCommitteeTotalsPresidential candidateCommitteeTotalsPresidentialCandidateId candidateCommitteeTotalsPresidentialCycle candidateCommitteeTotalsPresidentialFullElection =
  CandidateCommitteeTotalsPresidential
  { candidateCommitteeTotalsPresidentialCandidateContribution = Nothing
  , candidateCommitteeTotalsPresidentialCandidateId
  , candidateCommitteeTotalsPresidentialContributionRefunds = Nothing
  , candidateCommitteeTotalsPresidentialContributions = Nothing
  , candidateCommitteeTotalsPresidentialCoverageEndDate = Nothing
  , candidateCommitteeTotalsPresidentialCoverageStartDate = Nothing
  , candidateCommitteeTotalsPresidentialCycle
  , candidateCommitteeTotalsPresidentialDisbursements = Nothing
  , candidateCommitteeTotalsPresidentialExemptLegalAccountingDisbursement = Nothing
  , candidateCommitteeTotalsPresidentialFederalFunds = Nothing
  , candidateCommitteeTotalsPresidentialFullElection
  , candidateCommitteeTotalsPresidentialFundraisingDisbursements = Nothing
  , candidateCommitteeTotalsPresidentialIndividualContributions = Nothing
  , candidateCommitteeTotalsPresidentialIndividualItemizedContributions = Nothing
  , candidateCommitteeTotalsPresidentialIndividualUnitemizedContributions = Nothing
  , candidateCommitteeTotalsPresidentialLastBeginningImageNumber = Nothing
  , candidateCommitteeTotalsPresidentialLastCashOnHandEndPeriod = Nothing
  , candidateCommitteeTotalsPresidentialLastDebtsOwedByCommittee = Nothing
  , candidateCommitteeTotalsPresidentialLastDebtsOwedToCommittee = Nothing
  , candidateCommitteeTotalsPresidentialLastReportTypeFull = Nothing
  , candidateCommitteeTotalsPresidentialLastReportYear = Nothing
  , candidateCommitteeTotalsPresidentialLoanRepaymentsMade = Nothing
  , candidateCommitteeTotalsPresidentialLoansReceived = Nothing
  , candidateCommitteeTotalsPresidentialLoansReceivedFromCandidate = Nothing
  , candidateCommitteeTotalsPresidentialNetContributions = Nothing
  , candidateCommitteeTotalsPresidentialNetOperatingExpenditures = Nothing
  , candidateCommitteeTotalsPresidentialOffsetsToFundraisingExpenditures = Nothing
  , candidateCommitteeTotalsPresidentialOffsetsToLegalAccounting = Nothing
  , candidateCommitteeTotalsPresidentialOffsetsToOperatingExpenditures = Nothing
  , candidateCommitteeTotalsPresidentialOperatingExpenditures = Nothing
  , candidateCommitteeTotalsPresidentialOtherDisbursements = Nothing
  , candidateCommitteeTotalsPresidentialOtherLoansReceived = Nothing
  , candidateCommitteeTotalsPresidentialOtherPoliticalCommitteeContributions = Nothing
  , candidateCommitteeTotalsPresidentialOtherReceipts = Nothing
  , candidateCommitteeTotalsPresidentialPoliticalPartyCommitteeContributions = Nothing
  , candidateCommitteeTotalsPresidentialReceipts = Nothing
  , candidateCommitteeTotalsPresidentialRefundedIndividualContributions = Nothing
  , candidateCommitteeTotalsPresidentialRefundedOtherPoliticalCommitteeContributions = Nothing
  , candidateCommitteeTotalsPresidentialRefundedPoliticalPartyCommitteeContributions = Nothing
  , candidateCommitteeTotalsPresidentialRepaymentsLoansMadeByCandidate = Nothing
  , candidateCommitteeTotalsPresidentialRepaymentsOtherLoans = Nothing
  , candidateCommitteeTotalsPresidentialTotalOffsetsToOperatingExpenditures = Nothing
  , candidateCommitteeTotalsPresidentialTransactionCoverageDate = Nothing
  , candidateCommitteeTotalsPresidentialTransfersFromAffiliatedCommittee = Nothing
  , candidateCommitteeTotalsPresidentialTransfersToOtherAuthorizedCommittee = Nothing
  }

-- ** CandidateCommitteeTotalsPresidentialPage
-- | CandidateCommitteeTotalsPresidentialPage
data CandidateCommitteeTotalsPresidentialPage = CandidateCommitteeTotalsPresidentialPage
  { candidateCommitteeTotalsPresidentialPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateCommitteeTotalsPresidentialPageResults :: !(Maybe [CandidateCommitteeTotalsPresidential]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateCommitteeTotalsPresidentialPage
instance A.FromJSON CandidateCommitteeTotalsPresidentialPage where
  parseJSON = A.withObject "CandidateCommitteeTotalsPresidentialPage" $ \o ->
    CandidateCommitteeTotalsPresidentialPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateCommitteeTotalsPresidentialPage
instance A.ToJSON CandidateCommitteeTotalsPresidentialPage where
  toJSON CandidateCommitteeTotalsPresidentialPage {..} =
   _omitNulls
      [ "pagination" .= candidateCommitteeTotalsPresidentialPagePagination
      , "results" .= candidateCommitteeTotalsPresidentialPageResults
      ]


-- | Construct a value of type 'CandidateCommitteeTotalsPresidentialPage' (by applying it's required fields, if any)
mkCandidateCommitteeTotalsPresidentialPage
  :: CandidateCommitteeTotalsPresidentialPage
mkCandidateCommitteeTotalsPresidentialPage =
  CandidateCommitteeTotalsPresidentialPage
  { candidateCommitteeTotalsPresidentialPagePagination = Nothing
  , candidateCommitteeTotalsPresidentialPageResults = Nothing
  }

-- ** CandidateDetail
-- | CandidateDetail
data CandidateDetail = CandidateDetail
  { candidateDetailActiveThrough          :: !(Maybe Int) -- ^ "active_through" - Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
  , candidateDetailAddressCity            :: !(Maybe Text) -- ^ "address_city" - City of candidate&#39;s address, as reported on their Form 2.
  , candidateDetailAddressState           :: !(Maybe Text) -- ^ "address_state" - State of candidate&#39;s address, as reported on their Form 2.
  , candidateDetailAddressStreet1         :: !(Maybe Text) -- ^ "address_street_1" - Street of candidate&#39;s address, as reported on their Form 2.
  , candidateDetailAddressStreet2         :: !(Maybe Text) -- ^ "address_street_2" - Additional street information of candidate&#39;s address, as reported on their Form 2.
  , candidateDetailAddressZip             :: !(Maybe Text) -- ^ "address_zip" - Zip code of candidate&#39;s address, as reported on their Form 2.
  , candidateDetailCandidateId            :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateDetailCandidateInactive      :: !(Maybe Bool) -- ^ "candidate_inactive" - True indicates that a candidate is inactive.
  , candidateDetailCandidateStatus        :: !(Maybe Text) -- ^ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateDetailCycles                 :: !(Maybe [Int]) -- ^ "cycles" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
  , candidateDetailDistrict               :: !(Maybe Text) -- ^ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateDetailDistrictNumber         :: !(Maybe Int) -- ^ "district_number" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateDetailElectionDistricts      :: !(Maybe [Text]) -- ^ "election_districts" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateDetailElectionYears          :: !(Maybe [Int]) -- ^ "election_years" - Years in which a candidate ran for office.
  , candidateDetailFederalFundsFlag       :: !(Maybe Bool) -- ^ "federal_funds_flag"
  , candidateDetailFirstFileDate          :: !(Maybe Date) -- ^ "first_file_date" - The day the FEC received the candidate&#39;s first filing. This is a F2 candidate registration.
  , candidateDetailFlags                  :: !(Maybe Text) -- ^ "flags"
  , candidateDetailHasRaisedFunds         :: !(Maybe Bool) -- ^ "has_raised_funds"
  , candidateDetailIncumbentChallenge     :: !(Maybe Text) -- ^ "incumbent_challenge" - One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateDetailIncumbentChallengeFull :: !(Maybe Text) -- ^ "incumbent_challenge_full" - Explains if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateDetailLastF2Date             :: !(Maybe Date) -- ^ "last_f2_date" - The day the FEC received the candidate&#39;s most recent Form 2
  , candidateDetailLastFileDate           :: !(Maybe Date) -- ^ "last_file_date" - The day the FEC received the candidate&#39;s most recent filing
  , candidateDetailLoadDate               :: !(Maybe Date) -- ^ "load_date" - Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
  , candidateDetailName                   :: !(Maybe Text) -- ^ "name" - Name of candidate running for office
  , candidateDetailOffice                 :: !(Maybe Text) -- ^ "office" - Federal office candidate runs for: H, S or P
  , candidateDetailOfficeFull             :: !(Maybe Text) -- ^ "office_full" - Federal office candidate runs for: House, Senate or presidential
  , candidateDetailParty                  :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , candidateDetailPartyFull              :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , candidateDetailState                  :: !(Maybe Text) -- ^ "state" - US state or territory where a candidate runs for office
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateDetail
instance A.FromJSON CandidateDetail where
  parseJSON = A.withObject "CandidateDetail" $ \o ->
    CandidateDetail
      <$> (o .:? "active_through")
      <*> (o .:? "address_city")
      <*> (o .:? "address_state")
      <*> (o .:? "address_street_1")
      <*> (o .:? "address_street_2")
      <*> (o .:? "address_zip")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_inactive")
      <*> (o .:? "candidate_status")
      <*> (o .:? "cycles")
      <*> (o .:? "district")
      <*> (o .:? "district_number")
      <*> (o .:? "election_districts")
      <*> (o .:? "election_years")
      <*> (o .:? "federal_funds_flag")
      <*> (o .:? "first_file_date")
      <*> (o .:? "flags")
      <*> (o .:? "has_raised_funds")
      <*> (o .:? "incumbent_challenge")
      <*> (o .:? "incumbent_challenge_full")
      <*> (o .:? "last_f2_date")
      <*> (o .:? "last_file_date")
      <*> (o .:? "load_date")
      <*> (o .:? "name")
      <*> (o .:? "office")
      <*> (o .:? "office_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "state")

-- | ToJSON CandidateDetail
instance A.ToJSON CandidateDetail where
  toJSON CandidateDetail {..} =
   _omitNulls
      [ "active_through" .= candidateDetailActiveThrough
      , "address_city" .= candidateDetailAddressCity
      , "address_state" .= candidateDetailAddressState
      , "address_street_1" .= candidateDetailAddressStreet1
      , "address_street_2" .= candidateDetailAddressStreet2
      , "address_zip" .= candidateDetailAddressZip
      , "candidate_id" .= candidateDetailCandidateId
      , "candidate_inactive" .= candidateDetailCandidateInactive
      , "candidate_status" .= candidateDetailCandidateStatus
      , "cycles" .= candidateDetailCycles
      , "district" .= candidateDetailDistrict
      , "district_number" .= candidateDetailDistrictNumber
      , "election_districts" .= candidateDetailElectionDistricts
      , "election_years" .= candidateDetailElectionYears
      , "federal_funds_flag" .= candidateDetailFederalFundsFlag
      , "first_file_date" .= candidateDetailFirstFileDate
      , "flags" .= candidateDetailFlags
      , "has_raised_funds" .= candidateDetailHasRaisedFunds
      , "incumbent_challenge" .= candidateDetailIncumbentChallenge
      , "incumbent_challenge_full" .= candidateDetailIncumbentChallengeFull
      , "last_f2_date" .= candidateDetailLastF2Date
      , "last_file_date" .= candidateDetailLastFileDate
      , "load_date" .= candidateDetailLoadDate
      , "name" .= candidateDetailName
      , "office" .= candidateDetailOffice
      , "office_full" .= candidateDetailOfficeFull
      , "party" .= candidateDetailParty
      , "party_full" .= candidateDetailPartyFull
      , "state" .= candidateDetailState
      ]


-- | Construct a value of type 'CandidateDetail' (by applying it's required fields, if any)
mkCandidateDetail
  :: CandidateDetail
mkCandidateDetail =
  CandidateDetail
  { candidateDetailActiveThrough = Nothing
  , candidateDetailAddressCity = Nothing
  , candidateDetailAddressState = Nothing
  , candidateDetailAddressStreet1 = Nothing
  , candidateDetailAddressStreet2 = Nothing
  , candidateDetailAddressZip = Nothing
  , candidateDetailCandidateId = Nothing
  , candidateDetailCandidateInactive = Nothing
  , candidateDetailCandidateStatus = Nothing
  , candidateDetailCycles = Nothing
  , candidateDetailDistrict = Nothing
  , candidateDetailDistrictNumber = Nothing
  , candidateDetailElectionDistricts = Nothing
  , candidateDetailElectionYears = Nothing
  , candidateDetailFederalFundsFlag = Nothing
  , candidateDetailFirstFileDate = Nothing
  , candidateDetailFlags = Nothing
  , candidateDetailHasRaisedFunds = Nothing
  , candidateDetailIncumbentChallenge = Nothing
  , candidateDetailIncumbentChallengeFull = Nothing
  , candidateDetailLastF2Date = Nothing
  , candidateDetailLastFileDate = Nothing
  , candidateDetailLoadDate = Nothing
  , candidateDetailName = Nothing
  , candidateDetailOffice = Nothing
  , candidateDetailOfficeFull = Nothing
  , candidateDetailParty = Nothing
  , candidateDetailPartyFull = Nothing
  , candidateDetailState = Nothing
  }

-- ** CandidateDetailPage
-- | CandidateDetailPage
data CandidateDetailPage = CandidateDetailPage
  { candidateDetailPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateDetailPageResults    :: !(Maybe [CandidateDetail]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateDetailPage
instance A.FromJSON CandidateDetailPage where
  parseJSON = A.withObject "CandidateDetailPage" $ \o ->
    CandidateDetailPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateDetailPage
instance A.ToJSON CandidateDetailPage where
  toJSON CandidateDetailPage {..} =
   _omitNulls
      [ "pagination" .= candidateDetailPagePagination
      , "results" .= candidateDetailPageResults
      ]


-- | Construct a value of type 'CandidateDetailPage' (by applying it's required fields, if any)
mkCandidateDetailPage
  :: CandidateDetailPage
mkCandidateDetailPage =
  CandidateDetailPage
  { candidateDetailPagePagination = Nothing
  , candidateDetailPageResults = Nothing
  }

-- ** CandidateFlags
-- | CandidateFlags
data CandidateFlags = CandidateFlags
  { candidateFlagsCandidateId      :: !(Text) -- ^ /Required/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateFlagsFederalFundsFlag :: !(Maybe Bool) -- ^ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
  , candidateFlagsHasRaisedFunds   :: !(Maybe Bool) -- ^ "has_raised_funds" - A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateFlags
instance A.FromJSON CandidateFlags where
  parseJSON = A.withObject "CandidateFlags" $ \o ->
    CandidateFlags
      <$> (o .:  "candidate_id")
      <*> (o .:? "federal_funds_flag")
      <*> (o .:? "has_raised_funds")

-- | ToJSON CandidateFlags
instance A.ToJSON CandidateFlags where
  toJSON CandidateFlags {..} =
   _omitNulls
      [ "candidate_id" .= candidateFlagsCandidateId
      , "federal_funds_flag" .= candidateFlagsFederalFundsFlag
      , "has_raised_funds" .= candidateFlagsHasRaisedFunds
      ]


-- | Construct a value of type 'CandidateFlags' (by applying it's required fields, if any)
mkCandidateFlags
  :: Text -- ^ 'candidateFlagsCandidateId':  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  -> CandidateFlags
mkCandidateFlags candidateFlagsCandidateId =
  CandidateFlags
  { candidateFlagsCandidateId
  , candidateFlagsFederalFundsFlag = Nothing
  , candidateFlagsHasRaisedFunds = Nothing
  }

-- ** CandidateFlagsPage
-- | CandidateFlagsPage
data CandidateFlagsPage = CandidateFlagsPage
  { candidateFlagsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateFlagsPageResults    :: !(Maybe [CandidateFlags]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateFlagsPage
instance A.FromJSON CandidateFlagsPage where
  parseJSON = A.withObject "CandidateFlagsPage" $ \o ->
    CandidateFlagsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateFlagsPage
instance A.ToJSON CandidateFlagsPage where
  toJSON CandidateFlagsPage {..} =
   _omitNulls
      [ "pagination" .= candidateFlagsPagePagination
      , "results" .= candidateFlagsPageResults
      ]


-- | Construct a value of type 'CandidateFlagsPage' (by applying it's required fields, if any)
mkCandidateFlagsPage
  :: CandidateFlagsPage
mkCandidateFlagsPage =
  CandidateFlagsPage
  { candidateFlagsPagePagination = Nothing
  , candidateFlagsPageResults = Nothing
  }

-- ** CandidateHistory
-- | CandidateHistory
data CandidateHistory = CandidateHistory
  { candidateHistoryActiveThrough          :: !(Maybe Int) -- ^ "active_through" - Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
  , candidateHistoryAddressCity            :: !(Maybe Text) -- ^ "address_city" - City of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryAddressState           :: !(Maybe Text) -- ^ "address_state" - State of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryAddressStreet1         :: !(Maybe Text) -- ^ "address_street_1" - Street of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryAddressStreet2         :: !(Maybe Text) -- ^ "address_street_2" - Additional street information of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryAddressZip             :: !(Maybe Text) -- ^ "address_zip" - Zip code of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryCandidateElectionYear  :: !(Maybe Int) -- ^ "candidate_election_year" - The last year of the cycle for this election.
  , candidateHistoryCandidateId            :: !(Text) -- ^ /Required/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateHistoryCandidateInactive      :: !(Maybe Bool) -- ^ "candidate_inactive" - True indicates that a candidate is inactive.
  , candidateHistoryCandidateStatus        :: !(Maybe Text) -- ^ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateHistoryCycles                 :: !(Maybe [Int]) -- ^ "cycles" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
  , candidateHistoryDistrict               :: !(Maybe Text) -- ^ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateHistoryDistrictNumber         :: !(Maybe Int) -- ^ "district_number" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateHistoryElectionDistricts      :: !(Maybe [Text]) -- ^ "election_districts" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateHistoryElectionYears          :: !(Maybe [Int]) -- ^ "election_years" - Years in which a candidate ran for office.
  , candidateHistoryFirstFileDate          :: !(Maybe Date) -- ^ "first_file_date" - The day the FEC received the candidate&#39;s first filing. This is a F2 candidate registration.
  , candidateHistoryFlags                  :: !(Maybe Text) -- ^ "flags"
  , candidateHistoryIncumbentChallenge     :: !(Maybe Text) -- ^ "incumbent_challenge" - One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateHistoryIncumbentChallengeFull :: !(Maybe Text) -- ^ "incumbent_challenge_full" - Explains if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateHistoryLastF2Date             :: !(Maybe Date) -- ^ "last_f2_date" - The day the FEC received the candidate&#39;s most recent Form 2
  , candidateHistoryLastFileDate           :: !(Maybe Date) -- ^ "last_file_date" - The day the FEC received the candidate&#39;s most recent filing
  , candidateHistoryLoadDate               :: !(Maybe Date) -- ^ "load_date" - Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
  , candidateHistoryName                   :: !(Maybe Text) -- ^ "name" - Name of candidate running for office
  , candidateHistoryOffice                 :: !(Maybe Text) -- ^ "office" - Federal office candidate runs for: H, S or P
  , candidateHistoryOfficeFull             :: !(Maybe Text) -- ^ "office_full" - Federal office candidate runs for: House, Senate or presidential
  , candidateHistoryParty                  :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , candidateHistoryPartyFull              :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , candidateHistoryState                  :: !(Maybe Text) -- ^ "state" - US state or territory where a candidate runs for office
  , candidateHistoryTwoYearPeriod          :: !(Int) -- ^ /Required/ "two_year_period" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateHistory
instance A.FromJSON CandidateHistory where
  parseJSON = A.withObject "CandidateHistory" $ \o ->
    CandidateHistory
      <$> (o .:? "active_through")
      <*> (o .:? "address_city")
      <*> (o .:? "address_state")
      <*> (o .:? "address_street_1")
      <*> (o .:? "address_street_2")
      <*> (o .:? "address_zip")
      <*> (o .:? "candidate_election_year")
      <*> (o .:  "candidate_id")
      <*> (o .:? "candidate_inactive")
      <*> (o .:? "candidate_status")
      <*> (o .:? "cycles")
      <*> (o .:? "district")
      <*> (o .:? "district_number")
      <*> (o .:? "election_districts")
      <*> (o .:? "election_years")
      <*> (o .:? "first_file_date")
      <*> (o .:? "flags")
      <*> (o .:? "incumbent_challenge")
      <*> (o .:? "incumbent_challenge_full")
      <*> (o .:? "last_f2_date")
      <*> (o .:? "last_file_date")
      <*> (o .:? "load_date")
      <*> (o .:? "name")
      <*> (o .:? "office")
      <*> (o .:? "office_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "state")
      <*> (o .:  "two_year_period")

-- | ToJSON CandidateHistory
instance A.ToJSON CandidateHistory where
  toJSON CandidateHistory {..} =
   _omitNulls
      [ "active_through" .= candidateHistoryActiveThrough
      , "address_city" .= candidateHistoryAddressCity
      , "address_state" .= candidateHistoryAddressState
      , "address_street_1" .= candidateHistoryAddressStreet1
      , "address_street_2" .= candidateHistoryAddressStreet2
      , "address_zip" .= candidateHistoryAddressZip
      , "candidate_election_year" .= candidateHistoryCandidateElectionYear
      , "candidate_id" .= candidateHistoryCandidateId
      , "candidate_inactive" .= candidateHistoryCandidateInactive
      , "candidate_status" .= candidateHistoryCandidateStatus
      , "cycles" .= candidateHistoryCycles
      , "district" .= candidateHistoryDistrict
      , "district_number" .= candidateHistoryDistrictNumber
      , "election_districts" .= candidateHistoryElectionDistricts
      , "election_years" .= candidateHistoryElectionYears
      , "first_file_date" .= candidateHistoryFirstFileDate
      , "flags" .= candidateHistoryFlags
      , "incumbent_challenge" .= candidateHistoryIncumbentChallenge
      , "incumbent_challenge_full" .= candidateHistoryIncumbentChallengeFull
      , "last_f2_date" .= candidateHistoryLastF2Date
      , "last_file_date" .= candidateHistoryLastFileDate
      , "load_date" .= candidateHistoryLoadDate
      , "name" .= candidateHistoryName
      , "office" .= candidateHistoryOffice
      , "office_full" .= candidateHistoryOfficeFull
      , "party" .= candidateHistoryParty
      , "party_full" .= candidateHistoryPartyFull
      , "state" .= candidateHistoryState
      , "two_year_period" .= candidateHistoryTwoYearPeriod
      ]


-- | Construct a value of type 'CandidateHistory' (by applying it's required fields, if any)
mkCandidateHistory
  :: Text -- ^ 'candidateHistoryCandidateId':  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  -> Int -- ^ 'candidateHistoryTwoYearPeriod':  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag.
  -> CandidateHistory
mkCandidateHistory candidateHistoryCandidateId candidateHistoryTwoYearPeriod =
  CandidateHistory
  { candidateHistoryActiveThrough = Nothing
  , candidateHistoryAddressCity = Nothing
  , candidateHistoryAddressState = Nothing
  , candidateHistoryAddressStreet1 = Nothing
  , candidateHistoryAddressStreet2 = Nothing
  , candidateHistoryAddressZip = Nothing
  , candidateHistoryCandidateElectionYear = Nothing
  , candidateHistoryCandidateId
  , candidateHistoryCandidateInactive = Nothing
  , candidateHistoryCandidateStatus = Nothing
  , candidateHistoryCycles = Nothing
  , candidateHistoryDistrict = Nothing
  , candidateHistoryDistrictNumber = Nothing
  , candidateHistoryElectionDistricts = Nothing
  , candidateHistoryElectionYears = Nothing
  , candidateHistoryFirstFileDate = Nothing
  , candidateHistoryFlags = Nothing
  , candidateHistoryIncumbentChallenge = Nothing
  , candidateHistoryIncumbentChallengeFull = Nothing
  , candidateHistoryLastF2Date = Nothing
  , candidateHistoryLastFileDate = Nothing
  , candidateHistoryLoadDate = Nothing
  , candidateHistoryName = Nothing
  , candidateHistoryOffice = Nothing
  , candidateHistoryOfficeFull = Nothing
  , candidateHistoryParty = Nothing
  , candidateHistoryPartyFull = Nothing
  , candidateHistoryState = Nothing
  , candidateHistoryTwoYearPeriod
  }

-- ** CandidateHistoryPage
-- | CandidateHistoryPage
data CandidateHistoryPage = CandidateHistoryPage
  { candidateHistoryPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateHistoryPageResults    :: !(Maybe [CandidateHistory]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateHistoryPage
instance A.FromJSON CandidateHistoryPage where
  parseJSON = A.withObject "CandidateHistoryPage" $ \o ->
    CandidateHistoryPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateHistoryPage
instance A.ToJSON CandidateHistoryPage where
  toJSON CandidateHistoryPage {..} =
   _omitNulls
      [ "pagination" .= candidateHistoryPagePagination
      , "results" .= candidateHistoryPageResults
      ]


-- | Construct a value of type 'CandidateHistoryPage' (by applying it's required fields, if any)
mkCandidateHistoryPage
  :: CandidateHistoryPage
mkCandidateHistoryPage =
  CandidateHistoryPage
  { candidateHistoryPagePagination = Nothing
  , candidateHistoryPageResults = Nothing
  }

-- ** CandidateHistoryTotal
-- | CandidateHistoryTotal
data CandidateHistoryTotal = CandidateHistoryTotal
  { candidateHistoryTotalActiveThrough          :: !(Maybe Int) -- ^ "active_through" - Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
  , candidateHistoryTotalAddressCity            :: !(Maybe Text) -- ^ "address_city" - City of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryTotalAddressState           :: !(Maybe Text) -- ^ "address_state" - State of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryTotalAddressStreet1         :: !(Maybe Text) -- ^ "address_street_1" - Street of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryTotalAddressStreet2         :: !(Maybe Text) -- ^ "address_street_2" - Additional street information of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryTotalAddressZip             :: !(Maybe Text) -- ^ "address_zip" - Zip code of candidate&#39;s address, as reported on their Form 2.
  , candidateHistoryTotalCandidateElectionYear  :: !(Maybe Int) -- ^ "candidate_election_year" - The last year of the cycle for this election.
  , candidateHistoryTotalCandidateId            :: !(Text) -- ^ /Required/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , candidateHistoryTotalCandidateInactive      :: !(Maybe Bool) -- ^ "candidate_inactive" - True indicates that a candidate is inactive.
  , candidateHistoryTotalCandidateStatus        :: !(Maybe Text) -- ^ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateHistoryTotalCashOnHandEndPeriod    :: !(Maybe Double) -- ^ "cash_on_hand_end_period"
  , candidateHistoryTotalCoverageEndDate        :: !(Maybe Date) -- ^ "coverage_end_date" - Ending date of the reporting period
  , candidateHistoryTotalCoverageStartDate      :: !(Maybe Date) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , candidateHistoryTotalCycle                  :: !(Int) -- ^ /Required/ "cycle"
  , candidateHistoryTotalCycles                 :: !(Maybe [Int]) -- ^ "cycles" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
  , candidateHistoryTotalDebtsOwedByCommittee   :: !(Maybe Double) -- ^ "debts_owed_by_committee"
  , candidateHistoryTotalDisbursements          :: !(Maybe Double) -- ^ "disbursements"
  , candidateHistoryTotalDistrict               :: !(Maybe Text) -- ^ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateHistoryTotalDistrictNumber         :: !(Maybe Int) -- ^ "district_number" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate
  , candidateHistoryTotalElectionDistricts      :: !(Maybe [Text]) -- ^ "election_districts" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , candidateHistoryTotalElectionYear           :: !(Maybe Int) -- ^ "election_year"
  , candidateHistoryTotalElectionYears          :: !(Maybe [Int]) -- ^ "election_years" - Years in which a candidate ran for office.
  , candidateHistoryTotalFederalFundsFlag       :: !(Maybe Bool) -- ^ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
  , candidateHistoryTotalFirstFileDate          :: !(Maybe Date) -- ^ "first_file_date" - The day the FEC received the candidate&#39;s first filing. This is a F2 candidate registration.
  , candidateHistoryTotalFlags                  :: !(Maybe Text) -- ^ "flags"
  , candidateHistoryTotalHasRaisedFunds         :: !(Maybe Bool) -- ^ "has_raised_funds" - A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
  , candidateHistoryTotalIncumbentChallenge     :: !(Maybe Text) -- ^ "incumbent_challenge" - One-letter code (&#39;I&#39;, &#39;C&#39;, &#39;O&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateHistoryTotalIncumbentChallengeFull :: !(Maybe Text) -- ^ "incumbent_challenge_full" - Explains if the candidate is an incumbent, a challenger, or if the seat is open.
  , candidateHistoryTotalIsElection             :: !(Bool) -- ^ /Required/ "is_election"
  , candidateHistoryTotalLastF2Date             :: !(Maybe Date) -- ^ "last_f2_date" - The day the FEC received the candidate&#39;s most recent Form 2
  , candidateHistoryTotalLastFileDate           :: !(Maybe Date) -- ^ "last_file_date" - The day the FEC received the candidate&#39;s most recent filing
  , candidateHistoryTotalLoadDate               :: !(Maybe Date) -- ^ "load_date" - Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
  , candidateHistoryTotalName                   :: !(Maybe Text) -- ^ "name" - Name of candidate running for office
  , candidateHistoryTotalOffice                 :: !(Maybe Text) -- ^ "office" - Federal office candidate runs for: H, S or P
  , candidateHistoryTotalOfficeFull             :: !(Maybe Text) -- ^ "office_full" - Federal office candidate runs for: House, Senate or presidential
  , candidateHistoryTotalParty                  :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , candidateHistoryTotalPartyFull              :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , candidateHistoryTotalReceipts               :: !(Maybe Double) -- ^ "receipts"
  , candidateHistoryTotalState                  :: !(Maybe Text) -- ^ "state" - US state or territory where a candidate runs for office
  , candidateHistoryTotalTwoYearPeriod          :: !(Int) -- ^ /Required/ "two_year_period" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateHistoryTotal
instance A.FromJSON CandidateHistoryTotal where
  parseJSON = A.withObject "CandidateHistoryTotal" $ \o ->
    CandidateHistoryTotal
      <$> (o .:? "active_through")
      <*> (o .:? "address_city")
      <*> (o .:? "address_state")
      <*> (o .:? "address_street_1")
      <*> (o .:? "address_street_2")
      <*> (o .:? "address_zip")
      <*> (o .:? "candidate_election_year")
      <*> (o .:  "candidate_id")
      <*> (o .:? "candidate_inactive")
      <*> (o .:? "candidate_status")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "cycles")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "disbursements")
      <*> (o .:? "district")
      <*> (o .:? "district_number")
      <*> (o .:? "election_districts")
      <*> (o .:? "election_year")
      <*> (o .:? "election_years")
      <*> (o .:? "federal_funds_flag")
      <*> (o .:? "first_file_date")
      <*> (o .:? "flags")
      <*> (o .:? "has_raised_funds")
      <*> (o .:? "incumbent_challenge")
      <*> (o .:? "incumbent_challenge_full")
      <*> (o .:  "is_election")
      <*> (o .:? "last_f2_date")
      <*> (o .:? "last_file_date")
      <*> (o .:? "load_date")
      <*> (o .:? "name")
      <*> (o .:? "office")
      <*> (o .:? "office_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "receipts")
      <*> (o .:? "state")
      <*> (o .:  "two_year_period")

-- | ToJSON CandidateHistoryTotal
instance A.ToJSON CandidateHistoryTotal where
  toJSON CandidateHistoryTotal {..} =
   _omitNulls
      [ "active_through" .= candidateHistoryTotalActiveThrough
      , "address_city" .= candidateHistoryTotalAddressCity
      , "address_state" .= candidateHistoryTotalAddressState
      , "address_street_1" .= candidateHistoryTotalAddressStreet1
      , "address_street_2" .= candidateHistoryTotalAddressStreet2
      , "address_zip" .= candidateHistoryTotalAddressZip
      , "candidate_election_year" .= candidateHistoryTotalCandidateElectionYear
      , "candidate_id" .= candidateHistoryTotalCandidateId
      , "candidate_inactive" .= candidateHistoryTotalCandidateInactive
      , "candidate_status" .= candidateHistoryTotalCandidateStatus
      , "cash_on_hand_end_period" .= candidateHistoryTotalCashOnHandEndPeriod
      , "coverage_end_date" .= candidateHistoryTotalCoverageEndDate
      , "coverage_start_date" .= candidateHistoryTotalCoverageStartDate
      , "cycle" .= candidateHistoryTotalCycle
      , "cycles" .= candidateHistoryTotalCycles
      , "debts_owed_by_committee" .= candidateHistoryTotalDebtsOwedByCommittee
      , "disbursements" .= candidateHistoryTotalDisbursements
      , "district" .= candidateHistoryTotalDistrict
      , "district_number" .= candidateHistoryTotalDistrictNumber
      , "election_districts" .= candidateHistoryTotalElectionDistricts
      , "election_year" .= candidateHistoryTotalElectionYear
      , "election_years" .= candidateHistoryTotalElectionYears
      , "federal_funds_flag" .= candidateHistoryTotalFederalFundsFlag
      , "first_file_date" .= candidateHistoryTotalFirstFileDate
      , "flags" .= candidateHistoryTotalFlags
      , "has_raised_funds" .= candidateHistoryTotalHasRaisedFunds
      , "incumbent_challenge" .= candidateHistoryTotalIncumbentChallenge
      , "incumbent_challenge_full" .= candidateHistoryTotalIncumbentChallengeFull
      , "is_election" .= candidateHistoryTotalIsElection
      , "last_f2_date" .= candidateHistoryTotalLastF2Date
      , "last_file_date" .= candidateHistoryTotalLastFileDate
      , "load_date" .= candidateHistoryTotalLoadDate
      , "name" .= candidateHistoryTotalName
      , "office" .= candidateHistoryTotalOffice
      , "office_full" .= candidateHistoryTotalOfficeFull
      , "party" .= candidateHistoryTotalParty
      , "party_full" .= candidateHistoryTotalPartyFull
      , "receipts" .= candidateHistoryTotalReceipts
      , "state" .= candidateHistoryTotalState
      , "two_year_period" .= candidateHistoryTotalTwoYearPeriod
      ]


-- | Construct a value of type 'CandidateHistoryTotal' (by applying it's required fields, if any)
mkCandidateHistoryTotal
  :: Text -- ^ 'candidateHistoryTotalCandidateId':  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  -> Int -- ^ 'candidateHistoryTotalCycle'
  -> Bool -- ^ 'candidateHistoryTotalIsElection'
  -> Int -- ^ 'candidateHistoryTotalTwoYearPeriod':  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag.
  -> CandidateHistoryTotal
mkCandidateHistoryTotal candidateHistoryTotalCandidateId candidateHistoryTotalCycle candidateHistoryTotalIsElection candidateHistoryTotalTwoYearPeriod =
  CandidateHistoryTotal
  { candidateHistoryTotalActiveThrough = Nothing
  , candidateHistoryTotalAddressCity = Nothing
  , candidateHistoryTotalAddressState = Nothing
  , candidateHistoryTotalAddressStreet1 = Nothing
  , candidateHistoryTotalAddressStreet2 = Nothing
  , candidateHistoryTotalAddressZip = Nothing
  , candidateHistoryTotalCandidateElectionYear = Nothing
  , candidateHistoryTotalCandidateId
  , candidateHistoryTotalCandidateInactive = Nothing
  , candidateHistoryTotalCandidateStatus = Nothing
  , candidateHistoryTotalCashOnHandEndPeriod = Nothing
  , candidateHistoryTotalCoverageEndDate = Nothing
  , candidateHistoryTotalCoverageStartDate = Nothing
  , candidateHistoryTotalCycle
  , candidateHistoryTotalCycles = Nothing
  , candidateHistoryTotalDebtsOwedByCommittee = Nothing
  , candidateHistoryTotalDisbursements = Nothing
  , candidateHistoryTotalDistrict = Nothing
  , candidateHistoryTotalDistrictNumber = Nothing
  , candidateHistoryTotalElectionDistricts = Nothing
  , candidateHistoryTotalElectionYear = Nothing
  , candidateHistoryTotalElectionYears = Nothing
  , candidateHistoryTotalFederalFundsFlag = Nothing
  , candidateHistoryTotalFirstFileDate = Nothing
  , candidateHistoryTotalFlags = Nothing
  , candidateHistoryTotalHasRaisedFunds = Nothing
  , candidateHistoryTotalIncumbentChallenge = Nothing
  , candidateHistoryTotalIncumbentChallengeFull = Nothing
  , candidateHistoryTotalIsElection
  , candidateHistoryTotalLastF2Date = Nothing
  , candidateHistoryTotalLastFileDate = Nothing
  , candidateHistoryTotalLoadDate = Nothing
  , candidateHistoryTotalName = Nothing
  , candidateHistoryTotalOffice = Nothing
  , candidateHistoryTotalOfficeFull = Nothing
  , candidateHistoryTotalParty = Nothing
  , candidateHistoryTotalPartyFull = Nothing
  , candidateHistoryTotalReceipts = Nothing
  , candidateHistoryTotalState = Nothing
  , candidateHistoryTotalTwoYearPeriod
  }

-- ** CandidateHistoryTotalPage
-- | CandidateHistoryTotalPage
data CandidateHistoryTotalPage = CandidateHistoryTotalPage
  { candidateHistoryTotalPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateHistoryTotalPageResults    :: !(Maybe [CandidateHistoryTotal]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateHistoryTotalPage
instance A.FromJSON CandidateHistoryTotalPage where
  parseJSON = A.withObject "CandidateHistoryTotalPage" $ \o ->
    CandidateHistoryTotalPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateHistoryTotalPage
instance A.ToJSON CandidateHistoryTotalPage where
  toJSON CandidateHistoryTotalPage {..} =
   _omitNulls
      [ "pagination" .= candidateHistoryTotalPagePagination
      , "results" .= candidateHistoryTotalPageResults
      ]


-- | Construct a value of type 'CandidateHistoryTotalPage' (by applying it's required fields, if any)
mkCandidateHistoryTotalPage
  :: CandidateHistoryTotalPage
mkCandidateHistoryTotalPage =
  CandidateHistoryTotalPage
  { candidateHistoryTotalPagePagination = Nothing
  , candidateHistoryTotalPageResults = Nothing
  }

-- ** CandidatePage
-- | CandidatePage
data CandidatePage = CandidatePage
  { candidatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidatePageResults    :: !(Maybe [Candidate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidatePage
instance A.FromJSON CandidatePage where
  parseJSON = A.withObject "CandidatePage" $ \o ->
    CandidatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidatePage
instance A.ToJSON CandidatePage where
  toJSON CandidatePage {..} =
   _omitNulls
      [ "pagination" .= candidatePagePagination
      , "results" .= candidatePageResults
      ]


-- | Construct a value of type 'CandidatePage' (by applying it's required fields, if any)
mkCandidatePage
  :: CandidatePage
mkCandidatePage =
  CandidatePage
  { candidatePagePagination = Nothing
  , candidatePageResults = Nothing
  }

-- ** CandidateSearch
-- | CandidateSearch
data CandidateSearch = CandidateSearch
  { candidateSearchId           :: !(Maybe Text) -- ^ "id"
  , candidateSearchName         :: !(Maybe Text) -- ^ "name"
  , candidateSearchOfficeSought :: !(Maybe Text) -- ^ "office_sought"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateSearch
instance A.FromJSON CandidateSearch where
  parseJSON = A.withObject "CandidateSearch" $ \o ->
    CandidateSearch
      <$> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "office_sought")

-- | ToJSON CandidateSearch
instance A.ToJSON CandidateSearch where
  toJSON CandidateSearch {..} =
   _omitNulls
      [ "id" .= candidateSearchId
      , "name" .= candidateSearchName
      , "office_sought" .= candidateSearchOfficeSought
      ]


-- | Construct a value of type 'CandidateSearch' (by applying it's required fields, if any)
mkCandidateSearch
  :: CandidateSearch
mkCandidateSearch =
  CandidateSearch
  { candidateSearchId = Nothing
  , candidateSearchName = Nothing
  , candidateSearchOfficeSought = Nothing
  }

-- ** CandidateSearchList
-- | CandidateSearchList
data CandidateSearchList = CandidateSearchList
  { candidateSearchListResults :: !(Maybe [CandidateSearch]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateSearchList
instance A.FromJSON CandidateSearchList where
  parseJSON = A.withObject "CandidateSearchList" $ \o ->
    CandidateSearchList
      <$> (o .:? "results")

-- | ToJSON CandidateSearchList
instance A.ToJSON CandidateSearchList where
  toJSON CandidateSearchList {..} =
   _omitNulls
      [ "results" .= candidateSearchListResults
      ]


-- | Construct a value of type 'CandidateSearchList' (by applying it's required fields, if any)
mkCandidateSearchList
  :: CandidateSearchList
mkCandidateSearchList =
  CandidateSearchList
  { candidateSearchListResults = Nothing
  }

-- ** CandidateTotal
-- | CandidateTotal
data CandidateTotal = CandidateTotal
  { candidateTotalCandidateId          :: !(Text) -- ^ /Required/ "candidate_id"
  , candidateTotalCashOnHandEndPeriod  :: !(Maybe Double) -- ^ "cash_on_hand_end_period"
  , candidateTotalCoverageEndDate      :: !(Maybe Date) -- ^ "coverage_end_date" - Ending date of the reporting period
  , candidateTotalCoverageStartDate    :: !(Maybe Date) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , candidateTotalCycle                :: !(Int) -- ^ /Required/ "cycle"
  , candidateTotalDebtsOwedByCommittee :: !(Maybe Double) -- ^ "debts_owed_by_committee"
  , candidateTotalDisbursements        :: !(Maybe Double) -- ^ "disbursements"
  , candidateTotalElectionYear         :: !(Maybe Int) -- ^ "election_year"
  , candidateTotalFederalFundsFlag     :: !(Maybe Bool) -- ^ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
  , candidateTotalHasRaisedFunds       :: !(Maybe Bool) -- ^ "has_raised_funds" - A boolean that describes if a candidate&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
  , candidateTotalIsElection           :: !(Bool) -- ^ /Required/ "is_election"
  , candidateTotalReceipts             :: !(Maybe Double) -- ^ "receipts"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateTotal
instance A.FromJSON CandidateTotal where
  parseJSON = A.withObject "CandidateTotal" $ \o ->
    CandidateTotal
      <$> (o .:  "candidate_id")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "disbursements")
      <*> (o .:? "election_year")
      <*> (o .:? "federal_funds_flag")
      <*> (o .:? "has_raised_funds")
      <*> (o .:  "is_election")
      <*> (o .:? "receipts")

-- | ToJSON CandidateTotal
instance A.ToJSON CandidateTotal where
  toJSON CandidateTotal {..} =
   _omitNulls
      [ "candidate_id" .= candidateTotalCandidateId
      , "cash_on_hand_end_period" .= candidateTotalCashOnHandEndPeriod
      , "coverage_end_date" .= candidateTotalCoverageEndDate
      , "coverage_start_date" .= candidateTotalCoverageStartDate
      , "cycle" .= candidateTotalCycle
      , "debts_owed_by_committee" .= candidateTotalDebtsOwedByCommittee
      , "disbursements" .= candidateTotalDisbursements
      , "election_year" .= candidateTotalElectionYear
      , "federal_funds_flag" .= candidateTotalFederalFundsFlag
      , "has_raised_funds" .= candidateTotalHasRaisedFunds
      , "is_election" .= candidateTotalIsElection
      , "receipts" .= candidateTotalReceipts
      ]


-- | Construct a value of type 'CandidateTotal' (by applying it's required fields, if any)
mkCandidateTotal
  :: Text -- ^ 'candidateTotalCandidateId'
  -> Int -- ^ 'candidateTotalCycle'
  -> Bool -- ^ 'candidateTotalIsElection'
  -> CandidateTotal
mkCandidateTotal candidateTotalCandidateId candidateTotalCycle candidateTotalIsElection =
  CandidateTotal
  { candidateTotalCandidateId
  , candidateTotalCashOnHandEndPeriod = Nothing
  , candidateTotalCoverageEndDate = Nothing
  , candidateTotalCoverageStartDate = Nothing
  , candidateTotalCycle
  , candidateTotalDebtsOwedByCommittee = Nothing
  , candidateTotalDisbursements = Nothing
  , candidateTotalElectionYear = Nothing
  , candidateTotalFederalFundsFlag = Nothing
  , candidateTotalHasRaisedFunds = Nothing
  , candidateTotalIsElection
  , candidateTotalReceipts = Nothing
  }

-- ** CandidateTotalPage
-- | CandidateTotalPage
data CandidateTotalPage = CandidateTotalPage
  { candidateTotalPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , candidateTotalPageResults    :: !(Maybe [CandidateTotal]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CandidateTotalPage
instance A.FromJSON CandidateTotalPage where
  parseJSON = A.withObject "CandidateTotalPage" $ \o ->
    CandidateTotalPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CandidateTotalPage
instance A.ToJSON CandidateTotalPage where
  toJSON CandidateTotalPage {..} =
   _omitNulls
      [ "pagination" .= candidateTotalPagePagination
      , "results" .= candidateTotalPageResults
      ]


-- | Construct a value of type 'CandidateTotalPage' (by applying it's required fields, if any)
mkCandidateTotalPage
  :: CandidateTotalPage
mkCandidateTotalPage =
  CandidateTotalPage
  { candidateTotalPagePagination = Nothing
  , candidateTotalPageResults = Nothing
  }

-- ** Committee
-- | Committee
data Committee = Committee
  { committeeCandidateIds         :: !(Maybe [Text]) -- ^ "candidate_ids" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , committeeCommitteeId          :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeCommitteeType        :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeCommitteeTypeFull    :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeCycles               :: !(Maybe [Int]) -- ^ "cycles" -  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  , committeeDesignation          :: !(Maybe Text) -- ^ "designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeDesignationFull      :: !(Maybe Text) -- ^ "designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeFilingFrequency      :: !(Maybe Text) -- ^ "filing_frequency" - The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived
  , committeeFirstFileDate        :: !(Maybe Date) -- ^ "first_file_date" - The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
  , committeeLastF1Date           :: !(Maybe Date) -- ^ "last_f1_date" - The day the FEC received the committee&#39;s most recent Form 1
  , committeeLastFileDate         :: !(Maybe Date) -- ^ "last_file_date" - The day the FEC received the committee&#39;s most recent filing
  , committeeName                 :: !(Maybe Text) -- ^ "name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeOrganizationType     :: !(Maybe Text) -- ^ "organization_type" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , committeeOrganizationTypeFull :: !(Maybe Text) -- ^ "organization_type_full" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , committeeParty                :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , committeePartyFull            :: !(Maybe Text) -- ^ "party_full" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , committeeState                :: !(Maybe Text) -- ^ "state" - State of the committee&#39;s address as filed on the Form 1
  , committeeTreasurerName        :: !(Maybe Text) -- ^ "treasurer_name" - Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON Committee
instance A.FromJSON Committee where
  parseJSON = A.withObject "Committee" $ \o ->
    Committee
      <$> (o .:? "candidate_ids")
      <*> (o .:  "committee_id")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "cycles")
      <*> (o .:? "designation")
      <*> (o .:? "designation_full")
      <*> (o .:? "filing_frequency")
      <*> (o .:? "first_file_date")
      <*> (o .:? "last_f1_date")
      <*> (o .:? "last_file_date")
      <*> (o .:? "name")
      <*> (o .:? "organization_type")
      <*> (o .:? "organization_type_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "state")
      <*> (o .:? "treasurer_name")

-- | ToJSON Committee
instance A.ToJSON Committee where
  toJSON Committee {..} =
   _omitNulls
      [ "candidate_ids" .= committeeCandidateIds
      , "committee_id" .= committeeCommitteeId
      , "committee_type" .= committeeCommitteeType
      , "committee_type_full" .= committeeCommitteeTypeFull
      , "cycles" .= committeeCycles
      , "designation" .= committeeDesignation
      , "designation_full" .= committeeDesignationFull
      , "filing_frequency" .= committeeFilingFrequency
      , "first_file_date" .= committeeFirstFileDate
      , "last_f1_date" .= committeeLastF1Date
      , "last_file_date" .= committeeLastFileDate
      , "name" .= committeeName
      , "organization_type" .= committeeOrganizationType
      , "organization_type_full" .= committeeOrganizationTypeFull
      , "party" .= committeeParty
      , "party_full" .= committeePartyFull
      , "state" .= committeeState
      , "treasurer_name" .= committeeTreasurerName
      ]


-- | Construct a value of type 'Committee' (by applying it's required fields, if any)
mkCommittee
  :: Text -- ^ 'committeeCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Committee
mkCommittee committeeCommitteeId =
  Committee
  { committeeCandidateIds = Nothing
  , committeeCommitteeId
  , committeeCommitteeType = Nothing
  , committeeCommitteeTypeFull = Nothing
  , committeeCycles = Nothing
  , committeeDesignation = Nothing
  , committeeDesignationFull = Nothing
  , committeeFilingFrequency = Nothing
  , committeeFirstFileDate = Nothing
  , committeeLastF1Date = Nothing
  , committeeLastFileDate = Nothing
  , committeeName = Nothing
  , committeeOrganizationType = Nothing
  , committeeOrganizationTypeFull = Nothing
  , committeeParty = Nothing
  , committeePartyFull = Nothing
  , committeeState = Nothing
  , committeeTreasurerName = Nothing
  }

-- ** CommitteeDetail
-- | CommitteeDetail
data CommitteeDetail = CommitteeDetail
  { committeeDetailCandidateIds          :: !(Maybe [Text]) -- ^ "candidate_ids" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , committeeDetailCity                  :: !(Maybe Text) -- ^ "city" - City of committee as reported on the Form 1
  , committeeDetailCommitteeId           :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeDetailCommitteeType         :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeDetailCommitteeTypeFull     :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeDetailCustodianCity         :: !(Maybe Text) -- ^ "custodian_city" - City of committee custodian as reported on the Form 1
  , committeeDetailCustodianName1        :: !(Maybe Text) -- ^ "custodian_name_1"
  , committeeDetailCustodianName2        :: !(Maybe Text) -- ^ "custodian_name_2"
  , committeeDetailCustodianNameFull     :: !(Maybe Text) -- ^ "custodian_name_full" - Name of custodian
  , committeeDetailCustodianNameMiddle   :: !(Maybe Text) -- ^ "custodian_name_middle"
  , committeeDetailCustodianNamePrefix   :: !(Maybe Text) -- ^ "custodian_name_prefix"
  , committeeDetailCustodianNameSuffix   :: !(Maybe Text) -- ^ "custodian_name_suffix"
  , committeeDetailCustodianNameTitle    :: !(Maybe Text) -- ^ "custodian_name_title"
  , committeeDetailCustodianPhone        :: !(Maybe Text) -- ^ "custodian_phone" - Phone number of the committee custodian as reported on the Form 1
  , committeeDetailCustodianState        :: !(Maybe Text) -- ^ "custodian_state" - State of the committee custodian as reported on the Form 1
  , committeeDetailCustodianStreet1      :: !(Maybe Text) -- ^ "custodian_street_1" - Street address of the committee custodian as reported on the Form 1
  , committeeDetailCustodianStreet2      :: !(Maybe Text) -- ^ "custodian_street_2" - Second line of the street address of the committee custodian as reported on the Form 1
  , committeeDetailCustodianZip          :: !(Maybe Text) -- ^ "custodian_zip" - Zip code of the committee custodian as reported on the Form 1
  , committeeDetailCycles                :: !(Maybe [Int]) -- ^ "cycles" -  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  , committeeDetailDesignation           :: !(Maybe Text) -- ^ "designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeDetailDesignationFull       :: !(Maybe Text) -- ^ "designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeDetailEmail                 :: !(Maybe Text) -- ^ "email" - Email as reported on the Form 1
  , committeeDetailFax                   :: !(Maybe Text) -- ^ "fax" - Fax as reported on the Form 1
  , committeeDetailFilingFrequency       :: !(Maybe Text) -- ^ "filing_frequency" - The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived
  , committeeDetailFirstFileDate         :: !(Maybe Date) -- ^ "first_file_date" - The day the FEC received the committee&#39;s first filing. This is usually a Form 1 committee registration.
  , committeeDetailFormType              :: !(Maybe Text) -- ^ "form_type" - Form where the information was reported
  , committeeDetailLastFileDate          :: !(Maybe Date) -- ^ "last_file_date" - The day the FEC received the committee&#39;s most recent filing
  , committeeDetailLeadershipPac         :: !(Maybe Text) -- ^ "leadership_pac" - Indicates if the committee is a leadership PAC
  , committeeDetailLobbyistRegistrantPac :: !(Maybe Text) -- ^ "lobbyist_registrant_pac" - Indicates if the committee is a lobbyist registrant PAC
  , committeeDetailName                  :: !(Maybe Text) -- ^ "name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeDetailOrganizationType      :: !(Maybe Text) -- ^ "organization_type" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , committeeDetailOrganizationTypeFull  :: !(Maybe Text) -- ^ "organization_type_full" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , committeeDetailParty                 :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , committeeDetailPartyFull             :: !(Maybe Text) -- ^ "party_full" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , committeeDetailPartyType             :: !(Maybe Text) -- ^ "party_type" - Code for the type of party the committee is, only if applicable
  , committeeDetailPartyTypeFull         :: !(Maybe Text) -- ^ "party_type_full" - Description of the type of party the committee is, only if applicable
  , committeeDetailQualifyingDate        :: !(Maybe Date) -- ^ "qualifying_date" - Date the committee became a qualified committee.
  , committeeDetailState                 :: !(Maybe Text) -- ^ "state" - State of the committee&#39;s address as filed on the Form 1
  , committeeDetailStateFull             :: !(Maybe Text) -- ^ "state_full" - State of committee as reported on the Form 1
  , committeeDetailStreet1               :: !(Maybe Text) -- ^ "street_1" - Street address of committee as reported on the Form 1
  , committeeDetailStreet2               :: !(Maybe Text) -- ^ "street_2" - Second line of street address of committee as reported on the Form 1
  , committeeDetailTreasurerCity         :: !(Maybe Text) -- ^ "treasurer_city" - City of committee treasurer as reported on the Form 1
  , committeeDetailTreasurerName         :: !(Maybe Text) -- ^ "treasurer_name" - Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
  , committeeDetailTreasurerName1        :: !(Maybe Text) -- ^ "treasurer_name_1"
  , committeeDetailTreasurerName2        :: !(Maybe Text) -- ^ "treasurer_name_2"
  , committeeDetailTreasurerNameMiddle   :: !(Maybe Text) -- ^ "treasurer_name_middle"
  , committeeDetailTreasurerNamePrefix   :: !(Maybe Text) -- ^ "treasurer_name_prefix"
  , committeeDetailTreasurerNameSuffix   :: !(Maybe Text) -- ^ "treasurer_name_suffix"
  , committeeDetailTreasurerNameTitle    :: !(Maybe Text) -- ^ "treasurer_name_title"
  , committeeDetailTreasurerPhone        :: !(Maybe Text) -- ^ "treasurer_phone" - Phone number of the committee treasurer as reported on the Form 1
  , committeeDetailTreasurerState        :: !(Maybe Text) -- ^ "treasurer_state" - State of the committee treasurer as reported on the Form 1
  , committeeDetailTreasurerStreet1      :: !(Maybe Text) -- ^ "treasurer_street_1" - Street of the committee treasurer as reported on the Form 1
  , committeeDetailTreasurerStreet2      :: !(Maybe Text) -- ^ "treasurer_street_2" - Second line of the street address of the committee treasurer as reported on the Form 1
  , committeeDetailTreasurerZip          :: !(Maybe Text) -- ^ "treasurer_zip" - Zip code of the committee treasurer as reported on the Form 1
  , committeeDetailWebsite               :: !(Maybe Text) -- ^ "website" - Website url as reported on the Form 1
  , committeeDetailZip                   :: !(Maybe Text) -- ^ "zip" - Zip code of committee as reported on the Form 1
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeDetail
instance A.FromJSON CommitteeDetail where
  parseJSON = A.withObject "CommitteeDetail" $ \o ->
    CommitteeDetail
      <$> (o .:? "candidate_ids")
      <*> (o .:? "city")
      <*> (o .:  "committee_id")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "custodian_city")
      <*> (o .:? "custodian_name_1")
      <*> (o .:? "custodian_name_2")
      <*> (o .:? "custodian_name_full")
      <*> (o .:? "custodian_name_middle")
      <*> (o .:? "custodian_name_prefix")
      <*> (o .:? "custodian_name_suffix")
      <*> (o .:? "custodian_name_title")
      <*> (o .:? "custodian_phone")
      <*> (o .:? "custodian_state")
      <*> (o .:? "custodian_street_1")
      <*> (o .:? "custodian_street_2")
      <*> (o .:? "custodian_zip")
      <*> (o .:? "cycles")
      <*> (o .:? "designation")
      <*> (o .:? "designation_full")
      <*> (o .:? "email")
      <*> (o .:? "fax")
      <*> (o .:? "filing_frequency")
      <*> (o .:? "first_file_date")
      <*> (o .:? "form_type")
      <*> (o .:? "last_file_date")
      <*> (o .:? "leadership_pac")
      <*> (o .:? "lobbyist_registrant_pac")
      <*> (o .:? "name")
      <*> (o .:? "organization_type")
      <*> (o .:? "organization_type_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "party_type")
      <*> (o .:? "party_type_full")
      <*> (o .:? "qualifying_date")
      <*> (o .:? "state")
      <*> (o .:? "state_full")
      <*> (o .:? "street_1")
      <*> (o .:? "street_2")
      <*> (o .:? "treasurer_city")
      <*> (o .:? "treasurer_name")
      <*> (o .:? "treasurer_name_1")
      <*> (o .:? "treasurer_name_2")
      <*> (o .:? "treasurer_name_middle")
      <*> (o .:? "treasurer_name_prefix")
      <*> (o .:? "treasurer_name_suffix")
      <*> (o .:? "treasurer_name_title")
      <*> (o .:? "treasurer_phone")
      <*> (o .:? "treasurer_state")
      <*> (o .:? "treasurer_street_1")
      <*> (o .:? "treasurer_street_2")
      <*> (o .:? "treasurer_zip")
      <*> (o .:? "website")
      <*> (o .:? "zip")

-- | ToJSON CommitteeDetail
instance A.ToJSON CommitteeDetail where
  toJSON CommitteeDetail {..} =
   _omitNulls
      [ "candidate_ids" .= committeeDetailCandidateIds
      , "city" .= committeeDetailCity
      , "committee_id" .= committeeDetailCommitteeId
      , "committee_type" .= committeeDetailCommitteeType
      , "committee_type_full" .= committeeDetailCommitteeTypeFull
      , "custodian_city" .= committeeDetailCustodianCity
      , "custodian_name_1" .= committeeDetailCustodianName1
      , "custodian_name_2" .= committeeDetailCustodianName2
      , "custodian_name_full" .= committeeDetailCustodianNameFull
      , "custodian_name_middle" .= committeeDetailCustodianNameMiddle
      , "custodian_name_prefix" .= committeeDetailCustodianNamePrefix
      , "custodian_name_suffix" .= committeeDetailCustodianNameSuffix
      , "custodian_name_title" .= committeeDetailCustodianNameTitle
      , "custodian_phone" .= committeeDetailCustodianPhone
      , "custodian_state" .= committeeDetailCustodianState
      , "custodian_street_1" .= committeeDetailCustodianStreet1
      , "custodian_street_2" .= committeeDetailCustodianStreet2
      , "custodian_zip" .= committeeDetailCustodianZip
      , "cycles" .= committeeDetailCycles
      , "designation" .= committeeDetailDesignation
      , "designation_full" .= committeeDetailDesignationFull
      , "email" .= committeeDetailEmail
      , "fax" .= committeeDetailFax
      , "filing_frequency" .= committeeDetailFilingFrequency
      , "first_file_date" .= committeeDetailFirstFileDate
      , "form_type" .= committeeDetailFormType
      , "last_file_date" .= committeeDetailLastFileDate
      , "leadership_pac" .= committeeDetailLeadershipPac
      , "lobbyist_registrant_pac" .= committeeDetailLobbyistRegistrantPac
      , "name" .= committeeDetailName
      , "organization_type" .= committeeDetailOrganizationType
      , "organization_type_full" .= committeeDetailOrganizationTypeFull
      , "party" .= committeeDetailParty
      , "party_full" .= committeeDetailPartyFull
      , "party_type" .= committeeDetailPartyType
      , "party_type_full" .= committeeDetailPartyTypeFull
      , "qualifying_date" .= committeeDetailQualifyingDate
      , "state" .= committeeDetailState
      , "state_full" .= committeeDetailStateFull
      , "street_1" .= committeeDetailStreet1
      , "street_2" .= committeeDetailStreet2
      , "treasurer_city" .= committeeDetailTreasurerCity
      , "treasurer_name" .= committeeDetailTreasurerName
      , "treasurer_name_1" .= committeeDetailTreasurerName1
      , "treasurer_name_2" .= committeeDetailTreasurerName2
      , "treasurer_name_middle" .= committeeDetailTreasurerNameMiddle
      , "treasurer_name_prefix" .= committeeDetailTreasurerNamePrefix
      , "treasurer_name_suffix" .= committeeDetailTreasurerNameSuffix
      , "treasurer_name_title" .= committeeDetailTreasurerNameTitle
      , "treasurer_phone" .= committeeDetailTreasurerPhone
      , "treasurer_state" .= committeeDetailTreasurerState
      , "treasurer_street_1" .= committeeDetailTreasurerStreet1
      , "treasurer_street_2" .= committeeDetailTreasurerStreet2
      , "treasurer_zip" .= committeeDetailTreasurerZip
      , "website" .= committeeDetailWebsite
      , "zip" .= committeeDetailZip
      ]


-- | Construct a value of type 'CommitteeDetail' (by applying it's required fields, if any)
mkCommitteeDetail
  :: Text -- ^ 'committeeDetailCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> CommitteeDetail
mkCommitteeDetail committeeDetailCommitteeId =
  CommitteeDetail
  { committeeDetailCandidateIds = Nothing
  , committeeDetailCity = Nothing
  , committeeDetailCommitteeId
  , committeeDetailCommitteeType = Nothing
  , committeeDetailCommitteeTypeFull = Nothing
  , committeeDetailCustodianCity = Nothing
  , committeeDetailCustodianName1 = Nothing
  , committeeDetailCustodianName2 = Nothing
  , committeeDetailCustodianNameFull = Nothing
  , committeeDetailCustodianNameMiddle = Nothing
  , committeeDetailCustodianNamePrefix = Nothing
  , committeeDetailCustodianNameSuffix = Nothing
  , committeeDetailCustodianNameTitle = Nothing
  , committeeDetailCustodianPhone = Nothing
  , committeeDetailCustodianState = Nothing
  , committeeDetailCustodianStreet1 = Nothing
  , committeeDetailCustodianStreet2 = Nothing
  , committeeDetailCustodianZip = Nothing
  , committeeDetailCycles = Nothing
  , committeeDetailDesignation = Nothing
  , committeeDetailDesignationFull = Nothing
  , committeeDetailEmail = Nothing
  , committeeDetailFax = Nothing
  , committeeDetailFilingFrequency = Nothing
  , committeeDetailFirstFileDate = Nothing
  , committeeDetailFormType = Nothing
  , committeeDetailLastFileDate = Nothing
  , committeeDetailLeadershipPac = Nothing
  , committeeDetailLobbyistRegistrantPac = Nothing
  , committeeDetailName = Nothing
  , committeeDetailOrganizationType = Nothing
  , committeeDetailOrganizationTypeFull = Nothing
  , committeeDetailParty = Nothing
  , committeeDetailPartyFull = Nothing
  , committeeDetailPartyType = Nothing
  , committeeDetailPartyTypeFull = Nothing
  , committeeDetailQualifyingDate = Nothing
  , committeeDetailState = Nothing
  , committeeDetailStateFull = Nothing
  , committeeDetailStreet1 = Nothing
  , committeeDetailStreet2 = Nothing
  , committeeDetailTreasurerCity = Nothing
  , committeeDetailTreasurerName = Nothing
  , committeeDetailTreasurerName1 = Nothing
  , committeeDetailTreasurerName2 = Nothing
  , committeeDetailTreasurerNameMiddle = Nothing
  , committeeDetailTreasurerNamePrefix = Nothing
  , committeeDetailTreasurerNameSuffix = Nothing
  , committeeDetailTreasurerNameTitle = Nothing
  , committeeDetailTreasurerPhone = Nothing
  , committeeDetailTreasurerState = Nothing
  , committeeDetailTreasurerStreet1 = Nothing
  , committeeDetailTreasurerStreet2 = Nothing
  , committeeDetailTreasurerZip = Nothing
  , committeeDetailWebsite = Nothing
  , committeeDetailZip = Nothing
  }

-- ** CommitteeDetailPage
-- | CommitteeDetailPage
data CommitteeDetailPage = CommitteeDetailPage
  { committeeDetailPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeDetailPageResults    :: !(Maybe [CommitteeDetail]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeDetailPage
instance A.FromJSON CommitteeDetailPage where
  parseJSON = A.withObject "CommitteeDetailPage" $ \o ->
    CommitteeDetailPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeDetailPage
instance A.ToJSON CommitteeDetailPage where
  toJSON CommitteeDetailPage {..} =
   _omitNulls
      [ "pagination" .= committeeDetailPagePagination
      , "results" .= committeeDetailPageResults
      ]


-- | Construct a value of type 'CommitteeDetailPage' (by applying it's required fields, if any)
mkCommitteeDetailPage
  :: CommitteeDetailPage
mkCommitteeDetailPage =
  CommitteeDetailPage
  { committeeDetailPagePagination = Nothing
  , committeeDetailPageResults = Nothing
  }

-- ** CommitteeHistory
-- | CommitteeHistory
data CommitteeHistory = CommitteeHistory
  { committeeHistoryCandidateIds         :: !(Maybe [Text]) -- ^ "candidate_ids" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , committeeHistoryCity                 :: !(Maybe Text) -- ^ "city" - City of committee as reported on the Form 1
  , committeeHistoryCommitteeId          :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeHistoryCommitteeType        :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeHistoryCommitteeTypeFull    :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeHistoryCycle                :: !(Int) -- ^ /Required/ "cycle" -  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  , committeeHistoryCycles               :: !(Maybe [Int]) -- ^ "cycles" -  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  , committeeHistoryDesignation          :: !(Maybe Text) -- ^ "designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeHistoryDesignationFull      :: !(Maybe Text) -- ^ "designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeHistoryFilingFrequency      :: !(Maybe Text) -- ^ "filing_frequency" - The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived
  , committeeHistoryName                 :: !(Maybe Text) -- ^ "name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeHistoryOrganizationType     :: !(Maybe Text) -- ^ "organization_type" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , committeeHistoryOrganizationTypeFull :: !(Maybe Text) -- ^ "organization_type_full" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , committeeHistoryParty                :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , committeeHistoryPartyFull            :: !(Maybe Text) -- ^ "party_full" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , committeeHistoryState                :: !(Maybe Text) -- ^ "state" - State of the committee&#39;s address as filed on the Form 1
  , committeeHistoryStateFull            :: !(Maybe Text) -- ^ "state_full" - State of committee as reported on the Form 1
  , committeeHistoryStreet1              :: !(Maybe Text) -- ^ "street_1" - Street address of committee as reported on the Form 1
  , committeeHistoryStreet2              :: !(Maybe Text) -- ^ "street_2" - Second line of street address of committee as reported on the Form 1
  , committeeHistoryTreasurerName        :: !(Maybe Text) -- ^ "treasurer_name" - Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
  , committeeHistoryZip                  :: !(Maybe Text) -- ^ "zip" - Zip code of committee as reported on the Form 1
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeHistory
instance A.FromJSON CommitteeHistory where
  parseJSON = A.withObject "CommitteeHistory" $ \o ->
    CommitteeHistory
      <$> (o .:? "candidate_ids")
      <*> (o .:? "city")
      <*> (o .:  "committee_id")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:  "cycle")
      <*> (o .:? "cycles")
      <*> (o .:? "designation")
      <*> (o .:? "designation_full")
      <*> (o .:? "filing_frequency")
      <*> (o .:? "name")
      <*> (o .:? "organization_type")
      <*> (o .:? "organization_type_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "state")
      <*> (o .:? "state_full")
      <*> (o .:? "street_1")
      <*> (o .:? "street_2")
      <*> (o .:? "treasurer_name")
      <*> (o .:? "zip")

-- | ToJSON CommitteeHistory
instance A.ToJSON CommitteeHistory where
  toJSON CommitteeHistory {..} =
   _omitNulls
      [ "candidate_ids" .= committeeHistoryCandidateIds
      , "city" .= committeeHistoryCity
      , "committee_id" .= committeeHistoryCommitteeId
      , "committee_type" .= committeeHistoryCommitteeType
      , "committee_type_full" .= committeeHistoryCommitteeTypeFull
      , "cycle" .= committeeHistoryCycle
      , "cycles" .= committeeHistoryCycles
      , "designation" .= committeeHistoryDesignation
      , "designation_full" .= committeeHistoryDesignationFull
      , "filing_frequency" .= committeeHistoryFilingFrequency
      , "name" .= committeeHistoryName
      , "organization_type" .= committeeHistoryOrganizationType
      , "organization_type_full" .= committeeHistoryOrganizationTypeFull
      , "party" .= committeeHistoryParty
      , "party_full" .= committeeHistoryPartyFull
      , "state" .= committeeHistoryState
      , "state_full" .= committeeHistoryStateFull
      , "street_1" .= committeeHistoryStreet1
      , "street_2" .= committeeHistoryStreet2
      , "treasurer_name" .= committeeHistoryTreasurerName
      , "zip" .= committeeHistoryZip
      ]


-- | Construct a value of type 'CommitteeHistory' (by applying it's required fields, if any)
mkCommitteeHistory
  :: Text -- ^ 'committeeHistoryCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'committeeHistoryCycle':  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  -> CommitteeHistory
mkCommitteeHistory committeeHistoryCommitteeId committeeHistoryCycle =
  CommitteeHistory
  { committeeHistoryCandidateIds = Nothing
  , committeeHistoryCity = Nothing
  , committeeHistoryCommitteeId
  , committeeHistoryCommitteeType = Nothing
  , committeeHistoryCommitteeTypeFull = Nothing
  , committeeHistoryCycle
  , committeeHistoryCycles = Nothing
  , committeeHistoryDesignation = Nothing
  , committeeHistoryDesignationFull = Nothing
  , committeeHistoryFilingFrequency = Nothing
  , committeeHistoryName = Nothing
  , committeeHistoryOrganizationType = Nothing
  , committeeHistoryOrganizationTypeFull = Nothing
  , committeeHistoryParty = Nothing
  , committeeHistoryPartyFull = Nothing
  , committeeHistoryState = Nothing
  , committeeHistoryStateFull = Nothing
  , committeeHistoryStreet1 = Nothing
  , committeeHistoryStreet2 = Nothing
  , committeeHistoryTreasurerName = Nothing
  , committeeHistoryZip = Nothing
  }

-- ** CommitteeHistoryPage
-- | CommitteeHistoryPage
data CommitteeHistoryPage = CommitteeHistoryPage
  { committeeHistoryPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeHistoryPageResults    :: !(Maybe [CommitteeHistory]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeHistoryPage
instance A.FromJSON CommitteeHistoryPage where
  parseJSON = A.withObject "CommitteeHistoryPage" $ \o ->
    CommitteeHistoryPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeHistoryPage
instance A.ToJSON CommitteeHistoryPage where
  toJSON CommitteeHistoryPage {..} =
   _omitNulls
      [ "pagination" .= committeeHistoryPagePagination
      , "results" .= committeeHistoryPageResults
      ]


-- | Construct a value of type 'CommitteeHistoryPage' (by applying it's required fields, if any)
mkCommitteeHistoryPage
  :: CommitteeHistoryPage
mkCommitteeHistoryPage =
  CommitteeHistoryPage
  { committeeHistoryPagePagination = Nothing
  , committeeHistoryPageResults = Nothing
  }

-- ** CommitteePage
-- | CommitteePage
data CommitteePage = CommitteePage
  { committeePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeePageResults    :: !(Maybe [Committee]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteePage
instance A.FromJSON CommitteePage where
  parseJSON = A.withObject "CommitteePage" $ \o ->
    CommitteePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteePage
instance A.ToJSON CommitteePage where
  toJSON CommitteePage {..} =
   _omitNulls
      [ "pagination" .= committeePagePagination
      , "results" .= committeePageResults
      ]


-- | Construct a value of type 'CommitteePage' (by applying it's required fields, if any)
mkCommitteePage
  :: CommitteePage
mkCommitteePage =
  CommitteePage
  { committeePagePagination = Nothing
  , committeePageResults = Nothing
  }

-- ** CommitteeReports
-- | CommitteeReports
data CommitteeReports = CommitteeReports
  { committeeReportsAggregateAmountPersonalContributionsGeneral :: !(Maybe Double) -- ^ "aggregate_amount_personal_contributions_general"
  , committeeReportsAggregateContributionsPersonalFundsPrimary :: !(Maybe Double) -- ^ "aggregate_contributions_personal_funds_primary"
  , committeeReportsAllLoansReceivedPeriod :: !(Maybe Double) -- ^ "all_loans_received_period"
  , committeeReportsAllLoansReceivedYtd :: !(Maybe Double) -- ^ "all_loans_received_ytd"
  , committeeReportsAllOtherLoansPeriod :: !(Maybe Double) -- ^ "all_other_loans_period"
  , committeeReportsAllOtherLoansYtd :: !(Maybe Double) -- ^ "all_other_loans_ytd"
  , committeeReportsAllocatedFederalElectionLevinSharePeriod :: !(Maybe Double) -- ^ "allocated_federal_election_levin_share_period"
  , committeeReportsAmendmentChain :: !(Maybe [Double]) -- ^ "amendment_chain" -  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed.
  , committeeReportsAmendmentIndicator :: !(Maybe Text) -- ^ "amendment_indicator"
  , committeeReportsAmendmentIndicatorFull :: !(Maybe Text) -- ^ "amendment_indicator_full"
  , committeeReportsBeginningImageNumber :: !(Maybe Text) -- ^ "beginning_image_number"
  , committeeReportsCalendarYtd :: !(Maybe Int) -- ^ "calendar_ytd"
  , committeeReportsCandidateContributionPeriod :: !(Maybe Double) -- ^ "candidate_contribution_period"
  , committeeReportsCandidateContributionYtd :: !(Maybe Double) -- ^ "candidate_contribution_ytd"
  , committeeReportsCashOnHandBeginningCalendarYtd :: !(Maybe Double) -- ^ "cash_on_hand_beginning_calendar_ytd"
  , committeeReportsCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period" - Balance for the committee at the start of the two-year period
  , committeeReportsCashOnHandCloseYtd :: !(Maybe Double) -- ^ "cash_on_hand_close_ytd"
  , committeeReportsCashOnHandEndPeriod :: !(Maybe Double) -- ^ "cash_on_hand_end_period" - Ending cash balance on the most recent filing
  , committeeReportsCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeReportsCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , committeeReportsCommitteeType :: !(Maybe Text) -- ^ "committee_type"
  , committeeReportsCoordinatedExpendituresByPartyCommitteePeriod :: !(Maybe Double) -- ^ "coordinated_expenditures_by_party_committee_period"
  , committeeReportsCoordinatedExpendituresByPartyCommitteeYtd :: !(Maybe Double) -- ^ "coordinated_expenditures_by_party_committee_ytd"
  , committeeReportsCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date" - Ending date of the reporting period
  , committeeReportsCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , committeeReportsCsvUrl :: !(Maybe Text) -- ^ "csv_url"
  , committeeReportsCycle :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeReportsDebtsOwedByCommittee :: !(Maybe Double) -- ^ "debts_owed_by_committee" - Debts owed by the committee
  , committeeReportsDebtsOwedToCommittee :: !(Maybe Double) -- ^ "debts_owed_to_committee" - Debts owed to the committee
  , committeeReportsDocumentDescription :: !(Maybe Text) -- ^ "document_description"
  , committeeReportsEndImageNumber :: !(Maybe Text) -- ^ "end_image_number"
  , committeeReportsExemptLegalAccountingDisbursementPeriod :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement_period"
  , committeeReportsExemptLegalAccountingDisbursementYtd :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement_ytd"
  , committeeReportsExpenditureSubjectToLimits :: !(Maybe Double) -- ^ "expenditure_subject_to_limits"
  , committeeReportsFecFileId :: !(Maybe Text) -- ^ "fec_file_id"
  , committeeReportsFecUrl :: !(Maybe Text) -- ^ "fec_url"
  , committeeReportsFedCandidateCommitteeContributionRefundsYtd :: !(Maybe Double) -- ^ "fed_candidate_committee_contribution_refunds_ytd"
  , committeeReportsFedCandidateCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "fed_candidate_committee_contributions_period"
  , committeeReportsFedCandidateCommitteeContributionsYtd :: !(Maybe Double) -- ^ "fed_candidate_committee_contributions_ytd"
  , committeeReportsFedCandidateContributionRefundsPeriod :: !(Maybe Double) -- ^ "fed_candidate_contribution_refunds_period"
  , committeeReportsFederalFundsPeriod :: !(Maybe Double) -- ^ "federal_funds_period"
  , committeeReportsFederalFundsYtd :: !(Maybe Double) -- ^ "federal_funds_ytd"
  , committeeReportsFileNumber :: !(Maybe Int) -- ^ "file_number"
  , committeeReportsFundraisingDisbursementsPeriod :: !(Maybe Double) -- ^ "fundraising_disbursements_period"
  , committeeReportsFundraisingDisbursementsYtd :: !(Maybe Double) -- ^ "fundraising_disbursements_ytd"
  , committeeReportsGrossReceiptAuthorizedCommitteeGeneral :: !(Maybe Double) -- ^ "gross_receipt_authorized_committee_general"
  , committeeReportsGrossReceiptAuthorizedCommitteePrimary :: !(Maybe Double) -- ^ "gross_receipt_authorized_committee_primary"
  , committeeReportsGrossReceiptMinusPersonalContributionGeneral :: !(Maybe Double) -- ^ "gross_receipt_minus_personal_contribution_general"
  , committeeReportsGrossReceiptMinusPersonalContributionsPrimary :: !(Maybe Double) -- ^ "gross_receipt_minus_personal_contributions_primary"
  , committeeReportsHtmlUrl :: !(Maybe Text) -- ^ "html_url" - HTML link to the filing.
  , committeeReportsIndependentContributionsPeriod :: !(Maybe Double) -- ^ "independent_contributions_period"
  , committeeReportsIndependentExpendituresPeriod :: !(Maybe Double) -- ^ "independent_expenditures_period"
  , committeeReportsIndependentExpendituresYtd :: !(Maybe Double) -- ^ "independent_expenditures_ytd"
  , committeeReportsIndividualItemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_itemized_contributions_period" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
  , committeeReportsIndividualItemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_itemized_contributions_ytd" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
  , committeeReportsIndividualUnitemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_unitemized_contributions_period" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
  , committeeReportsIndividualUnitemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_unitemized_contributions_ytd" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
  , committeeReportsIsAmended :: !(Maybe Bool) -- ^ "is_amended" - False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
  , committeeReportsItemsOnHandLiquidated :: !(Maybe Double) -- ^ "items_on_hand_liquidated"
  , committeeReportsLoanRepaymentsCandidateLoansPeriod :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans_period"
  , committeeReportsLoanRepaymentsCandidateLoansYtd :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans_ytd"
  , committeeReportsLoanRepaymentsMadePeriod :: !(Maybe Double) -- ^ "loan_repayments_made_period"
  , committeeReportsLoanRepaymentsMadeYtd :: !(Maybe Double) -- ^ "loan_repayments_made_ytd"
  , committeeReportsLoanRepaymentsOtherLoansPeriod :: !(Maybe Double) -- ^ "loan_repayments_other_loans_period"
  , committeeReportsLoanRepaymentsOtherLoansYtd :: !(Maybe Double) -- ^ "loan_repayments_other_loans_ytd"
  , committeeReportsLoanRepaymentsReceivedPeriod :: !(Maybe Double) -- ^ "loan_repayments_received_period"
  , committeeReportsLoanRepaymentsReceivedYtd :: !(Maybe Double) -- ^ "loan_repayments_received_ytd"
  , committeeReportsLoansMadeByCandidatePeriod :: !(Maybe Double) -- ^ "loans_made_by_candidate_period"
  , committeeReportsLoansMadeByCandidateYtd :: !(Maybe Double) -- ^ "loans_made_by_candidate_ytd"
  , committeeReportsLoansMadePeriod :: !(Maybe Double) -- ^ "loans_made_period"
  , committeeReportsLoansMadeYtd :: !(Maybe Double) -- ^ "loans_made_ytd"
  , committeeReportsLoansReceivedFromCandidatePeriod :: !(Maybe Double) -- ^ "loans_received_from_candidate_period"
  , committeeReportsLoansReceivedFromCandidateYtd :: !(Maybe Double) -- ^ "loans_received_from_candidate_ytd"
  , committeeReportsMeansFiled :: !(Maybe Text) -- ^ "means_filed" - The method used to file with the FEC, either electronic or on paper.
  , committeeReportsMostRecent :: !(Maybe Bool) -- ^ "most_recent"
  , committeeReportsMostRecentFileNumber :: !(Maybe Double) -- ^ "most_recent_file_number"
  , committeeReportsNetContributionsCycleToDate :: !(Maybe Double) -- ^ "net_contributions_cycle_to_date"
  , committeeReportsNetContributionsPeriod :: !(Maybe Double) -- ^ "net_contributions_period"
  , committeeReportsNetContributionsYtd :: !(Maybe Double) -- ^ "net_contributions_ytd"
  , committeeReportsNetOperatingExpendituresCycleToDate :: !(Maybe Double) -- ^ "net_operating_expenditures_cycle_to_date"
  , committeeReportsNetOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "net_operating_expenditures_period"
  , committeeReportsNetOperatingExpendituresYtd :: !(Maybe Double) -- ^ "net_operating_expenditures_ytd"
  , committeeReportsNonAllocatedFedElectionActivityPeriod :: !(Maybe Double) -- ^ "non_allocated_fed_election_activity_period"
  , committeeReportsNonAllocatedFedElectionActivityYtd :: !(Maybe Double) -- ^ "non_allocated_fed_election_activity_ytd"
  , committeeReportsNonfedShareAllocatedDisbursementsPeriod :: !(Maybe Double) -- ^ "nonfed_share_allocated_disbursements_period"
  , committeeReportsOffsetsToFundraisingExpendituresPeriod :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures_period"
  , committeeReportsOffsetsToFundraisingExpendituresYtd :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures_ytd"
  , committeeReportsOffsetsToLegalAccountingPeriod :: !(Maybe Double) -- ^ "offsets_to_legal_accounting_period"
  , committeeReportsOffsetsToLegalAccountingYtd :: !(Maybe Double) -- ^ "offsets_to_legal_accounting_ytd"
  , committeeReportsOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_period" - Offsets to operating expenditures total for the reporting period
  , committeeReportsOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_ytd" - Offsets to operating expenditures total for the year to date
  , committeeReportsOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "operating_expenditures_period"
  , committeeReportsOperatingExpendituresYtd :: !(Maybe Double) -- ^ "operating_expenditures_ytd"
  , committeeReportsOtherDisbursementsPeriod :: !(Maybe Double) -- ^ "other_disbursements_period" - Other disbursements total for the reporting period
  , committeeReportsOtherDisbursementsYtd :: !(Maybe Double) -- ^ "other_disbursements_ytd" - Other disbursements total for the year to date
  , committeeReportsOtherFedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "other_fed_operating_expenditures_period"
  , committeeReportsOtherFedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "other_fed_operating_expenditures_ytd"
  , committeeReportsOtherFedReceiptsPeriod :: !(Maybe Double) -- ^ "other_fed_receipts_period"
  , committeeReportsOtherFedReceiptsYtd :: !(Maybe Double) -- ^ "other_fed_receipts_ytd"
  , committeeReportsOtherLoansReceivedPeriod :: !(Maybe Double) -- ^ "other_loans_received_period"
  , committeeReportsOtherLoansReceivedYtd :: !(Maybe Double) -- ^ "other_loans_received_ytd"
  , committeeReportsOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "other_political_committee_contributions_period" - Other committees contributions total for the reporting period
  , committeeReportsOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "other_political_committee_contributions_ytd" - Other committees contributions total for the year to date
  , committeeReportsOtherReceiptsPeriod :: !(Maybe Double) -- ^ "other_receipts_period"
  , committeeReportsOtherReceiptsYtd :: !(Maybe Double) -- ^ "other_receipts_ytd"
  , committeeReportsPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeReportsPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "political_party_committee_contributions_period" - Party committees contributions total for the reporting period
  , committeeReportsPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "political_party_committee_contributions_ytd" - Party committees contributions total for the year to date
  , committeeReportsPreviousFileNumber :: !(Maybe Double) -- ^ "previous_file_number"
  , committeeReportsReceiptDate :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , committeeReportsRefundedIndividualContributionsPeriod :: !(Maybe Double) -- ^ "refunded_individual_contributions_period" - Individual refunds total for the reporting period
  , committeeReportsRefundedIndividualContributionsYtd :: !(Maybe Double) -- ^ "refunded_individual_contributions_ytd" - Individual refunds total for the year to date
  , committeeReportsRefundedOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_period" - Other committee refunds total for the reporting period
  , committeeReportsRefundedOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_ytd" - Other committee refunds total for the year to date
  , committeeReportsRefundedPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_period" - Political party refunds total for the reporting period
  , committeeReportsRefundedPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_ytd" - Political party refunds total for the year to date
  , committeeReportsRefundsTotalContributionsColTotalYtd :: !(Maybe Double) -- ^ "refunds_total_contributions_col_total_ytd"
  , committeeReportsRepaymentsLoansMadeByCandidatePeriod :: !(Maybe Double) -- ^ "repayments_loans_made_by_candidate_period"
  , committeeReportsRepaymentsLoansMadeCandidateYtd :: !(Maybe Double) -- ^ "repayments_loans_made_candidate_ytd"
  , committeeReportsRepaymentsOtherLoansPeriod :: !(Maybe Double) -- ^ "repayments_other_loans_period"
  , committeeReportsRepaymentsOtherLoansYtd :: !(Maybe Double) -- ^ "repayments_other_loans_ytd"
  , committeeReportsReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeReportsReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsReportTypeFull :: !(Maybe Text) -- ^ "report_type_full" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , committeeReportsSharedFedActivityNonfedYtd :: !(Maybe Double) -- ^ "shared_fed_activity_nonfed_ytd"
  , committeeReportsSharedFedActivityPeriod :: !(Maybe Double) -- ^ "shared_fed_activity_period"
  , committeeReportsSharedFedActivityYtd :: !(Maybe Double) -- ^ "shared_fed_activity_ytd"
  , committeeReportsSharedFedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "shared_fed_operating_expenditures_period"
  , committeeReportsSharedFedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "shared_fed_operating_expenditures_ytd"
  , committeeReportsSharedNonfedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "shared_nonfed_operating_expenditures_period"
  , committeeReportsSharedNonfedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "shared_nonfed_operating_expenditures_ytd"
  , committeeReportsSubtotalPeriod :: !(Maybe Double) -- ^ "subtotal_period"
  , committeeReportsSubtotalSummaryPagePeriod :: !(Maybe Double) -- ^ "subtotal_summary_page_period"
  , committeeReportsSubtotalSummaryPeriod :: !(Maybe Double) -- ^ "subtotal_summary_period"
  , committeeReportsSubtotalSummaryYtd :: !(Maybe Double) -- ^ "subtotal_summary_ytd"
  , committeeReportsTotalContributionRefundsColTotalPeriod :: !(Maybe Double) -- ^ "total_contribution_refunds_col_total_period"
  , committeeReportsTotalContributionRefundsPeriod :: !(Maybe Double) -- ^ "total_contribution_refunds_period" - Total contribution refunds total for the reporting period
  , committeeReportsTotalContributionRefundsYtd :: !(Maybe Double) -- ^ "total_contribution_refunds_ytd" - Total contribution refunds total for the year to date
  , committeeReportsTotalContributionsColumnTotalPeriod :: !(Maybe Double) -- ^ "total_contributions_column_total_period"
  , committeeReportsTotalContributionsPeriod :: !(Maybe Double) -- ^ "total_contributions_period" - Contribution total for the reporting period
  , committeeReportsTotalContributionsYtd :: !(Maybe Double) -- ^ "total_contributions_ytd" - Contribution total for the year to date
  , committeeReportsTotalDisbursementsPeriod :: !(Maybe Double) -- ^ "total_disbursements_period" - Disbursements total for the reporting period
  , committeeReportsTotalDisbursementsYtd :: !(Maybe Double) -- ^ "total_disbursements_ytd" - Disbursements total for the year to date
  , committeeReportsTotalFedDisbursementsPeriod :: !(Maybe Double) -- ^ "total_fed_disbursements_period"
  , committeeReportsTotalFedDisbursementsYtd :: !(Maybe Double) -- ^ "total_fed_disbursements_ytd"
  , committeeReportsTotalFedElectionActivityPeriod :: !(Maybe Double) -- ^ "total_fed_election_activity_period"
  , committeeReportsTotalFedElectionActivityYtd :: !(Maybe Double) -- ^ "total_fed_election_activity_ytd"
  , committeeReportsTotalFedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_fed_operating_expenditures_period"
  , committeeReportsTotalFedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_fed_operating_expenditures_ytd"
  , committeeReportsTotalFedReceiptsPeriod :: !(Maybe Double) -- ^ "total_fed_receipts_period"
  , committeeReportsTotalFedReceiptsYtd :: !(Maybe Double) -- ^ "total_fed_receipts_ytd"
  , committeeReportsTotalIndividualContributionsPeriod :: !(Maybe Double) -- ^ "total_individual_contributions_period" - Individual contributions total for the reporting period
  , committeeReportsTotalIndividualContributionsYtd :: !(Maybe Double) -- ^ "total_individual_contributions_ytd" - Individual contributions total for the year to date
  , committeeReportsTotalLoanRepaymentsMadePeriod :: !(Maybe Double) -- ^ "total_loan_repayments_made_period"
  , committeeReportsTotalLoanRepaymentsMadeYtd :: !(Maybe Double) -- ^ "total_loan_repayments_made_ytd"
  , committeeReportsTotalLoansReceivedPeriod :: !(Maybe Double) -- ^ "total_loans_received_period"
  , committeeReportsTotalLoansReceivedYtd :: !(Maybe Double) -- ^ "total_loans_received_ytd"
  , committeeReportsTotalNonfedTransfersPeriod :: !(Maybe Double) -- ^ "total_nonfed_transfers_period"
  , committeeReportsTotalNonfedTransfersYtd :: !(Maybe Double) -- ^ "total_nonfed_transfers_ytd"
  , committeeReportsTotalOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures_period"
  , committeeReportsTotalOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures_ytd"
  , committeeReportsTotalOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_operating_expenditures_period"
  , committeeReportsTotalOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_operating_expenditures_ytd"
  , committeeReportsTotalPeriod :: !(Maybe Double) -- ^ "total_period"
  , committeeReportsTotalReceiptsPeriod :: !(Maybe Double) -- ^ "total_receipts_period" - Anything of value (money, goods, services or property) received by a political committee total for the reporting period
  , committeeReportsTotalReceiptsYtd :: !(Maybe Double) -- ^ "total_receipts_ytd" - Anything of value (money, goods, services or property) received by a political committee total for the year to date
  , committeeReportsTotalYtd :: !(Maybe Double) -- ^ "total_ytd"
  , committeeReportsTransfersFromAffiliatedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee_period"
  , committeeReportsTransfersFromAffiliatedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee_ytd"
  , committeeReportsTransfersFromAffiliatedPartyPeriod :: !(Maybe Double) -- ^ "transfers_from_affiliated_party_period"
  , committeeReportsTransfersFromAffiliatedPartyYtd :: !(Maybe Double) -- ^ "transfers_from_affiliated_party_ytd"
  , committeeReportsTransfersFromNonfedAccountPeriod :: !(Maybe Double) -- ^ "transfers_from_nonfed_account_period"
  , committeeReportsTransfersFromNonfedAccountYtd :: !(Maybe Double) -- ^ "transfers_from_nonfed_account_ytd"
  , committeeReportsTransfersFromNonfedLevinPeriod :: !(Maybe Double) -- ^ "transfers_from_nonfed_levin_period"
  , committeeReportsTransfersFromNonfedLevinYtd :: !(Maybe Double) -- ^ "transfers_from_nonfed_levin_ytd"
  , committeeReportsTransfersFromOtherAuthorizedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee_period"
  , committeeReportsTransfersFromOtherAuthorizedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee_ytd"
  , committeeReportsTransfersToAffiliatedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_to_affiliated_committee_period"
  , committeeReportsTransfersToAffilitatedCommitteesYtd :: !(Maybe Double) -- ^ "transfers_to_affilitated_committees_ytd"
  , committeeReportsTransfersToOtherAuthorizedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee_period"
  , committeeReportsTransfersToOtherAuthorizedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee_ytd"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReports
instance A.FromJSON CommitteeReports where
  parseJSON = A.withObject "CommitteeReports" $ \o ->
    CommitteeReports
      <$> (o .:? "aggregate_amount_personal_contributions_general")
      <*> (o .:? "aggregate_contributions_personal_funds_primary")
      <*> (o .:? "all_loans_received_period")
      <*> (o .:? "all_loans_received_ytd")
      <*> (o .:? "all_other_loans_period")
      <*> (o .:? "all_other_loans_ytd")
      <*> (o .:? "allocated_federal_election_levin_share_period")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_indicator_full")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "calendar_ytd")
      <*> (o .:? "candidate_contribution_period")
      <*> (o .:? "candidate_contribution_ytd")
      <*> (o .:? "cash_on_hand_beginning_calendar_ytd")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "cash_on_hand_close_ytd")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "coordinated_expenditures_by_party_committee_period")
      <*> (o .:? "coordinated_expenditures_by_party_committee_ytd")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "debts_owed_to_committee")
      <*> (o .:? "document_description")
      <*> (o .:? "end_image_number")
      <*> (o .:? "exempt_legal_accounting_disbursement_period")
      <*> (o .:? "exempt_legal_accounting_disbursement_ytd")
      <*> (o .:? "expenditure_subject_to_limits")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "fed_candidate_committee_contribution_refunds_ytd")
      <*> (o .:? "fed_candidate_committee_contributions_period")
      <*> (o .:? "fed_candidate_committee_contributions_ytd")
      <*> (o .:? "fed_candidate_contribution_refunds_period")
      <*> (o .:? "federal_funds_period")
      <*> (o .:? "federal_funds_ytd")
      <*> (o .:? "file_number")
      <*> (o .:? "fundraising_disbursements_period")
      <*> (o .:? "fundraising_disbursements_ytd")
      <*> (o .:? "gross_receipt_authorized_committee_general")
      <*> (o .:? "gross_receipt_authorized_committee_primary")
      <*> (o .:? "gross_receipt_minus_personal_contribution_general")
      <*> (o .:? "gross_receipt_minus_personal_contributions_primary")
      <*> (o .:? "html_url")
      <*> (o .:? "independent_contributions_period")
      <*> (o .:? "independent_expenditures_period")
      <*> (o .:? "independent_expenditures_ytd")
      <*> (o .:? "individual_itemized_contributions_period")
      <*> (o .:? "individual_itemized_contributions_ytd")
      <*> (o .:? "individual_unitemized_contributions_period")
      <*> (o .:? "individual_unitemized_contributions_ytd")
      <*> (o .:? "is_amended")
      <*> (o .:? "items_on_hand_liquidated")
      <*> (o .:? "loan_repayments_candidate_loans_period")
      <*> (o .:? "loan_repayments_candidate_loans_ytd")
      <*> (o .:? "loan_repayments_made_period")
      <*> (o .:? "loan_repayments_made_ytd")
      <*> (o .:? "loan_repayments_other_loans_period")
      <*> (o .:? "loan_repayments_other_loans_ytd")
      <*> (o .:? "loan_repayments_received_period")
      <*> (o .:? "loan_repayments_received_ytd")
      <*> (o .:? "loans_made_by_candidate_period")
      <*> (o .:? "loans_made_by_candidate_ytd")
      <*> (o .:? "loans_made_period")
      <*> (o .:? "loans_made_ytd")
      <*> (o .:? "loans_received_from_candidate_period")
      <*> (o .:? "loans_received_from_candidate_ytd")
      <*> (o .:? "means_filed")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_file_number")
      <*> (o .:? "net_contributions_cycle_to_date")
      <*> (o .:? "net_contributions_period")
      <*> (o .:? "net_contributions_ytd")
      <*> (o .:? "net_operating_expenditures_cycle_to_date")
      <*> (o .:? "net_operating_expenditures_period")
      <*> (o .:? "net_operating_expenditures_ytd")
      <*> (o .:? "non_allocated_fed_election_activity_period")
      <*> (o .:? "non_allocated_fed_election_activity_ytd")
      <*> (o .:? "nonfed_share_allocated_disbursements_period")
      <*> (o .:? "offsets_to_fundraising_expenditures_period")
      <*> (o .:? "offsets_to_fundraising_expenditures_ytd")
      <*> (o .:? "offsets_to_legal_accounting_period")
      <*> (o .:? "offsets_to_legal_accounting_ytd")
      <*> (o .:? "offsets_to_operating_expenditures_period")
      <*> (o .:? "offsets_to_operating_expenditures_ytd")
      <*> (o .:? "operating_expenditures_period")
      <*> (o .:? "operating_expenditures_ytd")
      <*> (o .:? "other_disbursements_period")
      <*> (o .:? "other_disbursements_ytd")
      <*> (o .:? "other_fed_operating_expenditures_period")
      <*> (o .:? "other_fed_operating_expenditures_ytd")
      <*> (o .:? "other_fed_receipts_period")
      <*> (o .:? "other_fed_receipts_ytd")
      <*> (o .:? "other_loans_received_period")
      <*> (o .:? "other_loans_received_ytd")
      <*> (o .:? "other_political_committee_contributions_period")
      <*> (o .:? "other_political_committee_contributions_ytd")
      <*> (o .:? "other_receipts_period")
      <*> (o .:? "other_receipts_ytd")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions_period")
      <*> (o .:? "political_party_committee_contributions_ytd")
      <*> (o .:? "previous_file_number")
      <*> (o .:? "receipt_date")
      <*> (o .:? "refunded_individual_contributions_period")
      <*> (o .:? "refunded_individual_contributions_ytd")
      <*> (o .:? "refunded_other_political_committee_contributions_period")
      <*> (o .:? "refunded_other_political_committee_contributions_ytd")
      <*> (o .:? "refunded_political_party_committee_contributions_period")
      <*> (o .:? "refunded_political_party_committee_contributions_ytd")
      <*> (o .:? "refunds_total_contributions_col_total_ytd")
      <*> (o .:? "repayments_loans_made_by_candidate_period")
      <*> (o .:? "repayments_loans_made_candidate_ytd")
      <*> (o .:? "repayments_other_loans_period")
      <*> (o .:? "repayments_other_loans_ytd")
      <*> (o .:? "report_form")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")
      <*> (o .:? "shared_fed_activity_nonfed_ytd")
      <*> (o .:? "shared_fed_activity_period")
      <*> (o .:? "shared_fed_activity_ytd")
      <*> (o .:? "shared_fed_operating_expenditures_period")
      <*> (o .:? "shared_fed_operating_expenditures_ytd")
      <*> (o .:? "shared_nonfed_operating_expenditures_period")
      <*> (o .:? "shared_nonfed_operating_expenditures_ytd")
      <*> (o .:? "subtotal_period")
      <*> (o .:? "subtotal_summary_page_period")
      <*> (o .:? "subtotal_summary_period")
      <*> (o .:? "subtotal_summary_ytd")
      <*> (o .:? "total_contribution_refunds_col_total_period")
      <*> (o .:? "total_contribution_refunds_period")
      <*> (o .:? "total_contribution_refunds_ytd")
      <*> (o .:? "total_contributions_column_total_period")
      <*> (o .:? "total_contributions_period")
      <*> (o .:? "total_contributions_ytd")
      <*> (o .:? "total_disbursements_period")
      <*> (o .:? "total_disbursements_ytd")
      <*> (o .:? "total_fed_disbursements_period")
      <*> (o .:? "total_fed_disbursements_ytd")
      <*> (o .:? "total_fed_election_activity_period")
      <*> (o .:? "total_fed_election_activity_ytd")
      <*> (o .:? "total_fed_operating_expenditures_period")
      <*> (o .:? "total_fed_operating_expenditures_ytd")
      <*> (o .:? "total_fed_receipts_period")
      <*> (o .:? "total_fed_receipts_ytd")
      <*> (o .:? "total_individual_contributions_period")
      <*> (o .:? "total_individual_contributions_ytd")
      <*> (o .:? "total_loan_repayments_made_period")
      <*> (o .:? "total_loan_repayments_made_ytd")
      <*> (o .:? "total_loans_received_period")
      <*> (o .:? "total_loans_received_ytd")
      <*> (o .:? "total_nonfed_transfers_period")
      <*> (o .:? "total_nonfed_transfers_ytd")
      <*> (o .:? "total_offsets_to_operating_expenditures_period")
      <*> (o .:? "total_offsets_to_operating_expenditures_ytd")
      <*> (o .:? "total_operating_expenditures_period")
      <*> (o .:? "total_operating_expenditures_ytd")
      <*> (o .:? "total_period")
      <*> (o .:? "total_receipts_period")
      <*> (o .:? "total_receipts_ytd")
      <*> (o .:? "total_ytd")
      <*> (o .:? "transfers_from_affiliated_committee_period")
      <*> (o .:? "transfers_from_affiliated_committee_ytd")
      <*> (o .:? "transfers_from_affiliated_party_period")
      <*> (o .:? "transfers_from_affiliated_party_ytd")
      <*> (o .:? "transfers_from_nonfed_account_period")
      <*> (o .:? "transfers_from_nonfed_account_ytd")
      <*> (o .:? "transfers_from_nonfed_levin_period")
      <*> (o .:? "transfers_from_nonfed_levin_ytd")
      <*> (o .:? "transfers_from_other_authorized_committee_period")
      <*> (o .:? "transfers_from_other_authorized_committee_ytd")
      <*> (o .:? "transfers_to_affiliated_committee_period")
      <*> (o .:? "transfers_to_affilitated_committees_ytd")
      <*> (o .:? "transfers_to_other_authorized_committee_period")
      <*> (o .:? "transfers_to_other_authorized_committee_ytd")

-- | ToJSON CommitteeReports
instance A.ToJSON CommitteeReports where
  toJSON CommitteeReports {..} =
   _omitNulls
      [ "aggregate_amount_personal_contributions_general" .= committeeReportsAggregateAmountPersonalContributionsGeneral
      , "aggregate_contributions_personal_funds_primary" .= committeeReportsAggregateContributionsPersonalFundsPrimary
      , "all_loans_received_period" .= committeeReportsAllLoansReceivedPeriod
      , "all_loans_received_ytd" .= committeeReportsAllLoansReceivedYtd
      , "all_other_loans_period" .= committeeReportsAllOtherLoansPeriod
      , "all_other_loans_ytd" .= committeeReportsAllOtherLoansYtd
      , "allocated_federal_election_levin_share_period" .= committeeReportsAllocatedFederalElectionLevinSharePeriod
      , "amendment_chain" .= committeeReportsAmendmentChain
      , "amendment_indicator" .= committeeReportsAmendmentIndicator
      , "amendment_indicator_full" .= committeeReportsAmendmentIndicatorFull
      , "beginning_image_number" .= committeeReportsBeginningImageNumber
      , "calendar_ytd" .= committeeReportsCalendarYtd
      , "candidate_contribution_period" .= committeeReportsCandidateContributionPeriod
      , "candidate_contribution_ytd" .= committeeReportsCandidateContributionYtd
      , "cash_on_hand_beginning_calendar_ytd" .= committeeReportsCashOnHandBeginningCalendarYtd
      , "cash_on_hand_beginning_period" .= committeeReportsCashOnHandBeginningPeriod
      , "cash_on_hand_close_ytd" .= committeeReportsCashOnHandCloseYtd
      , "cash_on_hand_end_period" .= committeeReportsCashOnHandEndPeriod
      , "committee_id" .= committeeReportsCommitteeId
      , "committee_name" .= committeeReportsCommitteeName
      , "committee_type" .= committeeReportsCommitteeType
      , "coordinated_expenditures_by_party_committee_period" .= committeeReportsCoordinatedExpendituresByPartyCommitteePeriod
      , "coordinated_expenditures_by_party_committee_ytd" .= committeeReportsCoordinatedExpendituresByPartyCommitteeYtd
      , "coverage_end_date" .= committeeReportsCoverageEndDate
      , "coverage_start_date" .= committeeReportsCoverageStartDate
      , "csv_url" .= committeeReportsCsvUrl
      , "cycle" .= committeeReportsCycle
      , "debts_owed_by_committee" .= committeeReportsDebtsOwedByCommittee
      , "debts_owed_to_committee" .= committeeReportsDebtsOwedToCommittee
      , "document_description" .= committeeReportsDocumentDescription
      , "end_image_number" .= committeeReportsEndImageNumber
      , "exempt_legal_accounting_disbursement_period" .= committeeReportsExemptLegalAccountingDisbursementPeriod
      , "exempt_legal_accounting_disbursement_ytd" .= committeeReportsExemptLegalAccountingDisbursementYtd
      , "expenditure_subject_to_limits" .= committeeReportsExpenditureSubjectToLimits
      , "fec_file_id" .= committeeReportsFecFileId
      , "fec_url" .= committeeReportsFecUrl
      , "fed_candidate_committee_contribution_refunds_ytd" .= committeeReportsFedCandidateCommitteeContributionRefundsYtd
      , "fed_candidate_committee_contributions_period" .= committeeReportsFedCandidateCommitteeContributionsPeriod
      , "fed_candidate_committee_contributions_ytd" .= committeeReportsFedCandidateCommitteeContributionsYtd
      , "fed_candidate_contribution_refunds_period" .= committeeReportsFedCandidateContributionRefundsPeriod
      , "federal_funds_period" .= committeeReportsFederalFundsPeriod
      , "federal_funds_ytd" .= committeeReportsFederalFundsYtd
      , "file_number" .= committeeReportsFileNumber
      , "fundraising_disbursements_period" .= committeeReportsFundraisingDisbursementsPeriod
      , "fundraising_disbursements_ytd" .= committeeReportsFundraisingDisbursementsYtd
      , "gross_receipt_authorized_committee_general" .= committeeReportsGrossReceiptAuthorizedCommitteeGeneral
      , "gross_receipt_authorized_committee_primary" .= committeeReportsGrossReceiptAuthorizedCommitteePrimary
      , "gross_receipt_minus_personal_contribution_general" .= committeeReportsGrossReceiptMinusPersonalContributionGeneral
      , "gross_receipt_minus_personal_contributions_primary" .= committeeReportsGrossReceiptMinusPersonalContributionsPrimary
      , "html_url" .= committeeReportsHtmlUrl
      , "independent_contributions_period" .= committeeReportsIndependentContributionsPeriod
      , "independent_expenditures_period" .= committeeReportsIndependentExpendituresPeriod
      , "independent_expenditures_ytd" .= committeeReportsIndependentExpendituresYtd
      , "individual_itemized_contributions_period" .= committeeReportsIndividualItemizedContributionsPeriod
      , "individual_itemized_contributions_ytd" .= committeeReportsIndividualItemizedContributionsYtd
      , "individual_unitemized_contributions_period" .= committeeReportsIndividualUnitemizedContributionsPeriod
      , "individual_unitemized_contributions_ytd" .= committeeReportsIndividualUnitemizedContributionsYtd
      , "is_amended" .= committeeReportsIsAmended
      , "items_on_hand_liquidated" .= committeeReportsItemsOnHandLiquidated
      , "loan_repayments_candidate_loans_period" .= committeeReportsLoanRepaymentsCandidateLoansPeriod
      , "loan_repayments_candidate_loans_ytd" .= committeeReportsLoanRepaymentsCandidateLoansYtd
      , "loan_repayments_made_period" .= committeeReportsLoanRepaymentsMadePeriod
      , "loan_repayments_made_ytd" .= committeeReportsLoanRepaymentsMadeYtd
      , "loan_repayments_other_loans_period" .= committeeReportsLoanRepaymentsOtherLoansPeriod
      , "loan_repayments_other_loans_ytd" .= committeeReportsLoanRepaymentsOtherLoansYtd
      , "loan_repayments_received_period" .= committeeReportsLoanRepaymentsReceivedPeriod
      , "loan_repayments_received_ytd" .= committeeReportsLoanRepaymentsReceivedYtd
      , "loans_made_by_candidate_period" .= committeeReportsLoansMadeByCandidatePeriod
      , "loans_made_by_candidate_ytd" .= committeeReportsLoansMadeByCandidateYtd
      , "loans_made_period" .= committeeReportsLoansMadePeriod
      , "loans_made_ytd" .= committeeReportsLoansMadeYtd
      , "loans_received_from_candidate_period" .= committeeReportsLoansReceivedFromCandidatePeriod
      , "loans_received_from_candidate_ytd" .= committeeReportsLoansReceivedFromCandidateYtd
      , "means_filed" .= committeeReportsMeansFiled
      , "most_recent" .= committeeReportsMostRecent
      , "most_recent_file_number" .= committeeReportsMostRecentFileNumber
      , "net_contributions_cycle_to_date" .= committeeReportsNetContributionsCycleToDate
      , "net_contributions_period" .= committeeReportsNetContributionsPeriod
      , "net_contributions_ytd" .= committeeReportsNetContributionsYtd
      , "net_operating_expenditures_cycle_to_date" .= committeeReportsNetOperatingExpendituresCycleToDate
      , "net_operating_expenditures_period" .= committeeReportsNetOperatingExpendituresPeriod
      , "net_operating_expenditures_ytd" .= committeeReportsNetOperatingExpendituresYtd
      , "non_allocated_fed_election_activity_period" .= committeeReportsNonAllocatedFedElectionActivityPeriod
      , "non_allocated_fed_election_activity_ytd" .= committeeReportsNonAllocatedFedElectionActivityYtd
      , "nonfed_share_allocated_disbursements_period" .= committeeReportsNonfedShareAllocatedDisbursementsPeriod
      , "offsets_to_fundraising_expenditures_period" .= committeeReportsOffsetsToFundraisingExpendituresPeriod
      , "offsets_to_fundraising_expenditures_ytd" .= committeeReportsOffsetsToFundraisingExpendituresYtd
      , "offsets_to_legal_accounting_period" .= committeeReportsOffsetsToLegalAccountingPeriod
      , "offsets_to_legal_accounting_ytd" .= committeeReportsOffsetsToLegalAccountingYtd
      , "offsets_to_operating_expenditures_period" .= committeeReportsOffsetsToOperatingExpendituresPeriod
      , "offsets_to_operating_expenditures_ytd" .= committeeReportsOffsetsToOperatingExpendituresYtd
      , "operating_expenditures_period" .= committeeReportsOperatingExpendituresPeriod
      , "operating_expenditures_ytd" .= committeeReportsOperatingExpendituresYtd
      , "other_disbursements_period" .= committeeReportsOtherDisbursementsPeriod
      , "other_disbursements_ytd" .= committeeReportsOtherDisbursementsYtd
      , "other_fed_operating_expenditures_period" .= committeeReportsOtherFedOperatingExpendituresPeriod
      , "other_fed_operating_expenditures_ytd" .= committeeReportsOtherFedOperatingExpendituresYtd
      , "other_fed_receipts_period" .= committeeReportsOtherFedReceiptsPeriod
      , "other_fed_receipts_ytd" .= committeeReportsOtherFedReceiptsYtd
      , "other_loans_received_period" .= committeeReportsOtherLoansReceivedPeriod
      , "other_loans_received_ytd" .= committeeReportsOtherLoansReceivedYtd
      , "other_political_committee_contributions_period" .= committeeReportsOtherPoliticalCommitteeContributionsPeriod
      , "other_political_committee_contributions_ytd" .= committeeReportsOtherPoliticalCommitteeContributionsYtd
      , "other_receipts_period" .= committeeReportsOtherReceiptsPeriod
      , "other_receipts_ytd" .= committeeReportsOtherReceiptsYtd
      , "pdf_url" .= committeeReportsPdfUrl
      , "political_party_committee_contributions_period" .= committeeReportsPoliticalPartyCommitteeContributionsPeriod
      , "political_party_committee_contributions_ytd" .= committeeReportsPoliticalPartyCommitteeContributionsYtd
      , "previous_file_number" .= committeeReportsPreviousFileNumber
      , "receipt_date" .= committeeReportsReceiptDate
      , "refunded_individual_contributions_period" .= committeeReportsRefundedIndividualContributionsPeriod
      , "refunded_individual_contributions_ytd" .= committeeReportsRefundedIndividualContributionsYtd
      , "refunded_other_political_committee_contributions_period" .= committeeReportsRefundedOtherPoliticalCommitteeContributionsPeriod
      , "refunded_other_political_committee_contributions_ytd" .= committeeReportsRefundedOtherPoliticalCommitteeContributionsYtd
      , "refunded_political_party_committee_contributions_period" .= committeeReportsRefundedPoliticalPartyCommitteeContributionsPeriod
      , "refunded_political_party_committee_contributions_ytd" .= committeeReportsRefundedPoliticalPartyCommitteeContributionsYtd
      , "refunds_total_contributions_col_total_ytd" .= committeeReportsRefundsTotalContributionsColTotalYtd
      , "repayments_loans_made_by_candidate_period" .= committeeReportsRepaymentsLoansMadeByCandidatePeriod
      , "repayments_loans_made_candidate_ytd" .= committeeReportsRepaymentsLoansMadeCandidateYtd
      , "repayments_other_loans_period" .= committeeReportsRepaymentsOtherLoansPeriod
      , "repayments_other_loans_ytd" .= committeeReportsRepaymentsOtherLoansYtd
      , "report_form" .= committeeReportsReportForm
      , "report_type" .= committeeReportsReportType
      , "report_type_full" .= committeeReportsReportTypeFull
      , "report_year" .= committeeReportsReportYear
      , "shared_fed_activity_nonfed_ytd" .= committeeReportsSharedFedActivityNonfedYtd
      , "shared_fed_activity_period" .= committeeReportsSharedFedActivityPeriod
      , "shared_fed_activity_ytd" .= committeeReportsSharedFedActivityYtd
      , "shared_fed_operating_expenditures_period" .= committeeReportsSharedFedOperatingExpendituresPeriod
      , "shared_fed_operating_expenditures_ytd" .= committeeReportsSharedFedOperatingExpendituresYtd
      , "shared_nonfed_operating_expenditures_period" .= committeeReportsSharedNonfedOperatingExpendituresPeriod
      , "shared_nonfed_operating_expenditures_ytd" .= committeeReportsSharedNonfedOperatingExpendituresYtd
      , "subtotal_period" .= committeeReportsSubtotalPeriod
      , "subtotal_summary_page_period" .= committeeReportsSubtotalSummaryPagePeriod
      , "subtotal_summary_period" .= committeeReportsSubtotalSummaryPeriod
      , "subtotal_summary_ytd" .= committeeReportsSubtotalSummaryYtd
      , "total_contribution_refunds_col_total_period" .= committeeReportsTotalContributionRefundsColTotalPeriod
      , "total_contribution_refunds_period" .= committeeReportsTotalContributionRefundsPeriod
      , "total_contribution_refunds_ytd" .= committeeReportsTotalContributionRefundsYtd
      , "total_contributions_column_total_period" .= committeeReportsTotalContributionsColumnTotalPeriod
      , "total_contributions_period" .= committeeReportsTotalContributionsPeriod
      , "total_contributions_ytd" .= committeeReportsTotalContributionsYtd
      , "total_disbursements_period" .= committeeReportsTotalDisbursementsPeriod
      , "total_disbursements_ytd" .= committeeReportsTotalDisbursementsYtd
      , "total_fed_disbursements_period" .= committeeReportsTotalFedDisbursementsPeriod
      , "total_fed_disbursements_ytd" .= committeeReportsTotalFedDisbursementsYtd
      , "total_fed_election_activity_period" .= committeeReportsTotalFedElectionActivityPeriod
      , "total_fed_election_activity_ytd" .= committeeReportsTotalFedElectionActivityYtd
      , "total_fed_operating_expenditures_period" .= committeeReportsTotalFedOperatingExpendituresPeriod
      , "total_fed_operating_expenditures_ytd" .= committeeReportsTotalFedOperatingExpendituresYtd
      , "total_fed_receipts_period" .= committeeReportsTotalFedReceiptsPeriod
      , "total_fed_receipts_ytd" .= committeeReportsTotalFedReceiptsYtd
      , "total_individual_contributions_period" .= committeeReportsTotalIndividualContributionsPeriod
      , "total_individual_contributions_ytd" .= committeeReportsTotalIndividualContributionsYtd
      , "total_loan_repayments_made_period" .= committeeReportsTotalLoanRepaymentsMadePeriod
      , "total_loan_repayments_made_ytd" .= committeeReportsTotalLoanRepaymentsMadeYtd
      , "total_loans_received_period" .= committeeReportsTotalLoansReceivedPeriod
      , "total_loans_received_ytd" .= committeeReportsTotalLoansReceivedYtd
      , "total_nonfed_transfers_period" .= committeeReportsTotalNonfedTransfersPeriod
      , "total_nonfed_transfers_ytd" .= committeeReportsTotalNonfedTransfersYtd
      , "total_offsets_to_operating_expenditures_period" .= committeeReportsTotalOffsetsToOperatingExpendituresPeriod
      , "total_offsets_to_operating_expenditures_ytd" .= committeeReportsTotalOffsetsToOperatingExpendituresYtd
      , "total_operating_expenditures_period" .= committeeReportsTotalOperatingExpendituresPeriod
      , "total_operating_expenditures_ytd" .= committeeReportsTotalOperatingExpendituresYtd
      , "total_period" .= committeeReportsTotalPeriod
      , "total_receipts_period" .= committeeReportsTotalReceiptsPeriod
      , "total_receipts_ytd" .= committeeReportsTotalReceiptsYtd
      , "total_ytd" .= committeeReportsTotalYtd
      , "transfers_from_affiliated_committee_period" .= committeeReportsTransfersFromAffiliatedCommitteePeriod
      , "transfers_from_affiliated_committee_ytd" .= committeeReportsTransfersFromAffiliatedCommitteeYtd
      , "transfers_from_affiliated_party_period" .= committeeReportsTransfersFromAffiliatedPartyPeriod
      , "transfers_from_affiliated_party_ytd" .= committeeReportsTransfersFromAffiliatedPartyYtd
      , "transfers_from_nonfed_account_period" .= committeeReportsTransfersFromNonfedAccountPeriod
      , "transfers_from_nonfed_account_ytd" .= committeeReportsTransfersFromNonfedAccountYtd
      , "transfers_from_nonfed_levin_period" .= committeeReportsTransfersFromNonfedLevinPeriod
      , "transfers_from_nonfed_levin_ytd" .= committeeReportsTransfersFromNonfedLevinYtd
      , "transfers_from_other_authorized_committee_period" .= committeeReportsTransfersFromOtherAuthorizedCommitteePeriod
      , "transfers_from_other_authorized_committee_ytd" .= committeeReportsTransfersFromOtherAuthorizedCommitteeYtd
      , "transfers_to_affiliated_committee_period" .= committeeReportsTransfersToAffiliatedCommitteePeriod
      , "transfers_to_affilitated_committees_ytd" .= committeeReportsTransfersToAffilitatedCommitteesYtd
      , "transfers_to_other_authorized_committee_period" .= committeeReportsTransfersToOtherAuthorizedCommitteePeriod
      , "transfers_to_other_authorized_committee_ytd" .= committeeReportsTransfersToOtherAuthorizedCommitteeYtd
      ]


-- | Construct a value of type 'CommitteeReports' (by applying it's required fields, if any)
mkCommitteeReports
  :: CommitteeReports
mkCommitteeReports =
  CommitteeReports
  { committeeReportsAggregateAmountPersonalContributionsGeneral = Nothing
  , committeeReportsAggregateContributionsPersonalFundsPrimary = Nothing
  , committeeReportsAllLoansReceivedPeriod = Nothing
  , committeeReportsAllLoansReceivedYtd = Nothing
  , committeeReportsAllOtherLoansPeriod = Nothing
  , committeeReportsAllOtherLoansYtd = Nothing
  , committeeReportsAllocatedFederalElectionLevinSharePeriod = Nothing
  , committeeReportsAmendmentChain = Nothing
  , committeeReportsAmendmentIndicator = Nothing
  , committeeReportsAmendmentIndicatorFull = Nothing
  , committeeReportsBeginningImageNumber = Nothing
  , committeeReportsCalendarYtd = Nothing
  , committeeReportsCandidateContributionPeriod = Nothing
  , committeeReportsCandidateContributionYtd = Nothing
  , committeeReportsCashOnHandBeginningCalendarYtd = Nothing
  , committeeReportsCashOnHandBeginningPeriod = Nothing
  , committeeReportsCashOnHandCloseYtd = Nothing
  , committeeReportsCashOnHandEndPeriod = Nothing
  , committeeReportsCommitteeId = Nothing
  , committeeReportsCommitteeName = Nothing
  , committeeReportsCommitteeType = Nothing
  , committeeReportsCoordinatedExpendituresByPartyCommitteePeriod = Nothing
  , committeeReportsCoordinatedExpendituresByPartyCommitteeYtd = Nothing
  , committeeReportsCoverageEndDate = Nothing
  , committeeReportsCoverageStartDate = Nothing
  , committeeReportsCsvUrl = Nothing
  , committeeReportsCycle = Nothing
  , committeeReportsDebtsOwedByCommittee = Nothing
  , committeeReportsDebtsOwedToCommittee = Nothing
  , committeeReportsDocumentDescription = Nothing
  , committeeReportsEndImageNumber = Nothing
  , committeeReportsExemptLegalAccountingDisbursementPeriod = Nothing
  , committeeReportsExemptLegalAccountingDisbursementYtd = Nothing
  , committeeReportsExpenditureSubjectToLimits = Nothing
  , committeeReportsFecFileId = Nothing
  , committeeReportsFecUrl = Nothing
  , committeeReportsFedCandidateCommitteeContributionRefundsYtd = Nothing
  , committeeReportsFedCandidateCommitteeContributionsPeriod = Nothing
  , committeeReportsFedCandidateCommitteeContributionsYtd = Nothing
  , committeeReportsFedCandidateContributionRefundsPeriod = Nothing
  , committeeReportsFederalFundsPeriod = Nothing
  , committeeReportsFederalFundsYtd = Nothing
  , committeeReportsFileNumber = Nothing
  , committeeReportsFundraisingDisbursementsPeriod = Nothing
  , committeeReportsFundraisingDisbursementsYtd = Nothing
  , committeeReportsGrossReceiptAuthorizedCommitteeGeneral = Nothing
  , committeeReportsGrossReceiptAuthorizedCommitteePrimary = Nothing
  , committeeReportsGrossReceiptMinusPersonalContributionGeneral = Nothing
  , committeeReportsGrossReceiptMinusPersonalContributionsPrimary = Nothing
  , committeeReportsHtmlUrl = Nothing
  , committeeReportsIndependentContributionsPeriod = Nothing
  , committeeReportsIndependentExpendituresPeriod = Nothing
  , committeeReportsIndependentExpendituresYtd = Nothing
  , committeeReportsIndividualItemizedContributionsPeriod = Nothing
  , committeeReportsIndividualItemizedContributionsYtd = Nothing
  , committeeReportsIndividualUnitemizedContributionsPeriod = Nothing
  , committeeReportsIndividualUnitemizedContributionsYtd = Nothing
  , committeeReportsIsAmended = Nothing
  , committeeReportsItemsOnHandLiquidated = Nothing
  , committeeReportsLoanRepaymentsCandidateLoansPeriod = Nothing
  , committeeReportsLoanRepaymentsCandidateLoansYtd = Nothing
  , committeeReportsLoanRepaymentsMadePeriod = Nothing
  , committeeReportsLoanRepaymentsMadeYtd = Nothing
  , committeeReportsLoanRepaymentsOtherLoansPeriod = Nothing
  , committeeReportsLoanRepaymentsOtherLoansYtd = Nothing
  , committeeReportsLoanRepaymentsReceivedPeriod = Nothing
  , committeeReportsLoanRepaymentsReceivedYtd = Nothing
  , committeeReportsLoansMadeByCandidatePeriod = Nothing
  , committeeReportsLoansMadeByCandidateYtd = Nothing
  , committeeReportsLoansMadePeriod = Nothing
  , committeeReportsLoansMadeYtd = Nothing
  , committeeReportsLoansReceivedFromCandidatePeriod = Nothing
  , committeeReportsLoansReceivedFromCandidateYtd = Nothing
  , committeeReportsMeansFiled = Nothing
  , committeeReportsMostRecent = Nothing
  , committeeReportsMostRecentFileNumber = Nothing
  , committeeReportsNetContributionsCycleToDate = Nothing
  , committeeReportsNetContributionsPeriod = Nothing
  , committeeReportsNetContributionsYtd = Nothing
  , committeeReportsNetOperatingExpendituresCycleToDate = Nothing
  , committeeReportsNetOperatingExpendituresPeriod = Nothing
  , committeeReportsNetOperatingExpendituresYtd = Nothing
  , committeeReportsNonAllocatedFedElectionActivityPeriod = Nothing
  , committeeReportsNonAllocatedFedElectionActivityYtd = Nothing
  , committeeReportsNonfedShareAllocatedDisbursementsPeriod = Nothing
  , committeeReportsOffsetsToFundraisingExpendituresPeriod = Nothing
  , committeeReportsOffsetsToFundraisingExpendituresYtd = Nothing
  , committeeReportsOffsetsToLegalAccountingPeriod = Nothing
  , committeeReportsOffsetsToLegalAccountingYtd = Nothing
  , committeeReportsOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsOperatingExpendituresPeriod = Nothing
  , committeeReportsOperatingExpendituresYtd = Nothing
  , committeeReportsOtherDisbursementsPeriod = Nothing
  , committeeReportsOtherDisbursementsYtd = Nothing
  , committeeReportsOtherFedOperatingExpendituresPeriod = Nothing
  , committeeReportsOtherFedOperatingExpendituresYtd = Nothing
  , committeeReportsOtherFedReceiptsPeriod = Nothing
  , committeeReportsOtherFedReceiptsYtd = Nothing
  , committeeReportsOtherLoansReceivedPeriod = Nothing
  , committeeReportsOtherLoansReceivedYtd = Nothing
  , committeeReportsOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsOtherReceiptsPeriod = Nothing
  , committeeReportsOtherReceiptsYtd = Nothing
  , committeeReportsPdfUrl = Nothing
  , committeeReportsPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsPreviousFileNumber = Nothing
  , committeeReportsReceiptDate = Nothing
  , committeeReportsRefundedIndividualContributionsPeriod = Nothing
  , committeeReportsRefundedIndividualContributionsYtd = Nothing
  , committeeReportsRefundedOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsRefundedOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsRefundedPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsRefundedPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsRefundsTotalContributionsColTotalYtd = Nothing
  , committeeReportsRepaymentsLoansMadeByCandidatePeriod = Nothing
  , committeeReportsRepaymentsLoansMadeCandidateYtd = Nothing
  , committeeReportsRepaymentsOtherLoansPeriod = Nothing
  , committeeReportsRepaymentsOtherLoansYtd = Nothing
  , committeeReportsReportForm = Nothing
  , committeeReportsReportType = Nothing
  , committeeReportsReportTypeFull = Nothing
  , committeeReportsReportYear = Nothing
  , committeeReportsSharedFedActivityNonfedYtd = Nothing
  , committeeReportsSharedFedActivityPeriod = Nothing
  , committeeReportsSharedFedActivityYtd = Nothing
  , committeeReportsSharedFedOperatingExpendituresPeriod = Nothing
  , committeeReportsSharedFedOperatingExpendituresYtd = Nothing
  , committeeReportsSharedNonfedOperatingExpendituresPeriod = Nothing
  , committeeReportsSharedNonfedOperatingExpendituresYtd = Nothing
  , committeeReportsSubtotalPeriod = Nothing
  , committeeReportsSubtotalSummaryPagePeriod = Nothing
  , committeeReportsSubtotalSummaryPeriod = Nothing
  , committeeReportsSubtotalSummaryYtd = Nothing
  , committeeReportsTotalContributionRefundsColTotalPeriod = Nothing
  , committeeReportsTotalContributionRefundsPeriod = Nothing
  , committeeReportsTotalContributionRefundsYtd = Nothing
  , committeeReportsTotalContributionsColumnTotalPeriod = Nothing
  , committeeReportsTotalContributionsPeriod = Nothing
  , committeeReportsTotalContributionsYtd = Nothing
  , committeeReportsTotalDisbursementsPeriod = Nothing
  , committeeReportsTotalDisbursementsYtd = Nothing
  , committeeReportsTotalFedDisbursementsPeriod = Nothing
  , committeeReportsTotalFedDisbursementsYtd = Nothing
  , committeeReportsTotalFedElectionActivityPeriod = Nothing
  , committeeReportsTotalFedElectionActivityYtd = Nothing
  , committeeReportsTotalFedOperatingExpendituresPeriod = Nothing
  , committeeReportsTotalFedOperatingExpendituresYtd = Nothing
  , committeeReportsTotalFedReceiptsPeriod = Nothing
  , committeeReportsTotalFedReceiptsYtd = Nothing
  , committeeReportsTotalIndividualContributionsPeriod = Nothing
  , committeeReportsTotalIndividualContributionsYtd = Nothing
  , committeeReportsTotalLoanRepaymentsMadePeriod = Nothing
  , committeeReportsTotalLoanRepaymentsMadeYtd = Nothing
  , committeeReportsTotalLoansReceivedPeriod = Nothing
  , committeeReportsTotalLoansReceivedYtd = Nothing
  , committeeReportsTotalNonfedTransfersPeriod = Nothing
  , committeeReportsTotalNonfedTransfersYtd = Nothing
  , committeeReportsTotalOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsTotalOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsTotalOperatingExpendituresPeriod = Nothing
  , committeeReportsTotalOperatingExpendituresYtd = Nothing
  , committeeReportsTotalPeriod = Nothing
  , committeeReportsTotalReceiptsPeriod = Nothing
  , committeeReportsTotalReceiptsYtd = Nothing
  , committeeReportsTotalYtd = Nothing
  , committeeReportsTransfersFromAffiliatedCommitteePeriod = Nothing
  , committeeReportsTransfersFromAffiliatedCommitteeYtd = Nothing
  , committeeReportsTransfersFromAffiliatedPartyPeriod = Nothing
  , committeeReportsTransfersFromAffiliatedPartyYtd = Nothing
  , committeeReportsTransfersFromNonfedAccountPeriod = Nothing
  , committeeReportsTransfersFromNonfedAccountYtd = Nothing
  , committeeReportsTransfersFromNonfedLevinPeriod = Nothing
  , committeeReportsTransfersFromNonfedLevinYtd = Nothing
  , committeeReportsTransfersFromOtherAuthorizedCommitteePeriod = Nothing
  , committeeReportsTransfersFromOtherAuthorizedCommitteeYtd = Nothing
  , committeeReportsTransfersToAffiliatedCommitteePeriod = Nothing
  , committeeReportsTransfersToAffilitatedCommitteesYtd = Nothing
  , committeeReportsTransfersToOtherAuthorizedCommitteePeriod = Nothing
  , committeeReportsTransfersToOtherAuthorizedCommitteeYtd = Nothing
  }

-- ** CommitteeReportsHouseSenate
-- | CommitteeReportsHouseSenate
data CommitteeReportsHouseSenate = CommitteeReportsHouseSenate
  { committeeReportsHouseSenateAggregateAmountPersonalContributionsGeneral :: !(Maybe Double) -- ^ "aggregate_amount_personal_contributions_general"
  , committeeReportsHouseSenateAggregateContributionsPersonalFundsPrimary :: !(Maybe Double) -- ^ "aggregate_contributions_personal_funds_primary"
  , committeeReportsHouseSenateAllOtherLoansPeriod :: !(Maybe Double) -- ^ "all_other_loans_period"
  , committeeReportsHouseSenateAllOtherLoansYtd :: !(Maybe Double) -- ^ "all_other_loans_ytd"
  , committeeReportsHouseSenateAmendmentChain :: !(Maybe [Double]) -- ^ "amendment_chain" -  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed.
  , committeeReportsHouseSenateAmendmentIndicator :: !(Maybe Text) -- ^ "amendment_indicator"
  , committeeReportsHouseSenateAmendmentIndicatorFull :: !(Maybe Text) -- ^ "amendment_indicator_full"
  , committeeReportsHouseSenateBeginningImageNumber :: !(Maybe Text) -- ^ "beginning_image_number"
  , committeeReportsHouseSenateCandidateContributionPeriod :: !(Maybe Double) -- ^ "candidate_contribution_period"
  , committeeReportsHouseSenateCandidateContributionYtd :: !(Maybe Double) -- ^ "candidate_contribution_ytd"
  , committeeReportsHouseSenateCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period" - Balance for the committee at the start of the two-year period
  , committeeReportsHouseSenateCashOnHandEndPeriod :: !(Maybe Double) -- ^ "cash_on_hand_end_period" - Ending cash balance on the most recent filing
  , committeeReportsHouseSenateCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeReportsHouseSenateCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , committeeReportsHouseSenateCommitteeType :: !(Maybe Text) -- ^ "committee_type"
  , committeeReportsHouseSenateCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date" - Ending date of the reporting period
  , committeeReportsHouseSenateCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , committeeReportsHouseSenateCsvUrl :: !(Maybe Text) -- ^ "csv_url"
  , committeeReportsHouseSenateCycle :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeReportsHouseSenateDebtsOwedByCommittee :: !(Maybe Double) -- ^ "debts_owed_by_committee" - Debts owed by the committee
  , committeeReportsHouseSenateDebtsOwedToCommittee :: !(Maybe Double) -- ^ "debts_owed_to_committee" - Debts owed to the committee
  , committeeReportsHouseSenateDocumentDescription :: !(Maybe Text) -- ^ "document_description"
  , committeeReportsHouseSenateEndImageNumber :: !(Maybe Text) -- ^ "end_image_number"
  , committeeReportsHouseSenateFecFileId :: !(Maybe Text) -- ^ "fec_file_id"
  , committeeReportsHouseSenateFecUrl :: !(Maybe Text) -- ^ "fec_url"
  , committeeReportsHouseSenateFileNumber :: !(Maybe Int) -- ^ "file_number"
  , committeeReportsHouseSenateGrossReceiptAuthorizedCommitteeGeneral :: !(Maybe Double) -- ^ "gross_receipt_authorized_committee_general"
  , committeeReportsHouseSenateGrossReceiptAuthorizedCommitteePrimary :: !(Maybe Double) -- ^ "gross_receipt_authorized_committee_primary"
  , committeeReportsHouseSenateGrossReceiptMinusPersonalContributionGeneral :: !(Maybe Double) -- ^ "gross_receipt_minus_personal_contribution_general"
  , committeeReportsHouseSenateGrossReceiptMinusPersonalContributionsPrimary :: !(Maybe Double) -- ^ "gross_receipt_minus_personal_contributions_primary"
  , committeeReportsHouseSenateHtmlUrl :: !(Maybe Text) -- ^ "html_url" - HTML link to the filing.
  , committeeReportsHouseSenateIndividualItemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_itemized_contributions_period" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
  , committeeReportsHouseSenateIndividualItemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_itemized_contributions_ytd" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
  , committeeReportsHouseSenateIndividualUnitemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_unitemized_contributions_period" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
  , committeeReportsHouseSenateIndividualUnitemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_unitemized_contributions_ytd" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
  , committeeReportsHouseSenateIsAmended :: !(Maybe Bool) -- ^ "is_amended" - False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
  , committeeReportsHouseSenateLoanRepaymentsCandidateLoansPeriod :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans_period"
  , committeeReportsHouseSenateLoanRepaymentsCandidateLoansYtd :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans_ytd"
  , committeeReportsHouseSenateLoanRepaymentsOtherLoansPeriod :: !(Maybe Double) -- ^ "loan_repayments_other_loans_period"
  , committeeReportsHouseSenateLoanRepaymentsOtherLoansYtd :: !(Maybe Double) -- ^ "loan_repayments_other_loans_ytd"
  , committeeReportsHouseSenateLoansMadeByCandidatePeriod :: !(Maybe Double) -- ^ "loans_made_by_candidate_period"
  , committeeReportsHouseSenateLoansMadeByCandidateYtd :: !(Maybe Double) -- ^ "loans_made_by_candidate_ytd"
  , committeeReportsHouseSenateMeansFiled :: !(Maybe Text) -- ^ "means_filed" - The method used to file with the FEC, either electronic or on paper.
  , committeeReportsHouseSenateMostRecent :: !(Maybe Bool) -- ^ "most_recent"
  , committeeReportsHouseSenateMostRecentFileNumber :: !(Maybe Double) -- ^ "most_recent_file_number"
  , committeeReportsHouseSenateNetContributionsPeriod :: !(Maybe Double) -- ^ "net_contributions_period"
  , committeeReportsHouseSenateNetContributionsYtd :: !(Maybe Double) -- ^ "net_contributions_ytd"
  , committeeReportsHouseSenateNetOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "net_operating_expenditures_period"
  , committeeReportsHouseSenateNetOperatingExpendituresYtd :: !(Maybe Double) -- ^ "net_operating_expenditures_ytd"
  , committeeReportsHouseSenateOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_period" - Offsets to operating expenditures total for the reporting period
  , committeeReportsHouseSenateOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_ytd" - Offsets to operating expenditures total for the year to date
  , committeeReportsHouseSenateOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "operating_expenditures_period"
  , committeeReportsHouseSenateOperatingExpendituresYtd :: !(Maybe Double) -- ^ "operating_expenditures_ytd"
  , committeeReportsHouseSenateOtherDisbursementsPeriod :: !(Maybe Double) -- ^ "other_disbursements_period" - Other disbursements total for the reporting period
  , committeeReportsHouseSenateOtherDisbursementsYtd :: !(Maybe Double) -- ^ "other_disbursements_ytd" - Other disbursements total for the year to date
  , committeeReportsHouseSenateOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "other_political_committee_contributions_period" - Other committees contributions total for the reporting period
  , committeeReportsHouseSenateOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "other_political_committee_contributions_ytd" - Other committees contributions total for the year to date
  , committeeReportsHouseSenateOtherReceiptsPeriod :: !(Maybe Double) -- ^ "other_receipts_period"
  , committeeReportsHouseSenateOtherReceiptsYtd :: !(Maybe Double) -- ^ "other_receipts_ytd"
  , committeeReportsHouseSenatePdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeReportsHouseSenatePoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "political_party_committee_contributions_period" - Party committees contributions total for the reporting period
  , committeeReportsHouseSenatePoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "political_party_committee_contributions_ytd" - Party committees contributions total for the year to date
  , committeeReportsHouseSenatePreviousFileNumber :: !(Maybe Double) -- ^ "previous_file_number"
  , committeeReportsHouseSenateReceiptDate :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , committeeReportsHouseSenateRefundedIndividualContributionsPeriod :: !(Maybe Double) -- ^ "refunded_individual_contributions_period" - Individual refunds total for the reporting period
  , committeeReportsHouseSenateRefundedIndividualContributionsYtd :: !(Maybe Double) -- ^ "refunded_individual_contributions_ytd" - Individual refunds total for the year to date
  , committeeReportsHouseSenateRefundedOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_period" - Other committee refunds total for the reporting period
  , committeeReportsHouseSenateRefundedOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_ytd" - Other committee refunds total for the year to date
  , committeeReportsHouseSenateRefundedPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_period" - Political party refunds total for the reporting period
  , committeeReportsHouseSenateRefundedPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_ytd" - Political party refunds total for the year to date
  , committeeReportsHouseSenateRefundsTotalContributionsColTotalYtd :: !(Maybe Double) -- ^ "refunds_total_contributions_col_total_ytd"
  , committeeReportsHouseSenateReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeReportsHouseSenateReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsHouseSenateReportTypeFull :: !(Maybe Text) -- ^ "report_type_full" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsHouseSenateReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , committeeReportsHouseSenateSubtotalPeriod :: !(Maybe Double) -- ^ "subtotal_period"
  , committeeReportsHouseSenateTotalContributionRefundsColTotalPeriod :: !(Maybe Double) -- ^ "total_contribution_refunds_col_total_period"
  , committeeReportsHouseSenateTotalContributionRefundsPeriod :: !(Maybe Double) -- ^ "total_contribution_refunds_period" - Total contribution refunds total for the reporting period
  , committeeReportsHouseSenateTotalContributionRefundsYtd :: !(Maybe Double) -- ^ "total_contribution_refunds_ytd" - Total contribution refunds total for the year to date
  , committeeReportsHouseSenateTotalContributionsColumnTotalPeriod :: !(Maybe Double) -- ^ "total_contributions_column_total_period"
  , committeeReportsHouseSenateTotalContributionsPeriod :: !(Maybe Double) -- ^ "total_contributions_period" - Contribution total for the reporting period
  , committeeReportsHouseSenateTotalContributionsYtd :: !(Maybe Double) -- ^ "total_contributions_ytd" - Contribution total for the year to date
  , committeeReportsHouseSenateTotalDisbursementsPeriod :: !(Maybe Double) -- ^ "total_disbursements_period" - Disbursements total for the reporting period
  , committeeReportsHouseSenateTotalDisbursementsYtd :: !(Maybe Double) -- ^ "total_disbursements_ytd" - Disbursements total for the year to date
  , committeeReportsHouseSenateTotalIndividualContributionsPeriod :: !(Maybe Double) -- ^ "total_individual_contributions_period" - Individual contributions total for the reporting period
  , committeeReportsHouseSenateTotalIndividualContributionsYtd :: !(Maybe Double) -- ^ "total_individual_contributions_ytd" - Individual contributions total for the year to date
  , committeeReportsHouseSenateTotalLoanRepaymentsMadePeriod :: !(Maybe Double) -- ^ "total_loan_repayments_made_period"
  , committeeReportsHouseSenateTotalLoanRepaymentsMadeYtd :: !(Maybe Double) -- ^ "total_loan_repayments_made_ytd"
  , committeeReportsHouseSenateTotalLoansReceivedPeriod :: !(Maybe Double) -- ^ "total_loans_received_period"
  , committeeReportsHouseSenateTotalLoansReceivedYtd :: !(Maybe Double) -- ^ "total_loans_received_ytd"
  , committeeReportsHouseSenateTotalOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures_period"
  , committeeReportsHouseSenateTotalOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures_ytd"
  , committeeReportsHouseSenateTotalOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_operating_expenditures_period"
  , committeeReportsHouseSenateTotalOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_operating_expenditures_ytd"
  , committeeReportsHouseSenateTotalReceiptsPeriod :: !(Maybe Double) -- ^ "total_receipts_period" - Anything of value (money, goods, services or property) received by a political committee total for the reporting period
  , committeeReportsHouseSenateTotalReceiptsYtd :: !(Maybe Double) -- ^ "total_receipts_ytd" - Anything of value (money, goods, services or property) received by a political committee total for the year to date
  , committeeReportsHouseSenateTransfersFromOtherAuthorizedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee_period"
  , committeeReportsHouseSenateTransfersFromOtherAuthorizedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee_ytd"
  , committeeReportsHouseSenateTransfersToOtherAuthorizedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee_period"
  , committeeReportsHouseSenateTransfersToOtherAuthorizedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee_ytd"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsHouseSenate
instance A.FromJSON CommitteeReportsHouseSenate where
  parseJSON = A.withObject "CommitteeReportsHouseSenate" $ \o ->
    CommitteeReportsHouseSenate
      <$> (o .:? "aggregate_amount_personal_contributions_general")
      <*> (o .:? "aggregate_contributions_personal_funds_primary")
      <*> (o .:? "all_other_loans_period")
      <*> (o .:? "all_other_loans_ytd")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_indicator_full")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "candidate_contribution_period")
      <*> (o .:? "candidate_contribution_ytd")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "debts_owed_to_committee")
      <*> (o .:? "document_description")
      <*> (o .:? "end_image_number")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "file_number")
      <*> (o .:? "gross_receipt_authorized_committee_general")
      <*> (o .:? "gross_receipt_authorized_committee_primary")
      <*> (o .:? "gross_receipt_minus_personal_contribution_general")
      <*> (o .:? "gross_receipt_minus_personal_contributions_primary")
      <*> (o .:? "html_url")
      <*> (o .:? "individual_itemized_contributions_period")
      <*> (o .:? "individual_itemized_contributions_ytd")
      <*> (o .:? "individual_unitemized_contributions_period")
      <*> (o .:? "individual_unitemized_contributions_ytd")
      <*> (o .:? "is_amended")
      <*> (o .:? "loan_repayments_candidate_loans_period")
      <*> (o .:? "loan_repayments_candidate_loans_ytd")
      <*> (o .:? "loan_repayments_other_loans_period")
      <*> (o .:? "loan_repayments_other_loans_ytd")
      <*> (o .:? "loans_made_by_candidate_period")
      <*> (o .:? "loans_made_by_candidate_ytd")
      <*> (o .:? "means_filed")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_file_number")
      <*> (o .:? "net_contributions_period")
      <*> (o .:? "net_contributions_ytd")
      <*> (o .:? "net_operating_expenditures_period")
      <*> (o .:? "net_operating_expenditures_ytd")
      <*> (o .:? "offsets_to_operating_expenditures_period")
      <*> (o .:? "offsets_to_operating_expenditures_ytd")
      <*> (o .:? "operating_expenditures_period")
      <*> (o .:? "operating_expenditures_ytd")
      <*> (o .:? "other_disbursements_period")
      <*> (o .:? "other_disbursements_ytd")
      <*> (o .:? "other_political_committee_contributions_period")
      <*> (o .:? "other_political_committee_contributions_ytd")
      <*> (o .:? "other_receipts_period")
      <*> (o .:? "other_receipts_ytd")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions_period")
      <*> (o .:? "political_party_committee_contributions_ytd")
      <*> (o .:? "previous_file_number")
      <*> (o .:? "receipt_date")
      <*> (o .:? "refunded_individual_contributions_period")
      <*> (o .:? "refunded_individual_contributions_ytd")
      <*> (o .:? "refunded_other_political_committee_contributions_period")
      <*> (o .:? "refunded_other_political_committee_contributions_ytd")
      <*> (o .:? "refunded_political_party_committee_contributions_period")
      <*> (o .:? "refunded_political_party_committee_contributions_ytd")
      <*> (o .:? "refunds_total_contributions_col_total_ytd")
      <*> (o .:? "report_form")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")
      <*> (o .:? "subtotal_period")
      <*> (o .:? "total_contribution_refunds_col_total_period")
      <*> (o .:? "total_contribution_refunds_period")
      <*> (o .:? "total_contribution_refunds_ytd")
      <*> (o .:? "total_contributions_column_total_period")
      <*> (o .:? "total_contributions_period")
      <*> (o .:? "total_contributions_ytd")
      <*> (o .:? "total_disbursements_period")
      <*> (o .:? "total_disbursements_ytd")
      <*> (o .:? "total_individual_contributions_period")
      <*> (o .:? "total_individual_contributions_ytd")
      <*> (o .:? "total_loan_repayments_made_period")
      <*> (o .:? "total_loan_repayments_made_ytd")
      <*> (o .:? "total_loans_received_period")
      <*> (o .:? "total_loans_received_ytd")
      <*> (o .:? "total_offsets_to_operating_expenditures_period")
      <*> (o .:? "total_offsets_to_operating_expenditures_ytd")
      <*> (o .:? "total_operating_expenditures_period")
      <*> (o .:? "total_operating_expenditures_ytd")
      <*> (o .:? "total_receipts_period")
      <*> (o .:? "total_receipts_ytd")
      <*> (o .:? "transfers_from_other_authorized_committee_period")
      <*> (o .:? "transfers_from_other_authorized_committee_ytd")
      <*> (o .:? "transfers_to_other_authorized_committee_period")
      <*> (o .:? "transfers_to_other_authorized_committee_ytd")

-- | ToJSON CommitteeReportsHouseSenate
instance A.ToJSON CommitteeReportsHouseSenate where
  toJSON CommitteeReportsHouseSenate {..} =
   _omitNulls
      [ "aggregate_amount_personal_contributions_general" .= committeeReportsHouseSenateAggregateAmountPersonalContributionsGeneral
      , "aggregate_contributions_personal_funds_primary" .= committeeReportsHouseSenateAggregateContributionsPersonalFundsPrimary
      , "all_other_loans_period" .= committeeReportsHouseSenateAllOtherLoansPeriod
      , "all_other_loans_ytd" .= committeeReportsHouseSenateAllOtherLoansYtd
      , "amendment_chain" .= committeeReportsHouseSenateAmendmentChain
      , "amendment_indicator" .= committeeReportsHouseSenateAmendmentIndicator
      , "amendment_indicator_full" .= committeeReportsHouseSenateAmendmentIndicatorFull
      , "beginning_image_number" .= committeeReportsHouseSenateBeginningImageNumber
      , "candidate_contribution_period" .= committeeReportsHouseSenateCandidateContributionPeriod
      , "candidate_contribution_ytd" .= committeeReportsHouseSenateCandidateContributionYtd
      , "cash_on_hand_beginning_period" .= committeeReportsHouseSenateCashOnHandBeginningPeriod
      , "cash_on_hand_end_period" .= committeeReportsHouseSenateCashOnHandEndPeriod
      , "committee_id" .= committeeReportsHouseSenateCommitteeId
      , "committee_name" .= committeeReportsHouseSenateCommitteeName
      , "committee_type" .= committeeReportsHouseSenateCommitteeType
      , "coverage_end_date" .= committeeReportsHouseSenateCoverageEndDate
      , "coverage_start_date" .= committeeReportsHouseSenateCoverageStartDate
      , "csv_url" .= committeeReportsHouseSenateCsvUrl
      , "cycle" .= committeeReportsHouseSenateCycle
      , "debts_owed_by_committee" .= committeeReportsHouseSenateDebtsOwedByCommittee
      , "debts_owed_to_committee" .= committeeReportsHouseSenateDebtsOwedToCommittee
      , "document_description" .= committeeReportsHouseSenateDocumentDescription
      , "end_image_number" .= committeeReportsHouseSenateEndImageNumber
      , "fec_file_id" .= committeeReportsHouseSenateFecFileId
      , "fec_url" .= committeeReportsHouseSenateFecUrl
      , "file_number" .= committeeReportsHouseSenateFileNumber
      , "gross_receipt_authorized_committee_general" .= committeeReportsHouseSenateGrossReceiptAuthorizedCommitteeGeneral
      , "gross_receipt_authorized_committee_primary" .= committeeReportsHouseSenateGrossReceiptAuthorizedCommitteePrimary
      , "gross_receipt_minus_personal_contribution_general" .= committeeReportsHouseSenateGrossReceiptMinusPersonalContributionGeneral
      , "gross_receipt_minus_personal_contributions_primary" .= committeeReportsHouseSenateGrossReceiptMinusPersonalContributionsPrimary
      , "html_url" .= committeeReportsHouseSenateHtmlUrl
      , "individual_itemized_contributions_period" .= committeeReportsHouseSenateIndividualItemizedContributionsPeriod
      , "individual_itemized_contributions_ytd" .= committeeReportsHouseSenateIndividualItemizedContributionsYtd
      , "individual_unitemized_contributions_period" .= committeeReportsHouseSenateIndividualUnitemizedContributionsPeriod
      , "individual_unitemized_contributions_ytd" .= committeeReportsHouseSenateIndividualUnitemizedContributionsYtd
      , "is_amended" .= committeeReportsHouseSenateIsAmended
      , "loan_repayments_candidate_loans_period" .= committeeReportsHouseSenateLoanRepaymentsCandidateLoansPeriod
      , "loan_repayments_candidate_loans_ytd" .= committeeReportsHouseSenateLoanRepaymentsCandidateLoansYtd
      , "loan_repayments_other_loans_period" .= committeeReportsHouseSenateLoanRepaymentsOtherLoansPeriod
      , "loan_repayments_other_loans_ytd" .= committeeReportsHouseSenateLoanRepaymentsOtherLoansYtd
      , "loans_made_by_candidate_period" .= committeeReportsHouseSenateLoansMadeByCandidatePeriod
      , "loans_made_by_candidate_ytd" .= committeeReportsHouseSenateLoansMadeByCandidateYtd
      , "means_filed" .= committeeReportsHouseSenateMeansFiled
      , "most_recent" .= committeeReportsHouseSenateMostRecent
      , "most_recent_file_number" .= committeeReportsHouseSenateMostRecentFileNumber
      , "net_contributions_period" .= committeeReportsHouseSenateNetContributionsPeriod
      , "net_contributions_ytd" .= committeeReportsHouseSenateNetContributionsYtd
      , "net_operating_expenditures_period" .= committeeReportsHouseSenateNetOperatingExpendituresPeriod
      , "net_operating_expenditures_ytd" .= committeeReportsHouseSenateNetOperatingExpendituresYtd
      , "offsets_to_operating_expenditures_period" .= committeeReportsHouseSenateOffsetsToOperatingExpendituresPeriod
      , "offsets_to_operating_expenditures_ytd" .= committeeReportsHouseSenateOffsetsToOperatingExpendituresYtd
      , "operating_expenditures_period" .= committeeReportsHouseSenateOperatingExpendituresPeriod
      , "operating_expenditures_ytd" .= committeeReportsHouseSenateOperatingExpendituresYtd
      , "other_disbursements_period" .= committeeReportsHouseSenateOtherDisbursementsPeriod
      , "other_disbursements_ytd" .= committeeReportsHouseSenateOtherDisbursementsYtd
      , "other_political_committee_contributions_period" .= committeeReportsHouseSenateOtherPoliticalCommitteeContributionsPeriod
      , "other_political_committee_contributions_ytd" .= committeeReportsHouseSenateOtherPoliticalCommitteeContributionsYtd
      , "other_receipts_period" .= committeeReportsHouseSenateOtherReceiptsPeriod
      , "other_receipts_ytd" .= committeeReportsHouseSenateOtherReceiptsYtd
      , "pdf_url" .= committeeReportsHouseSenatePdfUrl
      , "political_party_committee_contributions_period" .= committeeReportsHouseSenatePoliticalPartyCommitteeContributionsPeriod
      , "political_party_committee_contributions_ytd" .= committeeReportsHouseSenatePoliticalPartyCommitteeContributionsYtd
      , "previous_file_number" .= committeeReportsHouseSenatePreviousFileNumber
      , "receipt_date" .= committeeReportsHouseSenateReceiptDate
      , "refunded_individual_contributions_period" .= committeeReportsHouseSenateRefundedIndividualContributionsPeriod
      , "refunded_individual_contributions_ytd" .= committeeReportsHouseSenateRefundedIndividualContributionsYtd
      , "refunded_other_political_committee_contributions_period" .= committeeReportsHouseSenateRefundedOtherPoliticalCommitteeContributionsPeriod
      , "refunded_other_political_committee_contributions_ytd" .= committeeReportsHouseSenateRefundedOtherPoliticalCommitteeContributionsYtd
      , "refunded_political_party_committee_contributions_period" .= committeeReportsHouseSenateRefundedPoliticalPartyCommitteeContributionsPeriod
      , "refunded_political_party_committee_contributions_ytd" .= committeeReportsHouseSenateRefundedPoliticalPartyCommitteeContributionsYtd
      , "refunds_total_contributions_col_total_ytd" .= committeeReportsHouseSenateRefundsTotalContributionsColTotalYtd
      , "report_form" .= committeeReportsHouseSenateReportForm
      , "report_type" .= committeeReportsHouseSenateReportType
      , "report_type_full" .= committeeReportsHouseSenateReportTypeFull
      , "report_year" .= committeeReportsHouseSenateReportYear
      , "subtotal_period" .= committeeReportsHouseSenateSubtotalPeriod
      , "total_contribution_refunds_col_total_period" .= committeeReportsHouseSenateTotalContributionRefundsColTotalPeriod
      , "total_contribution_refunds_period" .= committeeReportsHouseSenateTotalContributionRefundsPeriod
      , "total_contribution_refunds_ytd" .= committeeReportsHouseSenateTotalContributionRefundsYtd
      , "total_contributions_column_total_period" .= committeeReportsHouseSenateTotalContributionsColumnTotalPeriod
      , "total_contributions_period" .= committeeReportsHouseSenateTotalContributionsPeriod
      , "total_contributions_ytd" .= committeeReportsHouseSenateTotalContributionsYtd
      , "total_disbursements_period" .= committeeReportsHouseSenateTotalDisbursementsPeriod
      , "total_disbursements_ytd" .= committeeReportsHouseSenateTotalDisbursementsYtd
      , "total_individual_contributions_period" .= committeeReportsHouseSenateTotalIndividualContributionsPeriod
      , "total_individual_contributions_ytd" .= committeeReportsHouseSenateTotalIndividualContributionsYtd
      , "total_loan_repayments_made_period" .= committeeReportsHouseSenateTotalLoanRepaymentsMadePeriod
      , "total_loan_repayments_made_ytd" .= committeeReportsHouseSenateTotalLoanRepaymentsMadeYtd
      , "total_loans_received_period" .= committeeReportsHouseSenateTotalLoansReceivedPeriod
      , "total_loans_received_ytd" .= committeeReportsHouseSenateTotalLoansReceivedYtd
      , "total_offsets_to_operating_expenditures_period" .= committeeReportsHouseSenateTotalOffsetsToOperatingExpendituresPeriod
      , "total_offsets_to_operating_expenditures_ytd" .= committeeReportsHouseSenateTotalOffsetsToOperatingExpendituresYtd
      , "total_operating_expenditures_period" .= committeeReportsHouseSenateTotalOperatingExpendituresPeriod
      , "total_operating_expenditures_ytd" .= committeeReportsHouseSenateTotalOperatingExpendituresYtd
      , "total_receipts_period" .= committeeReportsHouseSenateTotalReceiptsPeriod
      , "total_receipts_ytd" .= committeeReportsHouseSenateTotalReceiptsYtd
      , "transfers_from_other_authorized_committee_period" .= committeeReportsHouseSenateTransfersFromOtherAuthorizedCommitteePeriod
      , "transfers_from_other_authorized_committee_ytd" .= committeeReportsHouseSenateTransfersFromOtherAuthorizedCommitteeYtd
      , "transfers_to_other_authorized_committee_period" .= committeeReportsHouseSenateTransfersToOtherAuthorizedCommitteePeriod
      , "transfers_to_other_authorized_committee_ytd" .= committeeReportsHouseSenateTransfersToOtherAuthorizedCommitteeYtd
      ]


-- | Construct a value of type 'CommitteeReportsHouseSenate' (by applying it's required fields, if any)
mkCommitteeReportsHouseSenate
  :: CommitteeReportsHouseSenate
mkCommitteeReportsHouseSenate =
  CommitteeReportsHouseSenate
  { committeeReportsHouseSenateAggregateAmountPersonalContributionsGeneral = Nothing
  , committeeReportsHouseSenateAggregateContributionsPersonalFundsPrimary = Nothing
  , committeeReportsHouseSenateAllOtherLoansPeriod = Nothing
  , committeeReportsHouseSenateAllOtherLoansYtd = Nothing
  , committeeReportsHouseSenateAmendmentChain = Nothing
  , committeeReportsHouseSenateAmendmentIndicator = Nothing
  , committeeReportsHouseSenateAmendmentIndicatorFull = Nothing
  , committeeReportsHouseSenateBeginningImageNumber = Nothing
  , committeeReportsHouseSenateCandidateContributionPeriod = Nothing
  , committeeReportsHouseSenateCandidateContributionYtd = Nothing
  , committeeReportsHouseSenateCashOnHandBeginningPeriod = Nothing
  , committeeReportsHouseSenateCashOnHandEndPeriod = Nothing
  , committeeReportsHouseSenateCommitteeId = Nothing
  , committeeReportsHouseSenateCommitteeName = Nothing
  , committeeReportsHouseSenateCommitteeType = Nothing
  , committeeReportsHouseSenateCoverageEndDate = Nothing
  , committeeReportsHouseSenateCoverageStartDate = Nothing
  , committeeReportsHouseSenateCsvUrl = Nothing
  , committeeReportsHouseSenateCycle = Nothing
  , committeeReportsHouseSenateDebtsOwedByCommittee = Nothing
  , committeeReportsHouseSenateDebtsOwedToCommittee = Nothing
  , committeeReportsHouseSenateDocumentDescription = Nothing
  , committeeReportsHouseSenateEndImageNumber = Nothing
  , committeeReportsHouseSenateFecFileId = Nothing
  , committeeReportsHouseSenateFecUrl = Nothing
  , committeeReportsHouseSenateFileNumber = Nothing
  , committeeReportsHouseSenateGrossReceiptAuthorizedCommitteeGeneral = Nothing
  , committeeReportsHouseSenateGrossReceiptAuthorizedCommitteePrimary = Nothing
  , committeeReportsHouseSenateGrossReceiptMinusPersonalContributionGeneral = Nothing
  , committeeReportsHouseSenateGrossReceiptMinusPersonalContributionsPrimary = Nothing
  , committeeReportsHouseSenateHtmlUrl = Nothing
  , committeeReportsHouseSenateIndividualItemizedContributionsPeriod = Nothing
  , committeeReportsHouseSenateIndividualItemizedContributionsYtd = Nothing
  , committeeReportsHouseSenateIndividualUnitemizedContributionsPeriod = Nothing
  , committeeReportsHouseSenateIndividualUnitemizedContributionsYtd = Nothing
  , committeeReportsHouseSenateIsAmended = Nothing
  , committeeReportsHouseSenateLoanRepaymentsCandidateLoansPeriod = Nothing
  , committeeReportsHouseSenateLoanRepaymentsCandidateLoansYtd = Nothing
  , committeeReportsHouseSenateLoanRepaymentsOtherLoansPeriod = Nothing
  , committeeReportsHouseSenateLoanRepaymentsOtherLoansYtd = Nothing
  , committeeReportsHouseSenateLoansMadeByCandidatePeriod = Nothing
  , committeeReportsHouseSenateLoansMadeByCandidateYtd = Nothing
  , committeeReportsHouseSenateMeansFiled = Nothing
  , committeeReportsHouseSenateMostRecent = Nothing
  , committeeReportsHouseSenateMostRecentFileNumber = Nothing
  , committeeReportsHouseSenateNetContributionsPeriod = Nothing
  , committeeReportsHouseSenateNetContributionsYtd = Nothing
  , committeeReportsHouseSenateNetOperatingExpendituresPeriod = Nothing
  , committeeReportsHouseSenateNetOperatingExpendituresYtd = Nothing
  , committeeReportsHouseSenateOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsHouseSenateOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsHouseSenateOperatingExpendituresPeriod = Nothing
  , committeeReportsHouseSenateOperatingExpendituresYtd = Nothing
  , committeeReportsHouseSenateOtherDisbursementsPeriod = Nothing
  , committeeReportsHouseSenateOtherDisbursementsYtd = Nothing
  , committeeReportsHouseSenateOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsHouseSenateOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsHouseSenateOtherReceiptsPeriod = Nothing
  , committeeReportsHouseSenateOtherReceiptsYtd = Nothing
  , committeeReportsHouseSenatePdfUrl = Nothing
  , committeeReportsHouseSenatePoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsHouseSenatePoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsHouseSenatePreviousFileNumber = Nothing
  , committeeReportsHouseSenateReceiptDate = Nothing
  , committeeReportsHouseSenateRefundedIndividualContributionsPeriod = Nothing
  , committeeReportsHouseSenateRefundedIndividualContributionsYtd = Nothing
  , committeeReportsHouseSenateRefundedOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsHouseSenateRefundedOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsHouseSenateRefundedPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsHouseSenateRefundedPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsHouseSenateRefundsTotalContributionsColTotalYtd = Nothing
  , committeeReportsHouseSenateReportForm = Nothing
  , committeeReportsHouseSenateReportType = Nothing
  , committeeReportsHouseSenateReportTypeFull = Nothing
  , committeeReportsHouseSenateReportYear = Nothing
  , committeeReportsHouseSenateSubtotalPeriod = Nothing
  , committeeReportsHouseSenateTotalContributionRefundsColTotalPeriod = Nothing
  , committeeReportsHouseSenateTotalContributionRefundsPeriod = Nothing
  , committeeReportsHouseSenateTotalContributionRefundsYtd = Nothing
  , committeeReportsHouseSenateTotalContributionsColumnTotalPeriod = Nothing
  , committeeReportsHouseSenateTotalContributionsPeriod = Nothing
  , committeeReportsHouseSenateTotalContributionsYtd = Nothing
  , committeeReportsHouseSenateTotalDisbursementsPeriod = Nothing
  , committeeReportsHouseSenateTotalDisbursementsYtd = Nothing
  , committeeReportsHouseSenateTotalIndividualContributionsPeriod = Nothing
  , committeeReportsHouseSenateTotalIndividualContributionsYtd = Nothing
  , committeeReportsHouseSenateTotalLoanRepaymentsMadePeriod = Nothing
  , committeeReportsHouseSenateTotalLoanRepaymentsMadeYtd = Nothing
  , committeeReportsHouseSenateTotalLoansReceivedPeriod = Nothing
  , committeeReportsHouseSenateTotalLoansReceivedYtd = Nothing
  , committeeReportsHouseSenateTotalOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsHouseSenateTotalOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsHouseSenateTotalOperatingExpendituresPeriod = Nothing
  , committeeReportsHouseSenateTotalOperatingExpendituresYtd = Nothing
  , committeeReportsHouseSenateTotalReceiptsPeriod = Nothing
  , committeeReportsHouseSenateTotalReceiptsYtd = Nothing
  , committeeReportsHouseSenateTransfersFromOtherAuthorizedCommitteePeriod = Nothing
  , committeeReportsHouseSenateTransfersFromOtherAuthorizedCommitteeYtd = Nothing
  , committeeReportsHouseSenateTransfersToOtherAuthorizedCommitteePeriod = Nothing
  , committeeReportsHouseSenateTransfersToOtherAuthorizedCommitteeYtd = Nothing
  }

-- ** CommitteeReportsHouseSenatePage
-- | CommitteeReportsHouseSenatePage
data CommitteeReportsHouseSenatePage = CommitteeReportsHouseSenatePage
  { committeeReportsHouseSenatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeReportsHouseSenatePageResults :: !(Maybe [CommitteeReportsHouseSenate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsHouseSenatePage
instance A.FromJSON CommitteeReportsHouseSenatePage where
  parseJSON = A.withObject "CommitteeReportsHouseSenatePage" $ \o ->
    CommitteeReportsHouseSenatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeReportsHouseSenatePage
instance A.ToJSON CommitteeReportsHouseSenatePage where
  toJSON CommitteeReportsHouseSenatePage {..} =
   _omitNulls
      [ "pagination" .= committeeReportsHouseSenatePagePagination
      , "results" .= committeeReportsHouseSenatePageResults
      ]


-- | Construct a value of type 'CommitteeReportsHouseSenatePage' (by applying it's required fields, if any)
mkCommitteeReportsHouseSenatePage
  :: CommitteeReportsHouseSenatePage
mkCommitteeReportsHouseSenatePage =
  CommitteeReportsHouseSenatePage
  { committeeReportsHouseSenatePagePagination = Nothing
  , committeeReportsHouseSenatePageResults = Nothing
  }

-- ** CommitteeReportsIEOnly
-- | CommitteeReportsIEOnly
data CommitteeReportsIEOnly = CommitteeReportsIEOnly
  { committeeReportsIEOnlyBeginningImageNumber           :: !(Maybe Text) -- ^ "beginning_image_number"
  , committeeReportsIEOnlyCommitteeId                    :: !(Maybe Text) -- ^ "committee_id"
  , committeeReportsIEOnlyCommitteeName                  :: !(Maybe Text) -- ^ "committee_name"
  , committeeReportsIEOnlyCommitteeType                  :: !(Maybe Text) -- ^ "committee_type"
  , committeeReportsIEOnlyCoverageEndDate                :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , committeeReportsIEOnlyCoverageStartDate              :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , committeeReportsIEOnlyCsvUrl                         :: !(Maybe Text) -- ^ "csv_url"
  , committeeReportsIEOnlyCycle                          :: !(Maybe Int) -- ^ "cycle"
  , committeeReportsIEOnlyDocumentDescription            :: !(Maybe Text) -- ^ "document_description"
  , committeeReportsIEOnlyEndImageNumber                 :: !(Maybe Text) -- ^ "end_image_number"
  , committeeReportsIEOnlyFecFileId                      :: !(Maybe Text) -- ^ "fec_file_id"
  , committeeReportsIEOnlyFecUrl                         :: !(Maybe Text) -- ^ "fec_url"
  , committeeReportsIEOnlyIndependentContributionsPeriod :: !(Maybe Double) -- ^ "independent_contributions_period"
  , committeeReportsIEOnlyIndependentExpendituresPeriod  :: !(Maybe Double) -- ^ "independent_expenditures_period"
  , committeeReportsIEOnlyIsAmended                      :: !(Maybe Bool) -- ^ "is_amended" - False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
  , committeeReportsIEOnlyMeansFiled                     :: !(Maybe Text) -- ^ "means_filed" - The method used to file with the FEC, either electronic or on paper.
  , committeeReportsIEOnlyPdfUrl                         :: !(Maybe Text) -- ^ "pdf_url"
  , committeeReportsIEOnlyReceiptDate                    :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , committeeReportsIEOnlyReportForm                     :: !(Maybe Text) -- ^ "report_form"
  , committeeReportsIEOnlyReportType                     :: !(Maybe Text) -- ^ "report_type"
  , committeeReportsIEOnlyReportTypeFull                 :: !(Maybe Text) -- ^ "report_type_full"
  , committeeReportsIEOnlyReportYear                     :: !(Maybe Int) -- ^ "report_year"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsIEOnly
instance A.FromJSON CommitteeReportsIEOnly where
  parseJSON = A.withObject "CommitteeReportsIEOnly" $ \o ->
    CommitteeReportsIEOnly
      <$> (o .:? "beginning_image_number")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "document_description")
      <*> (o .:? "end_image_number")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "independent_contributions_period")
      <*> (o .:? "independent_expenditures_period")
      <*> (o .:? "is_amended")
      <*> (o .:? "means_filed")
      <*> (o .:? "pdf_url")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report_form")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")

-- | ToJSON CommitteeReportsIEOnly
instance A.ToJSON CommitteeReportsIEOnly where
  toJSON CommitteeReportsIEOnly {..} =
   _omitNulls
      [ "beginning_image_number" .= committeeReportsIEOnlyBeginningImageNumber
      , "committee_id" .= committeeReportsIEOnlyCommitteeId
      , "committee_name" .= committeeReportsIEOnlyCommitteeName
      , "committee_type" .= committeeReportsIEOnlyCommitteeType
      , "coverage_end_date" .= committeeReportsIEOnlyCoverageEndDate
      , "coverage_start_date" .= committeeReportsIEOnlyCoverageStartDate
      , "csv_url" .= committeeReportsIEOnlyCsvUrl
      , "cycle" .= committeeReportsIEOnlyCycle
      , "document_description" .= committeeReportsIEOnlyDocumentDescription
      , "end_image_number" .= committeeReportsIEOnlyEndImageNumber
      , "fec_file_id" .= committeeReportsIEOnlyFecFileId
      , "fec_url" .= committeeReportsIEOnlyFecUrl
      , "independent_contributions_period" .= committeeReportsIEOnlyIndependentContributionsPeriod
      , "independent_expenditures_period" .= committeeReportsIEOnlyIndependentExpendituresPeriod
      , "is_amended" .= committeeReportsIEOnlyIsAmended
      , "means_filed" .= committeeReportsIEOnlyMeansFiled
      , "pdf_url" .= committeeReportsIEOnlyPdfUrl
      , "receipt_date" .= committeeReportsIEOnlyReceiptDate
      , "report_form" .= committeeReportsIEOnlyReportForm
      , "report_type" .= committeeReportsIEOnlyReportType
      , "report_type_full" .= committeeReportsIEOnlyReportTypeFull
      , "report_year" .= committeeReportsIEOnlyReportYear
      ]


-- | Construct a value of type 'CommitteeReportsIEOnly' (by applying it's required fields, if any)
mkCommitteeReportsIEOnly
  :: CommitteeReportsIEOnly
mkCommitteeReportsIEOnly =
  CommitteeReportsIEOnly
  { committeeReportsIEOnlyBeginningImageNumber = Nothing
  , committeeReportsIEOnlyCommitteeId = Nothing
  , committeeReportsIEOnlyCommitteeName = Nothing
  , committeeReportsIEOnlyCommitteeType = Nothing
  , committeeReportsIEOnlyCoverageEndDate = Nothing
  , committeeReportsIEOnlyCoverageStartDate = Nothing
  , committeeReportsIEOnlyCsvUrl = Nothing
  , committeeReportsIEOnlyCycle = Nothing
  , committeeReportsIEOnlyDocumentDescription = Nothing
  , committeeReportsIEOnlyEndImageNumber = Nothing
  , committeeReportsIEOnlyFecFileId = Nothing
  , committeeReportsIEOnlyFecUrl = Nothing
  , committeeReportsIEOnlyIndependentContributionsPeriod = Nothing
  , committeeReportsIEOnlyIndependentExpendituresPeriod = Nothing
  , committeeReportsIEOnlyIsAmended = Nothing
  , committeeReportsIEOnlyMeansFiled = Nothing
  , committeeReportsIEOnlyPdfUrl = Nothing
  , committeeReportsIEOnlyReceiptDate = Nothing
  , committeeReportsIEOnlyReportForm = Nothing
  , committeeReportsIEOnlyReportType = Nothing
  , committeeReportsIEOnlyReportTypeFull = Nothing
  , committeeReportsIEOnlyReportYear = Nothing
  }

-- ** CommitteeReportsIEOnlyPage
-- | CommitteeReportsIEOnlyPage
data CommitteeReportsIEOnlyPage = CommitteeReportsIEOnlyPage
  { committeeReportsIEOnlyPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeReportsIEOnlyPageResults    :: !(Maybe [CommitteeReportsIEOnly]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsIEOnlyPage
instance A.FromJSON CommitteeReportsIEOnlyPage where
  parseJSON = A.withObject "CommitteeReportsIEOnlyPage" $ \o ->
    CommitteeReportsIEOnlyPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeReportsIEOnlyPage
instance A.ToJSON CommitteeReportsIEOnlyPage where
  toJSON CommitteeReportsIEOnlyPage {..} =
   _omitNulls
      [ "pagination" .= committeeReportsIEOnlyPagePagination
      , "results" .= committeeReportsIEOnlyPageResults
      ]


-- | Construct a value of type 'CommitteeReportsIEOnlyPage' (by applying it's required fields, if any)
mkCommitteeReportsIEOnlyPage
  :: CommitteeReportsIEOnlyPage
mkCommitteeReportsIEOnlyPage =
  CommitteeReportsIEOnlyPage
  { committeeReportsIEOnlyPagePagination = Nothing
  , committeeReportsIEOnlyPageResults = Nothing
  }

-- ** CommitteeReportsPacParty
-- | CommitteeReportsPacParty
data CommitteeReportsPacParty = CommitteeReportsPacParty
  { committeeReportsPacPartyAllLoansReceivedPeriod :: !(Maybe Double) -- ^ "all_loans_received_period"
  , committeeReportsPacPartyAllLoansReceivedYtd :: !(Maybe Double) -- ^ "all_loans_received_ytd"
  , committeeReportsPacPartyAllocatedFederalElectionLevinSharePeriod :: !(Maybe Double) -- ^ "allocated_federal_election_levin_share_period"
  , committeeReportsPacPartyAmendmentChain :: !(Maybe [Double]) -- ^ "amendment_chain" -  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed.
  , committeeReportsPacPartyAmendmentIndicator :: !(Maybe Text) -- ^ "amendment_indicator"
  , committeeReportsPacPartyAmendmentIndicatorFull :: !(Maybe Text) -- ^ "amendment_indicator_full"
  , committeeReportsPacPartyBeginningImageNumber :: !(Maybe Text) -- ^ "beginning_image_number"
  , committeeReportsPacPartyCalendarYtd :: !(Maybe Int) -- ^ "calendar_ytd"
  , committeeReportsPacPartyCashOnHandBeginningCalendarYtd :: !(Maybe Double) -- ^ "cash_on_hand_beginning_calendar_ytd"
  , committeeReportsPacPartyCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period" - Balance for the committee at the start of the two-year period
  , committeeReportsPacPartyCashOnHandCloseYtd :: !(Maybe Double) -- ^ "cash_on_hand_close_ytd"
  , committeeReportsPacPartyCashOnHandEndPeriod :: !(Maybe Double) -- ^ "cash_on_hand_end_period" - Ending cash balance on the most recent filing
  , committeeReportsPacPartyCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeReportsPacPartyCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , committeeReportsPacPartyCommitteeType :: !(Maybe Text) -- ^ "committee_type"
  , committeeReportsPacPartyCoordinatedExpendituresByPartyCommitteePeriod :: !(Maybe Double) -- ^ "coordinated_expenditures_by_party_committee_period"
  , committeeReportsPacPartyCoordinatedExpendituresByPartyCommitteeYtd :: !(Maybe Double) -- ^ "coordinated_expenditures_by_party_committee_ytd"
  , committeeReportsPacPartyCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date" - Ending date of the reporting period
  , committeeReportsPacPartyCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , committeeReportsPacPartyCsvUrl :: !(Maybe Text) -- ^ "csv_url"
  , committeeReportsPacPartyCycle :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeReportsPacPartyDebtsOwedByCommittee :: !(Maybe Double) -- ^ "debts_owed_by_committee" - Debts owed by the committee
  , committeeReportsPacPartyDebtsOwedToCommittee :: !(Maybe Double) -- ^ "debts_owed_to_committee" - Debts owed to the committee
  , committeeReportsPacPartyDocumentDescription :: !(Maybe Text) -- ^ "document_description"
  , committeeReportsPacPartyEndImageNumber :: !(Maybe Text) -- ^ "end_image_number"
  , committeeReportsPacPartyFecFileId :: !(Maybe Text) -- ^ "fec_file_id"
  , committeeReportsPacPartyFecUrl :: !(Maybe Text) -- ^ "fec_url"
  , committeeReportsPacPartyFedCandidateCommitteeContributionRefundsYtd :: !(Maybe Double) -- ^ "fed_candidate_committee_contribution_refunds_ytd"
  , committeeReportsPacPartyFedCandidateCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "fed_candidate_committee_contributions_period"
  , committeeReportsPacPartyFedCandidateCommitteeContributionsYtd :: !(Maybe Double) -- ^ "fed_candidate_committee_contributions_ytd"
  , committeeReportsPacPartyFedCandidateContributionRefundsPeriod :: !(Maybe Double) -- ^ "fed_candidate_contribution_refunds_period"
  , committeeReportsPacPartyFileNumber :: !(Maybe Int) -- ^ "file_number"
  , committeeReportsPacPartyHtmlUrl :: !(Maybe Text) -- ^ "html_url" - HTML link to the filing.
  , committeeReportsPacPartyIndependentExpendituresPeriod :: !(Maybe Double) -- ^ "independent_expenditures_period"
  , committeeReportsPacPartyIndependentExpendituresYtd :: !(Maybe Double) -- ^ "independent_expenditures_ytd"
  , committeeReportsPacPartyIndividualItemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_itemized_contributions_period" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
  , committeeReportsPacPartyIndividualItemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_itemized_contributions_ytd" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
  , committeeReportsPacPartyIndividualUnitemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_unitemized_contributions_period" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
  , committeeReportsPacPartyIndividualUnitemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_unitemized_contributions_ytd" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
  , committeeReportsPacPartyIsAmended :: !(Maybe Bool) -- ^ "is_amended" - False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
  , committeeReportsPacPartyLoanRepaymentsMadePeriod :: !(Maybe Double) -- ^ "loan_repayments_made_period"
  , committeeReportsPacPartyLoanRepaymentsMadeYtd :: !(Maybe Double) -- ^ "loan_repayments_made_ytd"
  , committeeReportsPacPartyLoanRepaymentsReceivedPeriod :: !(Maybe Double) -- ^ "loan_repayments_received_period"
  , committeeReportsPacPartyLoanRepaymentsReceivedYtd :: !(Maybe Double) -- ^ "loan_repayments_received_ytd"
  , committeeReportsPacPartyLoansMadePeriod :: !(Maybe Double) -- ^ "loans_made_period"
  , committeeReportsPacPartyLoansMadeYtd :: !(Maybe Double) -- ^ "loans_made_ytd"
  , committeeReportsPacPartyMeansFiled :: !(Maybe Text) -- ^ "means_filed" - The method used to file with the FEC, either electronic or on paper.
  , committeeReportsPacPartyMostRecent :: !(Maybe Bool) -- ^ "most_recent"
  , committeeReportsPacPartyMostRecentFileNumber :: !(Maybe Double) -- ^ "most_recent_file_number"
  , committeeReportsPacPartyNetContributionsPeriod :: !(Maybe Double) -- ^ "net_contributions_period"
  , committeeReportsPacPartyNetContributionsYtd :: !(Maybe Double) -- ^ "net_contributions_ytd"
  , committeeReportsPacPartyNetOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "net_operating_expenditures_period"
  , committeeReportsPacPartyNetOperatingExpendituresYtd :: !(Maybe Double) -- ^ "net_operating_expenditures_ytd"
  , committeeReportsPacPartyNonAllocatedFedElectionActivityPeriod :: !(Maybe Double) -- ^ "non_allocated_fed_election_activity_period"
  , committeeReportsPacPartyNonAllocatedFedElectionActivityYtd :: !(Maybe Double) -- ^ "non_allocated_fed_election_activity_ytd"
  , committeeReportsPacPartyNonfedShareAllocatedDisbursementsPeriod :: !(Maybe Double) -- ^ "nonfed_share_allocated_disbursements_period"
  , committeeReportsPacPartyOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_period" - Offsets to operating expenditures total for the reporting period
  , committeeReportsPacPartyOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_ytd" - Offsets to operating expenditures total for the year to date
  , committeeReportsPacPartyOtherDisbursementsPeriod :: !(Maybe Double) -- ^ "other_disbursements_period" - Other disbursements total for the reporting period
  , committeeReportsPacPartyOtherDisbursementsYtd :: !(Maybe Double) -- ^ "other_disbursements_ytd" - Other disbursements total for the year to date
  , committeeReportsPacPartyOtherFedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "other_fed_operating_expenditures_period"
  , committeeReportsPacPartyOtherFedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "other_fed_operating_expenditures_ytd"
  , committeeReportsPacPartyOtherFedReceiptsPeriod :: !(Maybe Double) -- ^ "other_fed_receipts_period"
  , committeeReportsPacPartyOtherFedReceiptsYtd :: !(Maybe Double) -- ^ "other_fed_receipts_ytd"
  , committeeReportsPacPartyOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "other_political_committee_contributions_period" - Other committees contributions total for the reporting period
  , committeeReportsPacPartyOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "other_political_committee_contributions_ytd" - Other committees contributions total for the year to date
  , committeeReportsPacPartyPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeReportsPacPartyPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "political_party_committee_contributions_period" - Party committees contributions total for the reporting period
  , committeeReportsPacPartyPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "political_party_committee_contributions_ytd" - Party committees contributions total for the year to date
  , committeeReportsPacPartyPreviousFileNumber :: !(Maybe Double) -- ^ "previous_file_number"
  , committeeReportsPacPartyReceiptDate :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , committeeReportsPacPartyRefundedIndividualContributionsPeriod :: !(Maybe Double) -- ^ "refunded_individual_contributions_period" - Individual refunds total for the reporting period
  , committeeReportsPacPartyRefundedIndividualContributionsYtd :: !(Maybe Double) -- ^ "refunded_individual_contributions_ytd" - Individual refunds total for the year to date
  , committeeReportsPacPartyRefundedOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_period" - Other committee refunds total for the reporting period
  , committeeReportsPacPartyRefundedOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_ytd" - Other committee refunds total for the year to date
  , committeeReportsPacPartyRefundedPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_period" - Political party refunds total for the reporting period
  , committeeReportsPacPartyRefundedPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_ytd" - Political party refunds total for the year to date
  , committeeReportsPacPartyReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeReportsPacPartyReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsPacPartyReportTypeFull :: !(Maybe Text) -- ^ "report_type_full" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsPacPartyReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , committeeReportsPacPartySharedFedActivityNonfedYtd :: !(Maybe Double) -- ^ "shared_fed_activity_nonfed_ytd"
  , committeeReportsPacPartySharedFedActivityPeriod :: !(Maybe Double) -- ^ "shared_fed_activity_period"
  , committeeReportsPacPartySharedFedActivityYtd :: !(Maybe Double) -- ^ "shared_fed_activity_ytd"
  , committeeReportsPacPartySharedFedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "shared_fed_operating_expenditures_period"
  , committeeReportsPacPartySharedFedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "shared_fed_operating_expenditures_ytd"
  , committeeReportsPacPartySharedNonfedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "shared_nonfed_operating_expenditures_period"
  , committeeReportsPacPartySharedNonfedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "shared_nonfed_operating_expenditures_ytd"
  , committeeReportsPacPartySubtotalSummaryPagePeriod :: !(Maybe Double) -- ^ "subtotal_summary_page_period"
  , committeeReportsPacPartySubtotalSummaryYtd :: !(Maybe Double) -- ^ "subtotal_summary_ytd"
  , committeeReportsPacPartyTotalContributionRefundsPeriod :: !(Maybe Double) -- ^ "total_contribution_refunds_period" - Total contribution refunds total for the reporting period
  , committeeReportsPacPartyTotalContributionRefundsYtd :: !(Maybe Double) -- ^ "total_contribution_refunds_ytd" - Total contribution refunds total for the year to date
  , committeeReportsPacPartyTotalContributionsPeriod :: !(Maybe Double) -- ^ "total_contributions_period" - Contribution total for the reporting period
  , committeeReportsPacPartyTotalContributionsYtd :: !(Maybe Double) -- ^ "total_contributions_ytd" - Contribution total for the year to date
  , committeeReportsPacPartyTotalDisbursementsPeriod :: !(Maybe Double) -- ^ "total_disbursements_period" - Disbursements total for the reporting period
  , committeeReportsPacPartyTotalDisbursementsYtd :: !(Maybe Double) -- ^ "total_disbursements_ytd" - Disbursements total for the year to date
  , committeeReportsPacPartyTotalFedDisbursementsPeriod :: !(Maybe Double) -- ^ "total_fed_disbursements_period"
  , committeeReportsPacPartyTotalFedDisbursementsYtd :: !(Maybe Double) -- ^ "total_fed_disbursements_ytd"
  , committeeReportsPacPartyTotalFedElectionActivityPeriod :: !(Maybe Double) -- ^ "total_fed_election_activity_period"
  , committeeReportsPacPartyTotalFedElectionActivityYtd :: !(Maybe Double) -- ^ "total_fed_election_activity_ytd"
  , committeeReportsPacPartyTotalFedOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_fed_operating_expenditures_period"
  , committeeReportsPacPartyTotalFedOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_fed_operating_expenditures_ytd"
  , committeeReportsPacPartyTotalFedReceiptsPeriod :: !(Maybe Double) -- ^ "total_fed_receipts_period"
  , committeeReportsPacPartyTotalFedReceiptsYtd :: !(Maybe Double) -- ^ "total_fed_receipts_ytd"
  , committeeReportsPacPartyTotalIndividualContributionsPeriod :: !(Maybe Double) -- ^ "total_individual_contributions_period" - Individual contributions total for the reporting period
  , committeeReportsPacPartyTotalIndividualContributionsYtd :: !(Maybe Double) -- ^ "total_individual_contributions_ytd" - Individual contributions total for the year to date
  , committeeReportsPacPartyTotalNonfedTransfersPeriod :: !(Maybe Double) -- ^ "total_nonfed_transfers_period"
  , committeeReportsPacPartyTotalNonfedTransfersYtd :: !(Maybe Double) -- ^ "total_nonfed_transfers_ytd"
  , committeeReportsPacPartyTotalOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_operating_expenditures_period"
  , committeeReportsPacPartyTotalOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_operating_expenditures_ytd"
  , committeeReportsPacPartyTotalReceiptsPeriod :: !(Maybe Double) -- ^ "total_receipts_period" - Anything of value (money, goods, services or property) received by a political committee total for the reporting period
  , committeeReportsPacPartyTotalReceiptsYtd :: !(Maybe Double) -- ^ "total_receipts_ytd" - Anything of value (money, goods, services or property) received by a political committee total for the year to date
  , committeeReportsPacPartyTransfersFromAffiliatedPartyPeriod :: !(Maybe Double) -- ^ "transfers_from_affiliated_party_period"
  , committeeReportsPacPartyTransfersFromAffiliatedPartyYtd :: !(Maybe Double) -- ^ "transfers_from_affiliated_party_ytd"
  , committeeReportsPacPartyTransfersFromNonfedAccountPeriod :: !(Maybe Double) -- ^ "transfers_from_nonfed_account_period"
  , committeeReportsPacPartyTransfersFromNonfedAccountYtd :: !(Maybe Double) -- ^ "transfers_from_nonfed_account_ytd"
  , committeeReportsPacPartyTransfersFromNonfedLevinPeriod :: !(Maybe Double) -- ^ "transfers_from_nonfed_levin_period"
  , committeeReportsPacPartyTransfersFromNonfedLevinYtd :: !(Maybe Double) -- ^ "transfers_from_nonfed_levin_ytd"
  , committeeReportsPacPartyTransfersToAffiliatedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_to_affiliated_committee_period"
  , committeeReportsPacPartyTransfersToAffilitatedCommitteesYtd :: !(Maybe Double) -- ^ "transfers_to_affilitated_committees_ytd"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsPacParty
instance A.FromJSON CommitteeReportsPacParty where
  parseJSON = A.withObject "CommitteeReportsPacParty" $ \o ->
    CommitteeReportsPacParty
      <$> (o .:? "all_loans_received_period")
      <*> (o .:? "all_loans_received_ytd")
      <*> (o .:? "allocated_federal_election_levin_share_period")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_indicator_full")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "calendar_ytd")
      <*> (o .:? "cash_on_hand_beginning_calendar_ytd")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "cash_on_hand_close_ytd")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "coordinated_expenditures_by_party_committee_period")
      <*> (o .:? "coordinated_expenditures_by_party_committee_ytd")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "debts_owed_to_committee")
      <*> (o .:? "document_description")
      <*> (o .:? "end_image_number")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "fed_candidate_committee_contribution_refunds_ytd")
      <*> (o .:? "fed_candidate_committee_contributions_period")
      <*> (o .:? "fed_candidate_committee_contributions_ytd")
      <*> (o .:? "fed_candidate_contribution_refunds_period")
      <*> (o .:? "file_number")
      <*> (o .:? "html_url")
      <*> (o .:? "independent_expenditures_period")
      <*> (o .:? "independent_expenditures_ytd")
      <*> (o .:? "individual_itemized_contributions_period")
      <*> (o .:? "individual_itemized_contributions_ytd")
      <*> (o .:? "individual_unitemized_contributions_period")
      <*> (o .:? "individual_unitemized_contributions_ytd")
      <*> (o .:? "is_amended")
      <*> (o .:? "loan_repayments_made_period")
      <*> (o .:? "loan_repayments_made_ytd")
      <*> (o .:? "loan_repayments_received_period")
      <*> (o .:? "loan_repayments_received_ytd")
      <*> (o .:? "loans_made_period")
      <*> (o .:? "loans_made_ytd")
      <*> (o .:? "means_filed")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_file_number")
      <*> (o .:? "net_contributions_period")
      <*> (o .:? "net_contributions_ytd")
      <*> (o .:? "net_operating_expenditures_period")
      <*> (o .:? "net_operating_expenditures_ytd")
      <*> (o .:? "non_allocated_fed_election_activity_period")
      <*> (o .:? "non_allocated_fed_election_activity_ytd")
      <*> (o .:? "nonfed_share_allocated_disbursements_period")
      <*> (o .:? "offsets_to_operating_expenditures_period")
      <*> (o .:? "offsets_to_operating_expenditures_ytd")
      <*> (o .:? "other_disbursements_period")
      <*> (o .:? "other_disbursements_ytd")
      <*> (o .:? "other_fed_operating_expenditures_period")
      <*> (o .:? "other_fed_operating_expenditures_ytd")
      <*> (o .:? "other_fed_receipts_period")
      <*> (o .:? "other_fed_receipts_ytd")
      <*> (o .:? "other_political_committee_contributions_period")
      <*> (o .:? "other_political_committee_contributions_ytd")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions_period")
      <*> (o .:? "political_party_committee_contributions_ytd")
      <*> (o .:? "previous_file_number")
      <*> (o .:? "receipt_date")
      <*> (o .:? "refunded_individual_contributions_period")
      <*> (o .:? "refunded_individual_contributions_ytd")
      <*> (o .:? "refunded_other_political_committee_contributions_period")
      <*> (o .:? "refunded_other_political_committee_contributions_ytd")
      <*> (o .:? "refunded_political_party_committee_contributions_period")
      <*> (o .:? "refunded_political_party_committee_contributions_ytd")
      <*> (o .:? "report_form")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")
      <*> (o .:? "shared_fed_activity_nonfed_ytd")
      <*> (o .:? "shared_fed_activity_period")
      <*> (o .:? "shared_fed_activity_ytd")
      <*> (o .:? "shared_fed_operating_expenditures_period")
      <*> (o .:? "shared_fed_operating_expenditures_ytd")
      <*> (o .:? "shared_nonfed_operating_expenditures_period")
      <*> (o .:? "shared_nonfed_operating_expenditures_ytd")
      <*> (o .:? "subtotal_summary_page_period")
      <*> (o .:? "subtotal_summary_ytd")
      <*> (o .:? "total_contribution_refunds_period")
      <*> (o .:? "total_contribution_refunds_ytd")
      <*> (o .:? "total_contributions_period")
      <*> (o .:? "total_contributions_ytd")
      <*> (o .:? "total_disbursements_period")
      <*> (o .:? "total_disbursements_ytd")
      <*> (o .:? "total_fed_disbursements_period")
      <*> (o .:? "total_fed_disbursements_ytd")
      <*> (o .:? "total_fed_election_activity_period")
      <*> (o .:? "total_fed_election_activity_ytd")
      <*> (o .:? "total_fed_operating_expenditures_period")
      <*> (o .:? "total_fed_operating_expenditures_ytd")
      <*> (o .:? "total_fed_receipts_period")
      <*> (o .:? "total_fed_receipts_ytd")
      <*> (o .:? "total_individual_contributions_period")
      <*> (o .:? "total_individual_contributions_ytd")
      <*> (o .:? "total_nonfed_transfers_period")
      <*> (o .:? "total_nonfed_transfers_ytd")
      <*> (o .:? "total_operating_expenditures_period")
      <*> (o .:? "total_operating_expenditures_ytd")
      <*> (o .:? "total_receipts_period")
      <*> (o .:? "total_receipts_ytd")
      <*> (o .:? "transfers_from_affiliated_party_period")
      <*> (o .:? "transfers_from_affiliated_party_ytd")
      <*> (o .:? "transfers_from_nonfed_account_period")
      <*> (o .:? "transfers_from_nonfed_account_ytd")
      <*> (o .:? "transfers_from_nonfed_levin_period")
      <*> (o .:? "transfers_from_nonfed_levin_ytd")
      <*> (o .:? "transfers_to_affiliated_committee_period")
      <*> (o .:? "transfers_to_affilitated_committees_ytd")

-- | ToJSON CommitteeReportsPacParty
instance A.ToJSON CommitteeReportsPacParty where
  toJSON CommitteeReportsPacParty {..} =
   _omitNulls
      [ "all_loans_received_period" .= committeeReportsPacPartyAllLoansReceivedPeriod
      , "all_loans_received_ytd" .= committeeReportsPacPartyAllLoansReceivedYtd
      , "allocated_federal_election_levin_share_period" .= committeeReportsPacPartyAllocatedFederalElectionLevinSharePeriod
      , "amendment_chain" .= committeeReportsPacPartyAmendmentChain
      , "amendment_indicator" .= committeeReportsPacPartyAmendmentIndicator
      , "amendment_indicator_full" .= committeeReportsPacPartyAmendmentIndicatorFull
      , "beginning_image_number" .= committeeReportsPacPartyBeginningImageNumber
      , "calendar_ytd" .= committeeReportsPacPartyCalendarYtd
      , "cash_on_hand_beginning_calendar_ytd" .= committeeReportsPacPartyCashOnHandBeginningCalendarYtd
      , "cash_on_hand_beginning_period" .= committeeReportsPacPartyCashOnHandBeginningPeriod
      , "cash_on_hand_close_ytd" .= committeeReportsPacPartyCashOnHandCloseYtd
      , "cash_on_hand_end_period" .= committeeReportsPacPartyCashOnHandEndPeriod
      , "committee_id" .= committeeReportsPacPartyCommitteeId
      , "committee_name" .= committeeReportsPacPartyCommitteeName
      , "committee_type" .= committeeReportsPacPartyCommitteeType
      , "coordinated_expenditures_by_party_committee_period" .= committeeReportsPacPartyCoordinatedExpendituresByPartyCommitteePeriod
      , "coordinated_expenditures_by_party_committee_ytd" .= committeeReportsPacPartyCoordinatedExpendituresByPartyCommitteeYtd
      , "coverage_end_date" .= committeeReportsPacPartyCoverageEndDate
      , "coverage_start_date" .= committeeReportsPacPartyCoverageStartDate
      , "csv_url" .= committeeReportsPacPartyCsvUrl
      , "cycle" .= committeeReportsPacPartyCycle
      , "debts_owed_by_committee" .= committeeReportsPacPartyDebtsOwedByCommittee
      , "debts_owed_to_committee" .= committeeReportsPacPartyDebtsOwedToCommittee
      , "document_description" .= committeeReportsPacPartyDocumentDescription
      , "end_image_number" .= committeeReportsPacPartyEndImageNumber
      , "fec_file_id" .= committeeReportsPacPartyFecFileId
      , "fec_url" .= committeeReportsPacPartyFecUrl
      , "fed_candidate_committee_contribution_refunds_ytd" .= committeeReportsPacPartyFedCandidateCommitteeContributionRefundsYtd
      , "fed_candidate_committee_contributions_period" .= committeeReportsPacPartyFedCandidateCommitteeContributionsPeriod
      , "fed_candidate_committee_contributions_ytd" .= committeeReportsPacPartyFedCandidateCommitteeContributionsYtd
      , "fed_candidate_contribution_refunds_period" .= committeeReportsPacPartyFedCandidateContributionRefundsPeriod
      , "file_number" .= committeeReportsPacPartyFileNumber
      , "html_url" .= committeeReportsPacPartyHtmlUrl
      , "independent_expenditures_period" .= committeeReportsPacPartyIndependentExpendituresPeriod
      , "independent_expenditures_ytd" .= committeeReportsPacPartyIndependentExpendituresYtd
      , "individual_itemized_contributions_period" .= committeeReportsPacPartyIndividualItemizedContributionsPeriod
      , "individual_itemized_contributions_ytd" .= committeeReportsPacPartyIndividualItemizedContributionsYtd
      , "individual_unitemized_contributions_period" .= committeeReportsPacPartyIndividualUnitemizedContributionsPeriod
      , "individual_unitemized_contributions_ytd" .= committeeReportsPacPartyIndividualUnitemizedContributionsYtd
      , "is_amended" .= committeeReportsPacPartyIsAmended
      , "loan_repayments_made_period" .= committeeReportsPacPartyLoanRepaymentsMadePeriod
      , "loan_repayments_made_ytd" .= committeeReportsPacPartyLoanRepaymentsMadeYtd
      , "loan_repayments_received_period" .= committeeReportsPacPartyLoanRepaymentsReceivedPeriod
      , "loan_repayments_received_ytd" .= committeeReportsPacPartyLoanRepaymentsReceivedYtd
      , "loans_made_period" .= committeeReportsPacPartyLoansMadePeriod
      , "loans_made_ytd" .= committeeReportsPacPartyLoansMadeYtd
      , "means_filed" .= committeeReportsPacPartyMeansFiled
      , "most_recent" .= committeeReportsPacPartyMostRecent
      , "most_recent_file_number" .= committeeReportsPacPartyMostRecentFileNumber
      , "net_contributions_period" .= committeeReportsPacPartyNetContributionsPeriod
      , "net_contributions_ytd" .= committeeReportsPacPartyNetContributionsYtd
      , "net_operating_expenditures_period" .= committeeReportsPacPartyNetOperatingExpendituresPeriod
      , "net_operating_expenditures_ytd" .= committeeReportsPacPartyNetOperatingExpendituresYtd
      , "non_allocated_fed_election_activity_period" .= committeeReportsPacPartyNonAllocatedFedElectionActivityPeriod
      , "non_allocated_fed_election_activity_ytd" .= committeeReportsPacPartyNonAllocatedFedElectionActivityYtd
      , "nonfed_share_allocated_disbursements_period" .= committeeReportsPacPartyNonfedShareAllocatedDisbursementsPeriod
      , "offsets_to_operating_expenditures_period" .= committeeReportsPacPartyOffsetsToOperatingExpendituresPeriod
      , "offsets_to_operating_expenditures_ytd" .= committeeReportsPacPartyOffsetsToOperatingExpendituresYtd
      , "other_disbursements_period" .= committeeReportsPacPartyOtherDisbursementsPeriod
      , "other_disbursements_ytd" .= committeeReportsPacPartyOtherDisbursementsYtd
      , "other_fed_operating_expenditures_period" .= committeeReportsPacPartyOtherFedOperatingExpendituresPeriod
      , "other_fed_operating_expenditures_ytd" .= committeeReportsPacPartyOtherFedOperatingExpendituresYtd
      , "other_fed_receipts_period" .= committeeReportsPacPartyOtherFedReceiptsPeriod
      , "other_fed_receipts_ytd" .= committeeReportsPacPartyOtherFedReceiptsYtd
      , "other_political_committee_contributions_period" .= committeeReportsPacPartyOtherPoliticalCommitteeContributionsPeriod
      , "other_political_committee_contributions_ytd" .= committeeReportsPacPartyOtherPoliticalCommitteeContributionsYtd
      , "pdf_url" .= committeeReportsPacPartyPdfUrl
      , "political_party_committee_contributions_period" .= committeeReportsPacPartyPoliticalPartyCommitteeContributionsPeriod
      , "political_party_committee_contributions_ytd" .= committeeReportsPacPartyPoliticalPartyCommitteeContributionsYtd
      , "previous_file_number" .= committeeReportsPacPartyPreviousFileNumber
      , "receipt_date" .= committeeReportsPacPartyReceiptDate
      , "refunded_individual_contributions_period" .= committeeReportsPacPartyRefundedIndividualContributionsPeriod
      , "refunded_individual_contributions_ytd" .= committeeReportsPacPartyRefundedIndividualContributionsYtd
      , "refunded_other_political_committee_contributions_period" .= committeeReportsPacPartyRefundedOtherPoliticalCommitteeContributionsPeriod
      , "refunded_other_political_committee_contributions_ytd" .= committeeReportsPacPartyRefundedOtherPoliticalCommitteeContributionsYtd
      , "refunded_political_party_committee_contributions_period" .= committeeReportsPacPartyRefundedPoliticalPartyCommitteeContributionsPeriod
      , "refunded_political_party_committee_contributions_ytd" .= committeeReportsPacPartyRefundedPoliticalPartyCommitteeContributionsYtd
      , "report_form" .= committeeReportsPacPartyReportForm
      , "report_type" .= committeeReportsPacPartyReportType
      , "report_type_full" .= committeeReportsPacPartyReportTypeFull
      , "report_year" .= committeeReportsPacPartyReportYear
      , "shared_fed_activity_nonfed_ytd" .= committeeReportsPacPartySharedFedActivityNonfedYtd
      , "shared_fed_activity_period" .= committeeReportsPacPartySharedFedActivityPeriod
      , "shared_fed_activity_ytd" .= committeeReportsPacPartySharedFedActivityYtd
      , "shared_fed_operating_expenditures_period" .= committeeReportsPacPartySharedFedOperatingExpendituresPeriod
      , "shared_fed_operating_expenditures_ytd" .= committeeReportsPacPartySharedFedOperatingExpendituresYtd
      , "shared_nonfed_operating_expenditures_period" .= committeeReportsPacPartySharedNonfedOperatingExpendituresPeriod
      , "shared_nonfed_operating_expenditures_ytd" .= committeeReportsPacPartySharedNonfedOperatingExpendituresYtd
      , "subtotal_summary_page_period" .= committeeReportsPacPartySubtotalSummaryPagePeriod
      , "subtotal_summary_ytd" .= committeeReportsPacPartySubtotalSummaryYtd
      , "total_contribution_refunds_period" .= committeeReportsPacPartyTotalContributionRefundsPeriod
      , "total_contribution_refunds_ytd" .= committeeReportsPacPartyTotalContributionRefundsYtd
      , "total_contributions_period" .= committeeReportsPacPartyTotalContributionsPeriod
      , "total_contributions_ytd" .= committeeReportsPacPartyTotalContributionsYtd
      , "total_disbursements_period" .= committeeReportsPacPartyTotalDisbursementsPeriod
      , "total_disbursements_ytd" .= committeeReportsPacPartyTotalDisbursementsYtd
      , "total_fed_disbursements_period" .= committeeReportsPacPartyTotalFedDisbursementsPeriod
      , "total_fed_disbursements_ytd" .= committeeReportsPacPartyTotalFedDisbursementsYtd
      , "total_fed_election_activity_period" .= committeeReportsPacPartyTotalFedElectionActivityPeriod
      , "total_fed_election_activity_ytd" .= committeeReportsPacPartyTotalFedElectionActivityYtd
      , "total_fed_operating_expenditures_period" .= committeeReportsPacPartyTotalFedOperatingExpendituresPeriod
      , "total_fed_operating_expenditures_ytd" .= committeeReportsPacPartyTotalFedOperatingExpendituresYtd
      , "total_fed_receipts_period" .= committeeReportsPacPartyTotalFedReceiptsPeriod
      , "total_fed_receipts_ytd" .= committeeReportsPacPartyTotalFedReceiptsYtd
      , "total_individual_contributions_period" .= committeeReportsPacPartyTotalIndividualContributionsPeriod
      , "total_individual_contributions_ytd" .= committeeReportsPacPartyTotalIndividualContributionsYtd
      , "total_nonfed_transfers_period" .= committeeReportsPacPartyTotalNonfedTransfersPeriod
      , "total_nonfed_transfers_ytd" .= committeeReportsPacPartyTotalNonfedTransfersYtd
      , "total_operating_expenditures_period" .= committeeReportsPacPartyTotalOperatingExpendituresPeriod
      , "total_operating_expenditures_ytd" .= committeeReportsPacPartyTotalOperatingExpendituresYtd
      , "total_receipts_period" .= committeeReportsPacPartyTotalReceiptsPeriod
      , "total_receipts_ytd" .= committeeReportsPacPartyTotalReceiptsYtd
      , "transfers_from_affiliated_party_period" .= committeeReportsPacPartyTransfersFromAffiliatedPartyPeriod
      , "transfers_from_affiliated_party_ytd" .= committeeReportsPacPartyTransfersFromAffiliatedPartyYtd
      , "transfers_from_nonfed_account_period" .= committeeReportsPacPartyTransfersFromNonfedAccountPeriod
      , "transfers_from_nonfed_account_ytd" .= committeeReportsPacPartyTransfersFromNonfedAccountYtd
      , "transfers_from_nonfed_levin_period" .= committeeReportsPacPartyTransfersFromNonfedLevinPeriod
      , "transfers_from_nonfed_levin_ytd" .= committeeReportsPacPartyTransfersFromNonfedLevinYtd
      , "transfers_to_affiliated_committee_period" .= committeeReportsPacPartyTransfersToAffiliatedCommitteePeriod
      , "transfers_to_affilitated_committees_ytd" .= committeeReportsPacPartyTransfersToAffilitatedCommitteesYtd
      ]


-- | Construct a value of type 'CommitteeReportsPacParty' (by applying it's required fields, if any)
mkCommitteeReportsPacParty
  :: CommitteeReportsPacParty
mkCommitteeReportsPacParty =
  CommitteeReportsPacParty
  { committeeReportsPacPartyAllLoansReceivedPeriod = Nothing
  , committeeReportsPacPartyAllLoansReceivedYtd = Nothing
  , committeeReportsPacPartyAllocatedFederalElectionLevinSharePeriod = Nothing
  , committeeReportsPacPartyAmendmentChain = Nothing
  , committeeReportsPacPartyAmendmentIndicator = Nothing
  , committeeReportsPacPartyAmendmentIndicatorFull = Nothing
  , committeeReportsPacPartyBeginningImageNumber = Nothing
  , committeeReportsPacPartyCalendarYtd = Nothing
  , committeeReportsPacPartyCashOnHandBeginningCalendarYtd = Nothing
  , committeeReportsPacPartyCashOnHandBeginningPeriod = Nothing
  , committeeReportsPacPartyCashOnHandCloseYtd = Nothing
  , committeeReportsPacPartyCashOnHandEndPeriod = Nothing
  , committeeReportsPacPartyCommitteeId = Nothing
  , committeeReportsPacPartyCommitteeName = Nothing
  , committeeReportsPacPartyCommitteeType = Nothing
  , committeeReportsPacPartyCoordinatedExpendituresByPartyCommitteePeriod = Nothing
  , committeeReportsPacPartyCoordinatedExpendituresByPartyCommitteeYtd = Nothing
  , committeeReportsPacPartyCoverageEndDate = Nothing
  , committeeReportsPacPartyCoverageStartDate = Nothing
  , committeeReportsPacPartyCsvUrl = Nothing
  , committeeReportsPacPartyCycle = Nothing
  , committeeReportsPacPartyDebtsOwedByCommittee = Nothing
  , committeeReportsPacPartyDebtsOwedToCommittee = Nothing
  , committeeReportsPacPartyDocumentDescription = Nothing
  , committeeReportsPacPartyEndImageNumber = Nothing
  , committeeReportsPacPartyFecFileId = Nothing
  , committeeReportsPacPartyFecUrl = Nothing
  , committeeReportsPacPartyFedCandidateCommitteeContributionRefundsYtd = Nothing
  , committeeReportsPacPartyFedCandidateCommitteeContributionsPeriod = Nothing
  , committeeReportsPacPartyFedCandidateCommitteeContributionsYtd = Nothing
  , committeeReportsPacPartyFedCandidateContributionRefundsPeriod = Nothing
  , committeeReportsPacPartyFileNumber = Nothing
  , committeeReportsPacPartyHtmlUrl = Nothing
  , committeeReportsPacPartyIndependentExpendituresPeriod = Nothing
  , committeeReportsPacPartyIndependentExpendituresYtd = Nothing
  , committeeReportsPacPartyIndividualItemizedContributionsPeriod = Nothing
  , committeeReportsPacPartyIndividualItemizedContributionsYtd = Nothing
  , committeeReportsPacPartyIndividualUnitemizedContributionsPeriod = Nothing
  , committeeReportsPacPartyIndividualUnitemizedContributionsYtd = Nothing
  , committeeReportsPacPartyIsAmended = Nothing
  , committeeReportsPacPartyLoanRepaymentsMadePeriod = Nothing
  , committeeReportsPacPartyLoanRepaymentsMadeYtd = Nothing
  , committeeReportsPacPartyLoanRepaymentsReceivedPeriod = Nothing
  , committeeReportsPacPartyLoanRepaymentsReceivedYtd = Nothing
  , committeeReportsPacPartyLoansMadePeriod = Nothing
  , committeeReportsPacPartyLoansMadeYtd = Nothing
  , committeeReportsPacPartyMeansFiled = Nothing
  , committeeReportsPacPartyMostRecent = Nothing
  , committeeReportsPacPartyMostRecentFileNumber = Nothing
  , committeeReportsPacPartyNetContributionsPeriod = Nothing
  , committeeReportsPacPartyNetContributionsYtd = Nothing
  , committeeReportsPacPartyNetOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartyNetOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartyNonAllocatedFedElectionActivityPeriod = Nothing
  , committeeReportsPacPartyNonAllocatedFedElectionActivityYtd = Nothing
  , committeeReportsPacPartyNonfedShareAllocatedDisbursementsPeriod = Nothing
  , committeeReportsPacPartyOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartyOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartyOtherDisbursementsPeriod = Nothing
  , committeeReportsPacPartyOtherDisbursementsYtd = Nothing
  , committeeReportsPacPartyOtherFedOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartyOtherFedOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartyOtherFedReceiptsPeriod = Nothing
  , committeeReportsPacPartyOtherFedReceiptsYtd = Nothing
  , committeeReportsPacPartyOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsPacPartyOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsPacPartyPdfUrl = Nothing
  , committeeReportsPacPartyPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsPacPartyPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsPacPartyPreviousFileNumber = Nothing
  , committeeReportsPacPartyReceiptDate = Nothing
  , committeeReportsPacPartyRefundedIndividualContributionsPeriod = Nothing
  , committeeReportsPacPartyRefundedIndividualContributionsYtd = Nothing
  , committeeReportsPacPartyRefundedOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsPacPartyRefundedOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsPacPartyRefundedPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsPacPartyRefundedPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsPacPartyReportForm = Nothing
  , committeeReportsPacPartyReportType = Nothing
  , committeeReportsPacPartyReportTypeFull = Nothing
  , committeeReportsPacPartyReportYear = Nothing
  , committeeReportsPacPartySharedFedActivityNonfedYtd = Nothing
  , committeeReportsPacPartySharedFedActivityPeriod = Nothing
  , committeeReportsPacPartySharedFedActivityYtd = Nothing
  , committeeReportsPacPartySharedFedOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartySharedFedOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartySharedNonfedOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartySharedNonfedOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartySubtotalSummaryPagePeriod = Nothing
  , committeeReportsPacPartySubtotalSummaryYtd = Nothing
  , committeeReportsPacPartyTotalContributionRefundsPeriod = Nothing
  , committeeReportsPacPartyTotalContributionRefundsYtd = Nothing
  , committeeReportsPacPartyTotalContributionsPeriod = Nothing
  , committeeReportsPacPartyTotalContributionsYtd = Nothing
  , committeeReportsPacPartyTotalDisbursementsPeriod = Nothing
  , committeeReportsPacPartyTotalDisbursementsYtd = Nothing
  , committeeReportsPacPartyTotalFedDisbursementsPeriod = Nothing
  , committeeReportsPacPartyTotalFedDisbursementsYtd = Nothing
  , committeeReportsPacPartyTotalFedElectionActivityPeriod = Nothing
  , committeeReportsPacPartyTotalFedElectionActivityYtd = Nothing
  , committeeReportsPacPartyTotalFedOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartyTotalFedOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartyTotalFedReceiptsPeriod = Nothing
  , committeeReportsPacPartyTotalFedReceiptsYtd = Nothing
  , committeeReportsPacPartyTotalIndividualContributionsPeriod = Nothing
  , committeeReportsPacPartyTotalIndividualContributionsYtd = Nothing
  , committeeReportsPacPartyTotalNonfedTransfersPeriod = Nothing
  , committeeReportsPacPartyTotalNonfedTransfersYtd = Nothing
  , committeeReportsPacPartyTotalOperatingExpendituresPeriod = Nothing
  , committeeReportsPacPartyTotalOperatingExpendituresYtd = Nothing
  , committeeReportsPacPartyTotalReceiptsPeriod = Nothing
  , committeeReportsPacPartyTotalReceiptsYtd = Nothing
  , committeeReportsPacPartyTransfersFromAffiliatedPartyPeriod = Nothing
  , committeeReportsPacPartyTransfersFromAffiliatedPartyYtd = Nothing
  , committeeReportsPacPartyTransfersFromNonfedAccountPeriod = Nothing
  , committeeReportsPacPartyTransfersFromNonfedAccountYtd = Nothing
  , committeeReportsPacPartyTransfersFromNonfedLevinPeriod = Nothing
  , committeeReportsPacPartyTransfersFromNonfedLevinYtd = Nothing
  , committeeReportsPacPartyTransfersToAffiliatedCommitteePeriod = Nothing
  , committeeReportsPacPartyTransfersToAffilitatedCommitteesYtd = Nothing
  }

-- ** CommitteeReportsPacPartyPage
-- | CommitteeReportsPacPartyPage
data CommitteeReportsPacPartyPage = CommitteeReportsPacPartyPage
  { committeeReportsPacPartyPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeReportsPacPartyPageResults :: !(Maybe [CommitteeReportsPacParty]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsPacPartyPage
instance A.FromJSON CommitteeReportsPacPartyPage where
  parseJSON = A.withObject "CommitteeReportsPacPartyPage" $ \o ->
    CommitteeReportsPacPartyPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeReportsPacPartyPage
instance A.ToJSON CommitteeReportsPacPartyPage where
  toJSON CommitteeReportsPacPartyPage {..} =
   _omitNulls
      [ "pagination" .= committeeReportsPacPartyPagePagination
      , "results" .= committeeReportsPacPartyPageResults
      ]


-- | Construct a value of type 'CommitteeReportsPacPartyPage' (by applying it's required fields, if any)
mkCommitteeReportsPacPartyPage
  :: CommitteeReportsPacPartyPage
mkCommitteeReportsPacPartyPage =
  CommitteeReportsPacPartyPage
  { committeeReportsPacPartyPagePagination = Nothing
  , committeeReportsPacPartyPageResults = Nothing
  }

-- ** CommitteeReportsPage
-- | CommitteeReportsPage
data CommitteeReportsPage = CommitteeReportsPage
  { committeeReportsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeReportsPageResults    :: !(Maybe [CommitteeReports]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsPage
instance A.FromJSON CommitteeReportsPage where
  parseJSON = A.withObject "CommitteeReportsPage" $ \o ->
    CommitteeReportsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeReportsPage
instance A.ToJSON CommitteeReportsPage where
  toJSON CommitteeReportsPage {..} =
   _omitNulls
      [ "pagination" .= committeeReportsPagePagination
      , "results" .= committeeReportsPageResults
      ]


-- | Construct a value of type 'CommitteeReportsPage' (by applying it's required fields, if any)
mkCommitteeReportsPage
  :: CommitteeReportsPage
mkCommitteeReportsPage =
  CommitteeReportsPage
  { committeeReportsPagePagination = Nothing
  , committeeReportsPageResults = Nothing
  }

-- ** CommitteeReportsPresidential
-- | CommitteeReportsPresidential
data CommitteeReportsPresidential = CommitteeReportsPresidential
  { committeeReportsPresidentialAmendmentChain :: !(Maybe [Double]) -- ^ "amendment_chain" -  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed.
  , committeeReportsPresidentialAmendmentIndicator :: !(Maybe Text) -- ^ "amendment_indicator"
  , committeeReportsPresidentialAmendmentIndicatorFull :: !(Maybe Text) -- ^ "amendment_indicator_full"
  , committeeReportsPresidentialBeginningImageNumber :: !(Maybe Text) -- ^ "beginning_image_number"
  , committeeReportsPresidentialCandidateContributionPeriod :: !(Maybe Double) -- ^ "candidate_contribution_period"
  , committeeReportsPresidentialCandidateContributionYtd :: !(Maybe Double) -- ^ "candidate_contribution_ytd"
  , committeeReportsPresidentialCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period" - Balance for the committee at the start of the two-year period
  , committeeReportsPresidentialCashOnHandEndPeriod :: !(Maybe Double) -- ^ "cash_on_hand_end_period" - Ending cash balance on the most recent filing
  , committeeReportsPresidentialCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeReportsPresidentialCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , committeeReportsPresidentialCommitteeType :: !(Maybe Text) -- ^ "committee_type"
  , committeeReportsPresidentialCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date" - Ending date of the reporting period
  , committeeReportsPresidentialCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , committeeReportsPresidentialCsvUrl :: !(Maybe Text) -- ^ "csv_url"
  , committeeReportsPresidentialCycle :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeReportsPresidentialDebtsOwedByCommittee :: !(Maybe Double) -- ^ "debts_owed_by_committee" - Debts owed by the committee
  , committeeReportsPresidentialDebtsOwedToCommittee :: !(Maybe Double) -- ^ "debts_owed_to_committee" - Debts owed to the committee
  , committeeReportsPresidentialDocumentDescription :: !(Maybe Text) -- ^ "document_description"
  , committeeReportsPresidentialEndImageNumber :: !(Maybe Text) -- ^ "end_image_number"
  , committeeReportsPresidentialExemptLegalAccountingDisbursementPeriod :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement_period"
  , committeeReportsPresidentialExemptLegalAccountingDisbursementYtd :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement_ytd"
  , committeeReportsPresidentialExpenditureSubjectToLimits :: !(Maybe Double) -- ^ "expenditure_subject_to_limits"
  , committeeReportsPresidentialFecFileId :: !(Maybe Text) -- ^ "fec_file_id"
  , committeeReportsPresidentialFecUrl :: !(Maybe Text) -- ^ "fec_url"
  , committeeReportsPresidentialFederalFundsPeriod :: !(Maybe Double) -- ^ "federal_funds_period"
  , committeeReportsPresidentialFederalFundsYtd :: !(Maybe Double) -- ^ "federal_funds_ytd"
  , committeeReportsPresidentialFileNumber :: !(Maybe Int) -- ^ "file_number"
  , committeeReportsPresidentialFundraisingDisbursementsPeriod :: !(Maybe Double) -- ^ "fundraising_disbursements_period"
  , committeeReportsPresidentialFundraisingDisbursementsYtd :: !(Maybe Double) -- ^ "fundraising_disbursements_ytd"
  , committeeReportsPresidentialHtmlUrl :: !(Maybe Text) -- ^ "html_url" - HTML link to the filing.
  , committeeReportsPresidentialIndividualItemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_itemized_contributions_period" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
  , committeeReportsPresidentialIndividualItemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_itemized_contributions_ytd" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
  , committeeReportsPresidentialIndividualUnitemizedContributionsPeriod :: !(Maybe Double) -- ^ "individual_unitemized_contributions_period" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
  , committeeReportsPresidentialIndividualUnitemizedContributionsYtd :: !(Maybe Double) -- ^ "individual_unitemized_contributions_ytd" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
  , committeeReportsPresidentialIsAmended :: !(Maybe Bool) -- ^ "is_amended" - False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
  , committeeReportsPresidentialItemsOnHandLiquidated :: !(Maybe Double) -- ^ "items_on_hand_liquidated"
  , committeeReportsPresidentialLoansReceivedFromCandidatePeriod :: !(Maybe Double) -- ^ "loans_received_from_candidate_period"
  , committeeReportsPresidentialLoansReceivedFromCandidateYtd :: !(Maybe Double) -- ^ "loans_received_from_candidate_ytd"
  , committeeReportsPresidentialMeansFiled :: !(Maybe Text) -- ^ "means_filed" - The method used to file with the FEC, either electronic or on paper.
  , committeeReportsPresidentialMostRecent :: !(Maybe Bool) -- ^ "most_recent"
  , committeeReportsPresidentialMostRecentFileNumber :: !(Maybe Double) -- ^ "most_recent_file_number"
  , committeeReportsPresidentialNetContributionsCycleToDate :: !(Maybe Double) -- ^ "net_contributions_cycle_to_date"
  , committeeReportsPresidentialNetOperatingExpendituresCycleToDate :: !(Maybe Double) -- ^ "net_operating_expenditures_cycle_to_date"
  , committeeReportsPresidentialOffsetsToFundraisingExpendituresPeriod :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures_period"
  , committeeReportsPresidentialOffsetsToFundraisingExpendituresYtd :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures_ytd"
  , committeeReportsPresidentialOffsetsToLegalAccountingPeriod :: !(Maybe Double) -- ^ "offsets_to_legal_accounting_period"
  , committeeReportsPresidentialOffsetsToLegalAccountingYtd :: !(Maybe Double) -- ^ "offsets_to_legal_accounting_ytd"
  , committeeReportsPresidentialOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_period" - Offsets to operating expenditures total for the reporting period
  , committeeReportsPresidentialOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures_ytd" - Offsets to operating expenditures total for the year to date
  , committeeReportsPresidentialOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "operating_expenditures_period"
  , committeeReportsPresidentialOperatingExpendituresYtd :: !(Maybe Double) -- ^ "operating_expenditures_ytd"
  , committeeReportsPresidentialOtherDisbursementsPeriod :: !(Maybe Double) -- ^ "other_disbursements_period" - Other disbursements total for the reporting period
  , committeeReportsPresidentialOtherDisbursementsYtd :: !(Maybe Double) -- ^ "other_disbursements_ytd" - Other disbursements total for the year to date
  , committeeReportsPresidentialOtherLoansReceivedPeriod :: !(Maybe Double) -- ^ "other_loans_received_period"
  , committeeReportsPresidentialOtherLoansReceivedYtd :: !(Maybe Double) -- ^ "other_loans_received_ytd"
  , committeeReportsPresidentialOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "other_political_committee_contributions_period" - Other committees contributions total for the reporting period
  , committeeReportsPresidentialOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "other_political_committee_contributions_ytd" - Other committees contributions total for the year to date
  , committeeReportsPresidentialOtherReceiptsPeriod :: !(Maybe Double) -- ^ "other_receipts_period"
  , committeeReportsPresidentialOtherReceiptsYtd :: !(Maybe Double) -- ^ "other_receipts_ytd"
  , committeeReportsPresidentialPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeReportsPresidentialPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "political_party_committee_contributions_period" - Party committees contributions total for the reporting period
  , committeeReportsPresidentialPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "political_party_committee_contributions_ytd" - Party committees contributions total for the year to date
  , committeeReportsPresidentialPreviousFileNumber :: !(Maybe Double) -- ^ "previous_file_number"
  , committeeReportsPresidentialReceiptDate :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , committeeReportsPresidentialRefundedIndividualContributionsPeriod :: !(Maybe Double) -- ^ "refunded_individual_contributions_period" - Individual refunds total for the reporting period
  , committeeReportsPresidentialRefundedIndividualContributionsYtd :: !(Maybe Double) -- ^ "refunded_individual_contributions_ytd" - Individual refunds total for the year to date
  , committeeReportsPresidentialRefundedOtherPoliticalCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_period" - Other committee refunds total for the reporting period
  , committeeReportsPresidentialRefundedOtherPoliticalCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions_ytd" - Other committee refunds total for the year to date
  , committeeReportsPresidentialRefundedPoliticalPartyCommitteeContributionsPeriod :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_period" - Political party refunds total for the reporting period
  , committeeReportsPresidentialRefundedPoliticalPartyCommitteeContributionsYtd :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions_ytd" - Political party refunds total for the year to date
  , committeeReportsPresidentialRepaymentsLoansMadeByCandidatePeriod :: !(Maybe Double) -- ^ "repayments_loans_made_by_candidate_period"
  , committeeReportsPresidentialRepaymentsLoansMadeCandidateYtd :: !(Maybe Double) -- ^ "repayments_loans_made_candidate_ytd"
  , committeeReportsPresidentialRepaymentsOtherLoansPeriod :: !(Maybe Double) -- ^ "repayments_other_loans_period"
  , committeeReportsPresidentialRepaymentsOtherLoansYtd :: !(Maybe Double) -- ^ "repayments_other_loans_ytd"
  , committeeReportsPresidentialReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeReportsPresidentialReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsPresidentialReportTypeFull :: !(Maybe Text) -- ^ "report_type_full" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , committeeReportsPresidentialReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , committeeReportsPresidentialSubtotalSummaryPeriod :: !(Maybe Double) -- ^ "subtotal_summary_period"
  , committeeReportsPresidentialTotalContributionRefundsPeriod :: !(Maybe Double) -- ^ "total_contribution_refunds_period" - Total contribution refunds total for the reporting period
  , committeeReportsPresidentialTotalContributionRefundsYtd :: !(Maybe Double) -- ^ "total_contribution_refunds_ytd" - Total contribution refunds total for the year to date
  , committeeReportsPresidentialTotalContributionsPeriod :: !(Maybe Double) -- ^ "total_contributions_period" - Contribution total for the reporting period
  , committeeReportsPresidentialTotalContributionsYtd :: !(Maybe Double) -- ^ "total_contributions_ytd" - Contribution total for the year to date
  , committeeReportsPresidentialTotalDisbursementsPeriod :: !(Maybe Double) -- ^ "total_disbursements_period" - Disbursements total for the reporting period
  , committeeReportsPresidentialTotalDisbursementsYtd :: !(Maybe Double) -- ^ "total_disbursements_ytd" - Disbursements total for the year to date
  , committeeReportsPresidentialTotalIndividualContributionsPeriod :: !(Maybe Double) -- ^ "total_individual_contributions_period" - Individual contributions total for the reporting period
  , committeeReportsPresidentialTotalIndividualContributionsYtd :: !(Maybe Double) -- ^ "total_individual_contributions_ytd" - Individual contributions total for the year to date
  , committeeReportsPresidentialTotalLoanRepaymentsMadePeriod :: !(Maybe Double) -- ^ "total_loan_repayments_made_period"
  , committeeReportsPresidentialTotalLoanRepaymentsMadeYtd :: !(Maybe Double) -- ^ "total_loan_repayments_made_ytd"
  , committeeReportsPresidentialTotalLoansReceivedPeriod :: !(Maybe Double) -- ^ "total_loans_received_period"
  , committeeReportsPresidentialTotalLoansReceivedYtd :: !(Maybe Double) -- ^ "total_loans_received_ytd"
  , committeeReportsPresidentialTotalOffsetsToOperatingExpendituresPeriod :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures_period"
  , committeeReportsPresidentialTotalOffsetsToOperatingExpendituresYtd :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures_ytd"
  , committeeReportsPresidentialTotalPeriod :: !(Maybe Double) -- ^ "total_period"
  , committeeReportsPresidentialTotalReceiptsPeriod :: !(Maybe Double) -- ^ "total_receipts_period" - Anything of value (money, goods, services or property) received by a political committee total for the reporting period
  , committeeReportsPresidentialTotalReceiptsYtd :: !(Maybe Double) -- ^ "total_receipts_ytd" - Anything of value (money, goods, services or property) received by a political committee total for the year to date
  , committeeReportsPresidentialTotalYtd :: !(Maybe Double) -- ^ "total_ytd"
  , committeeReportsPresidentialTransfersFromAffiliatedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee_period"
  , committeeReportsPresidentialTransfersFromAffiliatedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee_ytd"
  , committeeReportsPresidentialTransfersToOtherAuthorizedCommitteePeriod :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee_period"
  , committeeReportsPresidentialTransfersToOtherAuthorizedCommitteeYtd :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee_ytd"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsPresidential
instance A.FromJSON CommitteeReportsPresidential where
  parseJSON = A.withObject "CommitteeReportsPresidential" $ \o ->
    CommitteeReportsPresidential
      <$> (o .:? "amendment_chain")
      <*> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_indicator_full")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "candidate_contribution_period")
      <*> (o .:? "candidate_contribution_ytd")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "debts_owed_to_committee")
      <*> (o .:? "document_description")
      <*> (o .:? "end_image_number")
      <*> (o .:? "exempt_legal_accounting_disbursement_period")
      <*> (o .:? "exempt_legal_accounting_disbursement_ytd")
      <*> (o .:? "expenditure_subject_to_limits")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "federal_funds_period")
      <*> (o .:? "federal_funds_ytd")
      <*> (o .:? "file_number")
      <*> (o .:? "fundraising_disbursements_period")
      <*> (o .:? "fundraising_disbursements_ytd")
      <*> (o .:? "html_url")
      <*> (o .:? "individual_itemized_contributions_period")
      <*> (o .:? "individual_itemized_contributions_ytd")
      <*> (o .:? "individual_unitemized_contributions_period")
      <*> (o .:? "individual_unitemized_contributions_ytd")
      <*> (o .:? "is_amended")
      <*> (o .:? "items_on_hand_liquidated")
      <*> (o .:? "loans_received_from_candidate_period")
      <*> (o .:? "loans_received_from_candidate_ytd")
      <*> (o .:? "means_filed")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_file_number")
      <*> (o .:? "net_contributions_cycle_to_date")
      <*> (o .:? "net_operating_expenditures_cycle_to_date")
      <*> (o .:? "offsets_to_fundraising_expenditures_period")
      <*> (o .:? "offsets_to_fundraising_expenditures_ytd")
      <*> (o .:? "offsets_to_legal_accounting_period")
      <*> (o .:? "offsets_to_legal_accounting_ytd")
      <*> (o .:? "offsets_to_operating_expenditures_period")
      <*> (o .:? "offsets_to_operating_expenditures_ytd")
      <*> (o .:? "operating_expenditures_period")
      <*> (o .:? "operating_expenditures_ytd")
      <*> (o .:? "other_disbursements_period")
      <*> (o .:? "other_disbursements_ytd")
      <*> (o .:? "other_loans_received_period")
      <*> (o .:? "other_loans_received_ytd")
      <*> (o .:? "other_political_committee_contributions_period")
      <*> (o .:? "other_political_committee_contributions_ytd")
      <*> (o .:? "other_receipts_period")
      <*> (o .:? "other_receipts_ytd")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions_period")
      <*> (o .:? "political_party_committee_contributions_ytd")
      <*> (o .:? "previous_file_number")
      <*> (o .:? "receipt_date")
      <*> (o .:? "refunded_individual_contributions_period")
      <*> (o .:? "refunded_individual_contributions_ytd")
      <*> (o .:? "refunded_other_political_committee_contributions_period")
      <*> (o .:? "refunded_other_political_committee_contributions_ytd")
      <*> (o .:? "refunded_political_party_committee_contributions_period")
      <*> (o .:? "refunded_political_party_committee_contributions_ytd")
      <*> (o .:? "repayments_loans_made_by_candidate_period")
      <*> (o .:? "repayments_loans_made_candidate_ytd")
      <*> (o .:? "repayments_other_loans_period")
      <*> (o .:? "repayments_other_loans_ytd")
      <*> (o .:? "report_form")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")
      <*> (o .:? "subtotal_summary_period")
      <*> (o .:? "total_contribution_refunds_period")
      <*> (o .:? "total_contribution_refunds_ytd")
      <*> (o .:? "total_contributions_period")
      <*> (o .:? "total_contributions_ytd")
      <*> (o .:? "total_disbursements_period")
      <*> (o .:? "total_disbursements_ytd")
      <*> (o .:? "total_individual_contributions_period")
      <*> (o .:? "total_individual_contributions_ytd")
      <*> (o .:? "total_loan_repayments_made_period")
      <*> (o .:? "total_loan_repayments_made_ytd")
      <*> (o .:? "total_loans_received_period")
      <*> (o .:? "total_loans_received_ytd")
      <*> (o .:? "total_offsets_to_operating_expenditures_period")
      <*> (o .:? "total_offsets_to_operating_expenditures_ytd")
      <*> (o .:? "total_period")
      <*> (o .:? "total_receipts_period")
      <*> (o .:? "total_receipts_ytd")
      <*> (o .:? "total_ytd")
      <*> (o .:? "transfers_from_affiliated_committee_period")
      <*> (o .:? "transfers_from_affiliated_committee_ytd")
      <*> (o .:? "transfers_to_other_authorized_committee_period")
      <*> (o .:? "transfers_to_other_authorized_committee_ytd")

-- | ToJSON CommitteeReportsPresidential
instance A.ToJSON CommitteeReportsPresidential where
  toJSON CommitteeReportsPresidential {..} =
   _omitNulls
      [ "amendment_chain" .= committeeReportsPresidentialAmendmentChain
      , "amendment_indicator" .= committeeReportsPresidentialAmendmentIndicator
      , "amendment_indicator_full" .= committeeReportsPresidentialAmendmentIndicatorFull
      , "beginning_image_number" .= committeeReportsPresidentialBeginningImageNumber
      , "candidate_contribution_period" .= committeeReportsPresidentialCandidateContributionPeriod
      , "candidate_contribution_ytd" .= committeeReportsPresidentialCandidateContributionYtd
      , "cash_on_hand_beginning_period" .= committeeReportsPresidentialCashOnHandBeginningPeriod
      , "cash_on_hand_end_period" .= committeeReportsPresidentialCashOnHandEndPeriod
      , "committee_id" .= committeeReportsPresidentialCommitteeId
      , "committee_name" .= committeeReportsPresidentialCommitteeName
      , "committee_type" .= committeeReportsPresidentialCommitteeType
      , "coverage_end_date" .= committeeReportsPresidentialCoverageEndDate
      , "coverage_start_date" .= committeeReportsPresidentialCoverageStartDate
      , "csv_url" .= committeeReportsPresidentialCsvUrl
      , "cycle" .= committeeReportsPresidentialCycle
      , "debts_owed_by_committee" .= committeeReportsPresidentialDebtsOwedByCommittee
      , "debts_owed_to_committee" .= committeeReportsPresidentialDebtsOwedToCommittee
      , "document_description" .= committeeReportsPresidentialDocumentDescription
      , "end_image_number" .= committeeReportsPresidentialEndImageNumber
      , "exempt_legal_accounting_disbursement_period" .= committeeReportsPresidentialExemptLegalAccountingDisbursementPeriod
      , "exempt_legal_accounting_disbursement_ytd" .= committeeReportsPresidentialExemptLegalAccountingDisbursementYtd
      , "expenditure_subject_to_limits" .= committeeReportsPresidentialExpenditureSubjectToLimits
      , "fec_file_id" .= committeeReportsPresidentialFecFileId
      , "fec_url" .= committeeReportsPresidentialFecUrl
      , "federal_funds_period" .= committeeReportsPresidentialFederalFundsPeriod
      , "federal_funds_ytd" .= committeeReportsPresidentialFederalFundsYtd
      , "file_number" .= committeeReportsPresidentialFileNumber
      , "fundraising_disbursements_period" .= committeeReportsPresidentialFundraisingDisbursementsPeriod
      , "fundraising_disbursements_ytd" .= committeeReportsPresidentialFundraisingDisbursementsYtd
      , "html_url" .= committeeReportsPresidentialHtmlUrl
      , "individual_itemized_contributions_period" .= committeeReportsPresidentialIndividualItemizedContributionsPeriod
      , "individual_itemized_contributions_ytd" .= committeeReportsPresidentialIndividualItemizedContributionsYtd
      , "individual_unitemized_contributions_period" .= committeeReportsPresidentialIndividualUnitemizedContributionsPeriod
      , "individual_unitemized_contributions_ytd" .= committeeReportsPresidentialIndividualUnitemizedContributionsYtd
      , "is_amended" .= committeeReportsPresidentialIsAmended
      , "items_on_hand_liquidated" .= committeeReportsPresidentialItemsOnHandLiquidated
      , "loans_received_from_candidate_period" .= committeeReportsPresidentialLoansReceivedFromCandidatePeriod
      , "loans_received_from_candidate_ytd" .= committeeReportsPresidentialLoansReceivedFromCandidateYtd
      , "means_filed" .= committeeReportsPresidentialMeansFiled
      , "most_recent" .= committeeReportsPresidentialMostRecent
      , "most_recent_file_number" .= committeeReportsPresidentialMostRecentFileNumber
      , "net_contributions_cycle_to_date" .= committeeReportsPresidentialNetContributionsCycleToDate
      , "net_operating_expenditures_cycle_to_date" .= committeeReportsPresidentialNetOperatingExpendituresCycleToDate
      , "offsets_to_fundraising_expenditures_period" .= committeeReportsPresidentialOffsetsToFundraisingExpendituresPeriod
      , "offsets_to_fundraising_expenditures_ytd" .= committeeReportsPresidentialOffsetsToFundraisingExpendituresYtd
      , "offsets_to_legal_accounting_period" .= committeeReportsPresidentialOffsetsToLegalAccountingPeriod
      , "offsets_to_legal_accounting_ytd" .= committeeReportsPresidentialOffsetsToLegalAccountingYtd
      , "offsets_to_operating_expenditures_period" .= committeeReportsPresidentialOffsetsToOperatingExpendituresPeriod
      , "offsets_to_operating_expenditures_ytd" .= committeeReportsPresidentialOffsetsToOperatingExpendituresYtd
      , "operating_expenditures_period" .= committeeReportsPresidentialOperatingExpendituresPeriod
      , "operating_expenditures_ytd" .= committeeReportsPresidentialOperatingExpendituresYtd
      , "other_disbursements_period" .= committeeReportsPresidentialOtherDisbursementsPeriod
      , "other_disbursements_ytd" .= committeeReportsPresidentialOtherDisbursementsYtd
      , "other_loans_received_period" .= committeeReportsPresidentialOtherLoansReceivedPeriod
      , "other_loans_received_ytd" .= committeeReportsPresidentialOtherLoansReceivedYtd
      , "other_political_committee_contributions_period" .= committeeReportsPresidentialOtherPoliticalCommitteeContributionsPeriod
      , "other_political_committee_contributions_ytd" .= committeeReportsPresidentialOtherPoliticalCommitteeContributionsYtd
      , "other_receipts_period" .= committeeReportsPresidentialOtherReceiptsPeriod
      , "other_receipts_ytd" .= committeeReportsPresidentialOtherReceiptsYtd
      , "pdf_url" .= committeeReportsPresidentialPdfUrl
      , "political_party_committee_contributions_period" .= committeeReportsPresidentialPoliticalPartyCommitteeContributionsPeriod
      , "political_party_committee_contributions_ytd" .= committeeReportsPresidentialPoliticalPartyCommitteeContributionsYtd
      , "previous_file_number" .= committeeReportsPresidentialPreviousFileNumber
      , "receipt_date" .= committeeReportsPresidentialReceiptDate
      , "refunded_individual_contributions_period" .= committeeReportsPresidentialRefundedIndividualContributionsPeriod
      , "refunded_individual_contributions_ytd" .= committeeReportsPresidentialRefundedIndividualContributionsYtd
      , "refunded_other_political_committee_contributions_period" .= committeeReportsPresidentialRefundedOtherPoliticalCommitteeContributionsPeriod
      , "refunded_other_political_committee_contributions_ytd" .= committeeReportsPresidentialRefundedOtherPoliticalCommitteeContributionsYtd
      , "refunded_political_party_committee_contributions_period" .= committeeReportsPresidentialRefundedPoliticalPartyCommitteeContributionsPeriod
      , "refunded_political_party_committee_contributions_ytd" .= committeeReportsPresidentialRefundedPoliticalPartyCommitteeContributionsYtd
      , "repayments_loans_made_by_candidate_period" .= committeeReportsPresidentialRepaymentsLoansMadeByCandidatePeriod
      , "repayments_loans_made_candidate_ytd" .= committeeReportsPresidentialRepaymentsLoansMadeCandidateYtd
      , "repayments_other_loans_period" .= committeeReportsPresidentialRepaymentsOtherLoansPeriod
      , "repayments_other_loans_ytd" .= committeeReportsPresidentialRepaymentsOtherLoansYtd
      , "report_form" .= committeeReportsPresidentialReportForm
      , "report_type" .= committeeReportsPresidentialReportType
      , "report_type_full" .= committeeReportsPresidentialReportTypeFull
      , "report_year" .= committeeReportsPresidentialReportYear
      , "subtotal_summary_period" .= committeeReportsPresidentialSubtotalSummaryPeriod
      , "total_contribution_refunds_period" .= committeeReportsPresidentialTotalContributionRefundsPeriod
      , "total_contribution_refunds_ytd" .= committeeReportsPresidentialTotalContributionRefundsYtd
      , "total_contributions_period" .= committeeReportsPresidentialTotalContributionsPeriod
      , "total_contributions_ytd" .= committeeReportsPresidentialTotalContributionsYtd
      , "total_disbursements_period" .= committeeReportsPresidentialTotalDisbursementsPeriod
      , "total_disbursements_ytd" .= committeeReportsPresidentialTotalDisbursementsYtd
      , "total_individual_contributions_period" .= committeeReportsPresidentialTotalIndividualContributionsPeriod
      , "total_individual_contributions_ytd" .= committeeReportsPresidentialTotalIndividualContributionsYtd
      , "total_loan_repayments_made_period" .= committeeReportsPresidentialTotalLoanRepaymentsMadePeriod
      , "total_loan_repayments_made_ytd" .= committeeReportsPresidentialTotalLoanRepaymentsMadeYtd
      , "total_loans_received_period" .= committeeReportsPresidentialTotalLoansReceivedPeriod
      , "total_loans_received_ytd" .= committeeReportsPresidentialTotalLoansReceivedYtd
      , "total_offsets_to_operating_expenditures_period" .= committeeReportsPresidentialTotalOffsetsToOperatingExpendituresPeriod
      , "total_offsets_to_operating_expenditures_ytd" .= committeeReportsPresidentialTotalOffsetsToOperatingExpendituresYtd
      , "total_period" .= committeeReportsPresidentialTotalPeriod
      , "total_receipts_period" .= committeeReportsPresidentialTotalReceiptsPeriod
      , "total_receipts_ytd" .= committeeReportsPresidentialTotalReceiptsYtd
      , "total_ytd" .= committeeReportsPresidentialTotalYtd
      , "transfers_from_affiliated_committee_period" .= committeeReportsPresidentialTransfersFromAffiliatedCommitteePeriod
      , "transfers_from_affiliated_committee_ytd" .= committeeReportsPresidentialTransfersFromAffiliatedCommitteeYtd
      , "transfers_to_other_authorized_committee_period" .= committeeReportsPresidentialTransfersToOtherAuthorizedCommitteePeriod
      , "transfers_to_other_authorized_committee_ytd" .= committeeReportsPresidentialTransfersToOtherAuthorizedCommitteeYtd
      ]


-- | Construct a value of type 'CommitteeReportsPresidential' (by applying it's required fields, if any)
mkCommitteeReportsPresidential
  :: CommitteeReportsPresidential
mkCommitteeReportsPresidential =
  CommitteeReportsPresidential
  { committeeReportsPresidentialAmendmentChain = Nothing
  , committeeReportsPresidentialAmendmentIndicator = Nothing
  , committeeReportsPresidentialAmendmentIndicatorFull = Nothing
  , committeeReportsPresidentialBeginningImageNumber = Nothing
  , committeeReportsPresidentialCandidateContributionPeriod = Nothing
  , committeeReportsPresidentialCandidateContributionYtd = Nothing
  , committeeReportsPresidentialCashOnHandBeginningPeriod = Nothing
  , committeeReportsPresidentialCashOnHandEndPeriod = Nothing
  , committeeReportsPresidentialCommitteeId = Nothing
  , committeeReportsPresidentialCommitteeName = Nothing
  , committeeReportsPresidentialCommitteeType = Nothing
  , committeeReportsPresidentialCoverageEndDate = Nothing
  , committeeReportsPresidentialCoverageStartDate = Nothing
  , committeeReportsPresidentialCsvUrl = Nothing
  , committeeReportsPresidentialCycle = Nothing
  , committeeReportsPresidentialDebtsOwedByCommittee = Nothing
  , committeeReportsPresidentialDebtsOwedToCommittee = Nothing
  , committeeReportsPresidentialDocumentDescription = Nothing
  , committeeReportsPresidentialEndImageNumber = Nothing
  , committeeReportsPresidentialExemptLegalAccountingDisbursementPeriod = Nothing
  , committeeReportsPresidentialExemptLegalAccountingDisbursementYtd = Nothing
  , committeeReportsPresidentialExpenditureSubjectToLimits = Nothing
  , committeeReportsPresidentialFecFileId = Nothing
  , committeeReportsPresidentialFecUrl = Nothing
  , committeeReportsPresidentialFederalFundsPeriod = Nothing
  , committeeReportsPresidentialFederalFundsYtd = Nothing
  , committeeReportsPresidentialFileNumber = Nothing
  , committeeReportsPresidentialFundraisingDisbursementsPeriod = Nothing
  , committeeReportsPresidentialFundraisingDisbursementsYtd = Nothing
  , committeeReportsPresidentialHtmlUrl = Nothing
  , committeeReportsPresidentialIndividualItemizedContributionsPeriod = Nothing
  , committeeReportsPresidentialIndividualItemizedContributionsYtd = Nothing
  , committeeReportsPresidentialIndividualUnitemizedContributionsPeriod = Nothing
  , committeeReportsPresidentialIndividualUnitemizedContributionsYtd = Nothing
  , committeeReportsPresidentialIsAmended = Nothing
  , committeeReportsPresidentialItemsOnHandLiquidated = Nothing
  , committeeReportsPresidentialLoansReceivedFromCandidatePeriod = Nothing
  , committeeReportsPresidentialLoansReceivedFromCandidateYtd = Nothing
  , committeeReportsPresidentialMeansFiled = Nothing
  , committeeReportsPresidentialMostRecent = Nothing
  , committeeReportsPresidentialMostRecentFileNumber = Nothing
  , committeeReportsPresidentialNetContributionsCycleToDate = Nothing
  , committeeReportsPresidentialNetOperatingExpendituresCycleToDate = Nothing
  , committeeReportsPresidentialOffsetsToFundraisingExpendituresPeriod = Nothing
  , committeeReportsPresidentialOffsetsToFundraisingExpendituresYtd = Nothing
  , committeeReportsPresidentialOffsetsToLegalAccountingPeriod = Nothing
  , committeeReportsPresidentialOffsetsToLegalAccountingYtd = Nothing
  , committeeReportsPresidentialOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsPresidentialOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsPresidentialOperatingExpendituresPeriod = Nothing
  , committeeReportsPresidentialOperatingExpendituresYtd = Nothing
  , committeeReportsPresidentialOtherDisbursementsPeriod = Nothing
  , committeeReportsPresidentialOtherDisbursementsYtd = Nothing
  , committeeReportsPresidentialOtherLoansReceivedPeriod = Nothing
  , committeeReportsPresidentialOtherLoansReceivedYtd = Nothing
  , committeeReportsPresidentialOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsPresidentialOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsPresidentialOtherReceiptsPeriod = Nothing
  , committeeReportsPresidentialOtherReceiptsYtd = Nothing
  , committeeReportsPresidentialPdfUrl = Nothing
  , committeeReportsPresidentialPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsPresidentialPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsPresidentialPreviousFileNumber = Nothing
  , committeeReportsPresidentialReceiptDate = Nothing
  , committeeReportsPresidentialRefundedIndividualContributionsPeriod = Nothing
  , committeeReportsPresidentialRefundedIndividualContributionsYtd = Nothing
  , committeeReportsPresidentialRefundedOtherPoliticalCommitteeContributionsPeriod = Nothing
  , committeeReportsPresidentialRefundedOtherPoliticalCommitteeContributionsYtd = Nothing
  , committeeReportsPresidentialRefundedPoliticalPartyCommitteeContributionsPeriod = Nothing
  , committeeReportsPresidentialRefundedPoliticalPartyCommitteeContributionsYtd = Nothing
  , committeeReportsPresidentialRepaymentsLoansMadeByCandidatePeriod = Nothing
  , committeeReportsPresidentialRepaymentsLoansMadeCandidateYtd = Nothing
  , committeeReportsPresidentialRepaymentsOtherLoansPeriod = Nothing
  , committeeReportsPresidentialRepaymentsOtherLoansYtd = Nothing
  , committeeReportsPresidentialReportForm = Nothing
  , committeeReportsPresidentialReportType = Nothing
  , committeeReportsPresidentialReportTypeFull = Nothing
  , committeeReportsPresidentialReportYear = Nothing
  , committeeReportsPresidentialSubtotalSummaryPeriod = Nothing
  , committeeReportsPresidentialTotalContributionRefundsPeriod = Nothing
  , committeeReportsPresidentialTotalContributionRefundsYtd = Nothing
  , committeeReportsPresidentialTotalContributionsPeriod = Nothing
  , committeeReportsPresidentialTotalContributionsYtd = Nothing
  , committeeReportsPresidentialTotalDisbursementsPeriod = Nothing
  , committeeReportsPresidentialTotalDisbursementsYtd = Nothing
  , committeeReportsPresidentialTotalIndividualContributionsPeriod = Nothing
  , committeeReportsPresidentialTotalIndividualContributionsYtd = Nothing
  , committeeReportsPresidentialTotalLoanRepaymentsMadePeriod = Nothing
  , committeeReportsPresidentialTotalLoanRepaymentsMadeYtd = Nothing
  , committeeReportsPresidentialTotalLoansReceivedPeriod = Nothing
  , committeeReportsPresidentialTotalLoansReceivedYtd = Nothing
  , committeeReportsPresidentialTotalOffsetsToOperatingExpendituresPeriod = Nothing
  , committeeReportsPresidentialTotalOffsetsToOperatingExpendituresYtd = Nothing
  , committeeReportsPresidentialTotalPeriod = Nothing
  , committeeReportsPresidentialTotalReceiptsPeriod = Nothing
  , committeeReportsPresidentialTotalReceiptsYtd = Nothing
  , committeeReportsPresidentialTotalYtd = Nothing
  , committeeReportsPresidentialTransfersFromAffiliatedCommitteePeriod = Nothing
  , committeeReportsPresidentialTransfersFromAffiliatedCommitteeYtd = Nothing
  , committeeReportsPresidentialTransfersToOtherAuthorizedCommitteePeriod = Nothing
  , committeeReportsPresidentialTransfersToOtherAuthorizedCommitteeYtd = Nothing
  }

-- ** CommitteeReportsPresidentialPage
-- | CommitteeReportsPresidentialPage
data CommitteeReportsPresidentialPage = CommitteeReportsPresidentialPage
  { committeeReportsPresidentialPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeReportsPresidentialPageResults :: !(Maybe [CommitteeReportsPresidential]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeReportsPresidentialPage
instance A.FromJSON CommitteeReportsPresidentialPage where
  parseJSON = A.withObject "CommitteeReportsPresidentialPage" $ \o ->
    CommitteeReportsPresidentialPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeReportsPresidentialPage
instance A.ToJSON CommitteeReportsPresidentialPage where
  toJSON CommitteeReportsPresidentialPage {..} =
   _omitNulls
      [ "pagination" .= committeeReportsPresidentialPagePagination
      , "results" .= committeeReportsPresidentialPageResults
      ]


-- | Construct a value of type 'CommitteeReportsPresidentialPage' (by applying it's required fields, if any)
mkCommitteeReportsPresidentialPage
  :: CommitteeReportsPresidentialPage
mkCommitteeReportsPresidentialPage =
  CommitteeReportsPresidentialPage
  { committeeReportsPresidentialPagePagination = Nothing
  , committeeReportsPresidentialPageResults = Nothing
  }

-- ** CommitteeSearch
-- | CommitteeSearch
data CommitteeSearch = CommitteeSearch
  { committeeSearchId   :: !(Maybe Text) -- ^ "id"
  , committeeSearchName :: !(Maybe Text) -- ^ "name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeSearch
instance A.FromJSON CommitteeSearch where
  parseJSON = A.withObject "CommitteeSearch" $ \o ->
    CommitteeSearch
      <$> (o .:? "id")
      <*> (o .:? "name")

-- | ToJSON CommitteeSearch
instance A.ToJSON CommitteeSearch where
  toJSON CommitteeSearch {..} =
   _omitNulls
      [ "id" .= committeeSearchId
      , "name" .= committeeSearchName
      ]


-- | Construct a value of type 'CommitteeSearch' (by applying it's required fields, if any)
mkCommitteeSearch
  :: CommitteeSearch
mkCommitteeSearch =
  CommitteeSearch
  { committeeSearchId = Nothing
  , committeeSearchName = Nothing
  }

-- ** CommitteeSearchList
-- | CommitteeSearchList
data CommitteeSearchList = CommitteeSearchList
  { committeeSearchListResults :: !(Maybe [CommitteeSearch]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeSearchList
instance A.FromJSON CommitteeSearchList where
  parseJSON = A.withObject "CommitteeSearchList" $ \o ->
    CommitteeSearchList
      <$> (o .:? "results")

-- | ToJSON CommitteeSearchList
instance A.ToJSON CommitteeSearchList where
  toJSON CommitteeSearchList {..} =
   _omitNulls
      [ "results" .= committeeSearchListResults
      ]


-- | Construct a value of type 'CommitteeSearchList' (by applying it's required fields, if any)
mkCommitteeSearchList
  :: CommitteeSearchList
mkCommitteeSearchList =
  CommitteeSearchList
  { committeeSearchListResults = Nothing
  }

-- ** CommitteeTotals
-- | CommitteeTotals
data CommitteeTotals = CommitteeTotals
  { committeeTotalsAllLoansReceived :: !(Maybe Double) -- ^ "all_loans_received"
  , committeeTotalsAllOtherLoans :: !(Maybe Double) -- ^ "all_other_loans"
  , committeeTotalsAllocatedFederalElectionLevinShare :: !(Maybe Double) -- ^ "allocated_federal_election_levin_share"
  , committeeTotalsCandidateContribution :: !(Maybe Double) -- ^ "candidate_contribution"
  , committeeTotalsCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period"
  , committeeTotalsCommitteeDesignation :: !(Maybe Text) -- ^ "committee_designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsCommitteeDesignationFull :: !(Maybe Text) -- ^ "committee_designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeTotalsCommitteeName :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeTotalsCommitteeType :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsCommitteeTypeFull :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsContributionRefunds :: !(Maybe Double) -- ^ "contribution_refunds"
  , committeeTotalsContributions :: !(Maybe Double) -- ^ "contributions" - Contribution
  , committeeTotalsConventionExp :: !(Maybe Double) -- ^ "convention_exp"
  , committeeTotalsCoordinatedExpendituresByPartyCommittee :: !(Maybe Double) -- ^ "coordinated_expenditures_by_party_committee"
  , committeeTotalsCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , committeeTotalsCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , committeeTotalsCycle :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeTotalsDisbursements :: !(Maybe Double) -- ^ "disbursements" - Disbursements
  , committeeTotalsExemptLegalAccountingDisbursement :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement"
  , committeeTotalsExpPriorYearsSubjectLimits :: !(Maybe Double) -- ^ "exp_prior_years_subject_limits"
  , committeeTotalsExpSubjectLimits :: !(Maybe Double) -- ^ "exp_subject_limits"
  , committeeTotalsFedCandidateCommitteeContributions :: !(Maybe Double) -- ^ "fed_candidate_committee_contributions"
  , committeeTotalsFedCandidateContributionRefunds :: !(Maybe Double) -- ^ "fed_candidate_contribution_refunds"
  , committeeTotalsFedDisbursements :: !(Maybe Double) -- ^ "fed_disbursements"
  , committeeTotalsFedElectionActivity :: !(Maybe Double) -- ^ "fed_election_activity"
  , committeeTotalsFedOperatingExpenditures :: !(Maybe Double) -- ^ "fed_operating_expenditures"
  , committeeTotalsFedReceipts :: !(Maybe Double) -- ^ "fed_receipts"
  , committeeTotalsFederalFunds :: !(Maybe Double) -- ^ "federal_funds"
  , committeeTotalsFundraisingDisbursements :: !(Maybe Double) -- ^ "fundraising_disbursements"
  , committeeTotalsIndependentExpenditures :: !(Maybe Double) -- ^ "independent_expenditures"
  , committeeTotalsIndividualContributions :: !(Maybe Double) -- ^ "individual_contributions"
  , committeeTotalsIndividualItemizedContributions :: !(Maybe Double) -- ^ "individual_itemized_contributions" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
  , committeeTotalsIndividualUnitemizedContributions :: !(Maybe Double) -- ^ "individual_unitemized_contributions" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
  , committeeTotalsItemizedConventionExp :: !(Maybe Double) -- ^ "itemized_convention_exp"
  , committeeTotalsItemizedOtherDisb :: !(Maybe Double) -- ^ "itemized_other_disb"
  , committeeTotalsItemizedOtherIncome :: !(Maybe Double) -- ^ "itemized_other_income"
  , committeeTotalsItemizedOtherRefunds :: !(Maybe Double) -- ^ "itemized_other_refunds"
  , committeeTotalsItemizedRefundsRelatingConventionExp :: !(Maybe Double) -- ^ "itemized_refunds_relating_convention_exp"
  , committeeTotalsLastBeginningImageNumber :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , committeeTotalsLastCashOnHandEndPeriod :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , committeeTotalsLastDebtsOwedByCommittee :: !(Maybe Double) -- ^ "last_debts_owed_by_committee"
  , committeeTotalsLastDebtsOwedToCommittee :: !(Maybe Double) -- ^ "last_debts_owed_to_committee"
  , committeeTotalsLastReportTypeFull :: !(Maybe Text) -- ^ "last_report_type_full"
  , committeeTotalsLastReportYear :: !(Maybe Int) -- ^ "last_report_year"
  , committeeTotalsLoanRepayments :: !(Maybe Double) -- ^ "loan_repayments"
  , committeeTotalsLoanRepaymentsCandidateLoans :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans"
  , committeeTotalsLoanRepaymentsMade :: !(Maybe Double) -- ^ "loan_repayments_made"
  , committeeTotalsLoanRepaymentsOtherLoans :: !(Maybe Double) -- ^ "loan_repayments_other_loans"
  , committeeTotalsLoanRepaymentsReceived :: !(Maybe Double) -- ^ "loan_repayments_received"
  , committeeTotalsLoans :: !(Maybe Double) -- ^ "loans"
  , committeeTotalsLoansAndLoanRepaymentsMade :: !(Maybe Double) -- ^ "loans_and_loan_repayments_made"
  , committeeTotalsLoansAndLoanRepaymentsReceived :: !(Maybe Double) -- ^ "loans_and_loan_repayments_received"
  , committeeTotalsLoansMade :: !(Maybe Double) -- ^ "loans_made"
  , committeeTotalsLoansMadeByCandidate :: !(Maybe Double) -- ^ "loans_made_by_candidate"
  , committeeTotalsLoansReceived :: !(Maybe Double) -- ^ "loans_received"
  , committeeTotalsLoansReceivedFromCandidate :: !(Maybe Double) -- ^ "loans_received_from_candidate"
  , committeeTotalsNetContributions :: !(Maybe Double) -- ^ "net_contributions"
  , committeeTotalsNetOperatingExpenditures :: !(Maybe Double) -- ^ "net_operating_expenditures"
  , committeeTotalsNonAllocatedFedElectionActivity :: !(Maybe Double) -- ^ "non_allocated_fed_election_activity"
  , committeeTotalsOffsetsToFundraisingExpenditures :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures"
  , committeeTotalsOffsetsToLegalAccounting :: !(Maybe Double) -- ^ "offsets_to_legal_accounting"
  , committeeTotalsOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures"
  , committeeTotalsOperatingExpenditures :: !(Maybe Double) -- ^ "operating_expenditures"
  , committeeTotalsOtherDisbursements :: !(Maybe Double) -- ^ "other_disbursements"
  , committeeTotalsOtherFedOperatingExpenditures :: !(Maybe Double) -- ^ "other_fed_operating_expenditures"
  , committeeTotalsOtherFedReceipts :: !(Maybe Double) -- ^ "other_fed_receipts"
  , committeeTotalsOtherLoansReceived :: !(Maybe Double) -- ^ "other_loans_received"
  , committeeTotalsOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "other_political_committee_contributions"
  , committeeTotalsOtherReceipts :: !(Maybe Double) -- ^ "other_receipts"
  , committeeTotalsOtherRefunds :: !(Maybe Double) -- ^ "other_refunds"
  , committeeTotalsPartyFull :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , committeeTotalsPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeTotalsPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "political_party_committee_contributions"
  , committeeTotalsReceipts :: !(Maybe Double) -- ^ "receipts"
  , committeeTotalsRefundedIndividualContributions :: !(Maybe Double) -- ^ "refunded_individual_contributions"
  , committeeTotalsRefundedOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions"
  , committeeTotalsRefundedPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions"
  , committeeTotalsRefundsRelatingConventionExp :: !(Maybe Double) -- ^ "refunds_relating_convention_exp"
  , committeeTotalsRepaymentsLoansMadeByCandidate :: !(Maybe Double) -- ^ "repayments_loans_made_by_candidate"
  , committeeTotalsRepaymentsOtherLoans :: !(Maybe Double) -- ^ "repayments_other_loans"
  , committeeTotalsReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeTotalsSharedFedActivity :: !(Maybe Double) -- ^ "shared_fed_activity"
  , committeeTotalsSharedFedActivityNonfed :: !(Maybe Double) -- ^ "shared_fed_activity_nonfed"
  , committeeTotalsSharedFedOperatingExpenditures :: !(Maybe Double) -- ^ "shared_fed_operating_expenditures"
  , committeeTotalsSharedNonfedOperatingExpenditures :: !(Maybe Double) -- ^ "shared_nonfed_operating_expenditures"
  , committeeTotalsTotalExpSubjectLimits :: !(Maybe Double) -- ^ "total_exp_subject_limits"
  , committeeTotalsTotalIndependentContributions :: !(Maybe Double) -- ^ "total_independent_contributions"
  , committeeTotalsTotalIndependentExpenditures :: !(Maybe Double) -- ^ "total_independent_expenditures"
  , committeeTotalsTotalOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures"
  , committeeTotalsTotalTransfers :: !(Maybe Double) -- ^ "total_transfers"
  , committeeTotalsTransactionCoverageDate :: !(Maybe Date) -- ^ "transaction_coverage_date"
  , committeeTotalsTransfersFromAffiliatedCommittee :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee"
  , committeeTotalsTransfersFromAffiliatedParty :: !(Maybe Double) -- ^ "transfers_from_affiliated_party"
  , committeeTotalsTransfersFromNonfedAccount :: !(Maybe Double) -- ^ "transfers_from_nonfed_account"
  , committeeTotalsTransfersFromNonfedLevin :: !(Maybe Double) -- ^ "transfers_from_nonfed_levin"
  , committeeTotalsTransfersFromOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee"
  , committeeTotalsTransfersToAffiliatedCommittee :: !(Maybe Double) -- ^ "transfers_to_affiliated_committee"
  , committeeTotalsTransfersToOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee"
  , committeeTotalsUnitemizedConventionExp :: !(Maybe Double) -- ^ "unitemized_convention_exp"
  , committeeTotalsUnitemizedOtherDisb :: !(Maybe Double) -- ^ "unitemized_other_disb"
  , committeeTotalsUnitemizedOtherIncome :: !(Maybe Double) -- ^ "unitemized_other_income"
  , committeeTotalsUnitemizedOtherRefunds :: !(Maybe Double) -- ^ "unitemized_other_refunds"
  , committeeTotalsUnitemizedRefundsRelatingConventionExp :: !(Maybe Double) -- ^ "unitemized_refunds_relating_convention_exp"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotals
instance A.FromJSON CommitteeTotals where
  parseJSON = A.withObject "CommitteeTotals" $ \o ->
    CommitteeTotals
      <$> (o .:? "all_loans_received")
      <*> (o .:? "all_other_loans")
      <*> (o .:? "allocated_federal_election_levin_share")
      <*> (o .:? "candidate_contribution")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "committee_designation")
      <*> (o .:? "committee_designation_full")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "contribution_refunds")
      <*> (o .:? "contributions")
      <*> (o .:? "convention_exp")
      <*> (o .:? "coordinated_expenditures_by_party_committee")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "disbursements")
      <*> (o .:? "exempt_legal_accounting_disbursement")
      <*> (o .:? "exp_prior_years_subject_limits")
      <*> (o .:? "exp_subject_limits")
      <*> (o .:? "fed_candidate_committee_contributions")
      <*> (o .:? "fed_candidate_contribution_refunds")
      <*> (o .:? "fed_disbursements")
      <*> (o .:? "fed_election_activity")
      <*> (o .:? "fed_operating_expenditures")
      <*> (o .:? "fed_receipts")
      <*> (o .:? "federal_funds")
      <*> (o .:? "fundraising_disbursements")
      <*> (o .:? "independent_expenditures")
      <*> (o .:? "individual_contributions")
      <*> (o .:? "individual_itemized_contributions")
      <*> (o .:? "individual_unitemized_contributions")
      <*> (o .:? "itemized_convention_exp")
      <*> (o .:? "itemized_other_disb")
      <*> (o .:? "itemized_other_income")
      <*> (o .:? "itemized_other_refunds")
      <*> (o .:? "itemized_refunds_relating_convention_exp")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "last_debts_owed_by_committee")
      <*> (o .:? "last_debts_owed_to_committee")
      <*> (o .:? "last_report_type_full")
      <*> (o .:? "last_report_year")
      <*> (o .:? "loan_repayments")
      <*> (o .:? "loan_repayments_candidate_loans")
      <*> (o .:? "loan_repayments_made")
      <*> (o .:? "loan_repayments_other_loans")
      <*> (o .:? "loan_repayments_received")
      <*> (o .:? "loans")
      <*> (o .:? "loans_and_loan_repayments_made")
      <*> (o .:? "loans_and_loan_repayments_received")
      <*> (o .:? "loans_made")
      <*> (o .:? "loans_made_by_candidate")
      <*> (o .:? "loans_received")
      <*> (o .:? "loans_received_from_candidate")
      <*> (o .:? "net_contributions")
      <*> (o .:? "net_operating_expenditures")
      <*> (o .:? "non_allocated_fed_election_activity")
      <*> (o .:? "offsets_to_fundraising_expenditures")
      <*> (o .:? "offsets_to_legal_accounting")
      <*> (o .:? "offsets_to_operating_expenditures")
      <*> (o .:? "operating_expenditures")
      <*> (o .:? "other_disbursements")
      <*> (o .:? "other_fed_operating_expenditures")
      <*> (o .:? "other_fed_receipts")
      <*> (o .:? "other_loans_received")
      <*> (o .:? "other_political_committee_contributions")
      <*> (o .:? "other_receipts")
      <*> (o .:? "other_refunds")
      <*> (o .:? "party_full")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions")
      <*> (o .:? "receipts")
      <*> (o .:? "refunded_individual_contributions")
      <*> (o .:? "refunded_other_political_committee_contributions")
      <*> (o .:? "refunded_political_party_committee_contributions")
      <*> (o .:? "refunds_relating_convention_exp")
      <*> (o .:? "repayments_loans_made_by_candidate")
      <*> (o .:? "repayments_other_loans")
      <*> (o .:? "report_form")
      <*> (o .:? "shared_fed_activity")
      <*> (o .:? "shared_fed_activity_nonfed")
      <*> (o .:? "shared_fed_operating_expenditures")
      <*> (o .:? "shared_nonfed_operating_expenditures")
      <*> (o .:? "total_exp_subject_limits")
      <*> (o .:? "total_independent_contributions")
      <*> (o .:? "total_independent_expenditures")
      <*> (o .:? "total_offsets_to_operating_expenditures")
      <*> (o .:? "total_transfers")
      <*> (o .:? "transaction_coverage_date")
      <*> (o .:? "transfers_from_affiliated_committee")
      <*> (o .:? "transfers_from_affiliated_party")
      <*> (o .:? "transfers_from_nonfed_account")
      <*> (o .:? "transfers_from_nonfed_levin")
      <*> (o .:? "transfers_from_other_authorized_committee")
      <*> (o .:? "transfers_to_affiliated_committee")
      <*> (o .:? "transfers_to_other_authorized_committee")
      <*> (o .:? "unitemized_convention_exp")
      <*> (o .:? "unitemized_other_disb")
      <*> (o .:? "unitemized_other_income")
      <*> (o .:? "unitemized_other_refunds")
      <*> (o .:? "unitemized_refunds_relating_convention_exp")

-- | ToJSON CommitteeTotals
instance A.ToJSON CommitteeTotals where
  toJSON CommitteeTotals {..} =
   _omitNulls
      [ "all_loans_received" .= committeeTotalsAllLoansReceived
      , "all_other_loans" .= committeeTotalsAllOtherLoans
      , "allocated_federal_election_levin_share" .= committeeTotalsAllocatedFederalElectionLevinShare
      , "candidate_contribution" .= committeeTotalsCandidateContribution
      , "cash_on_hand_beginning_period" .= committeeTotalsCashOnHandBeginningPeriod
      , "committee_designation" .= committeeTotalsCommitteeDesignation
      , "committee_designation_full" .= committeeTotalsCommitteeDesignationFull
      , "committee_id" .= committeeTotalsCommitteeId
      , "committee_name" .= committeeTotalsCommitteeName
      , "committee_type" .= committeeTotalsCommitteeType
      , "committee_type_full" .= committeeTotalsCommitteeTypeFull
      , "contribution_refunds" .= committeeTotalsContributionRefunds
      , "contributions" .= committeeTotalsContributions
      , "convention_exp" .= committeeTotalsConventionExp
      , "coordinated_expenditures_by_party_committee" .= committeeTotalsCoordinatedExpendituresByPartyCommittee
      , "coverage_end_date" .= committeeTotalsCoverageEndDate
      , "coverage_start_date" .= committeeTotalsCoverageStartDate
      , "cycle" .= committeeTotalsCycle
      , "disbursements" .= committeeTotalsDisbursements
      , "exempt_legal_accounting_disbursement" .= committeeTotalsExemptLegalAccountingDisbursement
      , "exp_prior_years_subject_limits" .= committeeTotalsExpPriorYearsSubjectLimits
      , "exp_subject_limits" .= committeeTotalsExpSubjectLimits
      , "fed_candidate_committee_contributions" .= committeeTotalsFedCandidateCommitteeContributions
      , "fed_candidate_contribution_refunds" .= committeeTotalsFedCandidateContributionRefunds
      , "fed_disbursements" .= committeeTotalsFedDisbursements
      , "fed_election_activity" .= committeeTotalsFedElectionActivity
      , "fed_operating_expenditures" .= committeeTotalsFedOperatingExpenditures
      , "fed_receipts" .= committeeTotalsFedReceipts
      , "federal_funds" .= committeeTotalsFederalFunds
      , "fundraising_disbursements" .= committeeTotalsFundraisingDisbursements
      , "independent_expenditures" .= committeeTotalsIndependentExpenditures
      , "individual_contributions" .= committeeTotalsIndividualContributions
      , "individual_itemized_contributions" .= committeeTotalsIndividualItemizedContributions
      , "individual_unitemized_contributions" .= committeeTotalsIndividualUnitemizedContributions
      , "itemized_convention_exp" .= committeeTotalsItemizedConventionExp
      , "itemized_other_disb" .= committeeTotalsItemizedOtherDisb
      , "itemized_other_income" .= committeeTotalsItemizedOtherIncome
      , "itemized_other_refunds" .= committeeTotalsItemizedOtherRefunds
      , "itemized_refunds_relating_convention_exp" .= committeeTotalsItemizedRefundsRelatingConventionExp
      , "last_beginning_image_number" .= committeeTotalsLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= committeeTotalsLastCashOnHandEndPeriod
      , "last_debts_owed_by_committee" .= committeeTotalsLastDebtsOwedByCommittee
      , "last_debts_owed_to_committee" .= committeeTotalsLastDebtsOwedToCommittee
      , "last_report_type_full" .= committeeTotalsLastReportTypeFull
      , "last_report_year" .= committeeTotalsLastReportYear
      , "loan_repayments" .= committeeTotalsLoanRepayments
      , "loan_repayments_candidate_loans" .= committeeTotalsLoanRepaymentsCandidateLoans
      , "loan_repayments_made" .= committeeTotalsLoanRepaymentsMade
      , "loan_repayments_other_loans" .= committeeTotalsLoanRepaymentsOtherLoans
      , "loan_repayments_received" .= committeeTotalsLoanRepaymentsReceived
      , "loans" .= committeeTotalsLoans
      , "loans_and_loan_repayments_made" .= committeeTotalsLoansAndLoanRepaymentsMade
      , "loans_and_loan_repayments_received" .= committeeTotalsLoansAndLoanRepaymentsReceived
      , "loans_made" .= committeeTotalsLoansMade
      , "loans_made_by_candidate" .= committeeTotalsLoansMadeByCandidate
      , "loans_received" .= committeeTotalsLoansReceived
      , "loans_received_from_candidate" .= committeeTotalsLoansReceivedFromCandidate
      , "net_contributions" .= committeeTotalsNetContributions
      , "net_operating_expenditures" .= committeeTotalsNetOperatingExpenditures
      , "non_allocated_fed_election_activity" .= committeeTotalsNonAllocatedFedElectionActivity
      , "offsets_to_fundraising_expenditures" .= committeeTotalsOffsetsToFundraisingExpenditures
      , "offsets_to_legal_accounting" .= committeeTotalsOffsetsToLegalAccounting
      , "offsets_to_operating_expenditures" .= committeeTotalsOffsetsToOperatingExpenditures
      , "operating_expenditures" .= committeeTotalsOperatingExpenditures
      , "other_disbursements" .= committeeTotalsOtherDisbursements
      , "other_fed_operating_expenditures" .= committeeTotalsOtherFedOperatingExpenditures
      , "other_fed_receipts" .= committeeTotalsOtherFedReceipts
      , "other_loans_received" .= committeeTotalsOtherLoansReceived
      , "other_political_committee_contributions" .= committeeTotalsOtherPoliticalCommitteeContributions
      , "other_receipts" .= committeeTotalsOtherReceipts
      , "other_refunds" .= committeeTotalsOtherRefunds
      , "party_full" .= committeeTotalsPartyFull
      , "pdf_url" .= committeeTotalsPdfUrl
      , "political_party_committee_contributions" .= committeeTotalsPoliticalPartyCommitteeContributions
      , "receipts" .= committeeTotalsReceipts
      , "refunded_individual_contributions" .= committeeTotalsRefundedIndividualContributions
      , "refunded_other_political_committee_contributions" .= committeeTotalsRefundedOtherPoliticalCommitteeContributions
      , "refunded_political_party_committee_contributions" .= committeeTotalsRefundedPoliticalPartyCommitteeContributions
      , "refunds_relating_convention_exp" .= committeeTotalsRefundsRelatingConventionExp
      , "repayments_loans_made_by_candidate" .= committeeTotalsRepaymentsLoansMadeByCandidate
      , "repayments_other_loans" .= committeeTotalsRepaymentsOtherLoans
      , "report_form" .= committeeTotalsReportForm
      , "shared_fed_activity" .= committeeTotalsSharedFedActivity
      , "shared_fed_activity_nonfed" .= committeeTotalsSharedFedActivityNonfed
      , "shared_fed_operating_expenditures" .= committeeTotalsSharedFedOperatingExpenditures
      , "shared_nonfed_operating_expenditures" .= committeeTotalsSharedNonfedOperatingExpenditures
      , "total_exp_subject_limits" .= committeeTotalsTotalExpSubjectLimits
      , "total_independent_contributions" .= committeeTotalsTotalIndependentContributions
      , "total_independent_expenditures" .= committeeTotalsTotalIndependentExpenditures
      , "total_offsets_to_operating_expenditures" .= committeeTotalsTotalOffsetsToOperatingExpenditures
      , "total_transfers" .= committeeTotalsTotalTransfers
      , "transaction_coverage_date" .= committeeTotalsTransactionCoverageDate
      , "transfers_from_affiliated_committee" .= committeeTotalsTransfersFromAffiliatedCommittee
      , "transfers_from_affiliated_party" .= committeeTotalsTransfersFromAffiliatedParty
      , "transfers_from_nonfed_account" .= committeeTotalsTransfersFromNonfedAccount
      , "transfers_from_nonfed_levin" .= committeeTotalsTransfersFromNonfedLevin
      , "transfers_from_other_authorized_committee" .= committeeTotalsTransfersFromOtherAuthorizedCommittee
      , "transfers_to_affiliated_committee" .= committeeTotalsTransfersToAffiliatedCommittee
      , "transfers_to_other_authorized_committee" .= committeeTotalsTransfersToOtherAuthorizedCommittee
      , "unitemized_convention_exp" .= committeeTotalsUnitemizedConventionExp
      , "unitemized_other_disb" .= committeeTotalsUnitemizedOtherDisb
      , "unitemized_other_income" .= committeeTotalsUnitemizedOtherIncome
      , "unitemized_other_refunds" .= committeeTotalsUnitemizedOtherRefunds
      , "unitemized_refunds_relating_convention_exp" .= committeeTotalsUnitemizedRefundsRelatingConventionExp
      ]


-- | Construct a value of type 'CommitteeTotals' (by applying it's required fields, if any)
mkCommitteeTotals
  :: Int -- ^ 'committeeTotalsCycle':  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  -> CommitteeTotals
mkCommitteeTotals committeeTotalsCycle =
  CommitteeTotals
  { committeeTotalsAllLoansReceived = Nothing
  , committeeTotalsAllOtherLoans = Nothing
  , committeeTotalsAllocatedFederalElectionLevinShare = Nothing
  , committeeTotalsCandidateContribution = Nothing
  , committeeTotalsCashOnHandBeginningPeriod = Nothing
  , committeeTotalsCommitteeDesignation = Nothing
  , committeeTotalsCommitteeDesignationFull = Nothing
  , committeeTotalsCommitteeId = Nothing
  , committeeTotalsCommitteeName = Nothing
  , committeeTotalsCommitteeType = Nothing
  , committeeTotalsCommitteeTypeFull = Nothing
  , committeeTotalsContributionRefunds = Nothing
  , committeeTotalsContributions = Nothing
  , committeeTotalsConventionExp = Nothing
  , committeeTotalsCoordinatedExpendituresByPartyCommittee = Nothing
  , committeeTotalsCoverageEndDate = Nothing
  , committeeTotalsCoverageStartDate = Nothing
  , committeeTotalsCycle
  , committeeTotalsDisbursements = Nothing
  , committeeTotalsExemptLegalAccountingDisbursement = Nothing
  , committeeTotalsExpPriorYearsSubjectLimits = Nothing
  , committeeTotalsExpSubjectLimits = Nothing
  , committeeTotalsFedCandidateCommitteeContributions = Nothing
  , committeeTotalsFedCandidateContributionRefunds = Nothing
  , committeeTotalsFedDisbursements = Nothing
  , committeeTotalsFedElectionActivity = Nothing
  , committeeTotalsFedOperatingExpenditures = Nothing
  , committeeTotalsFedReceipts = Nothing
  , committeeTotalsFederalFunds = Nothing
  , committeeTotalsFundraisingDisbursements = Nothing
  , committeeTotalsIndependentExpenditures = Nothing
  , committeeTotalsIndividualContributions = Nothing
  , committeeTotalsIndividualItemizedContributions = Nothing
  , committeeTotalsIndividualUnitemizedContributions = Nothing
  , committeeTotalsItemizedConventionExp = Nothing
  , committeeTotalsItemizedOtherDisb = Nothing
  , committeeTotalsItemizedOtherIncome = Nothing
  , committeeTotalsItemizedOtherRefunds = Nothing
  , committeeTotalsItemizedRefundsRelatingConventionExp = Nothing
  , committeeTotalsLastBeginningImageNumber = Nothing
  , committeeTotalsLastCashOnHandEndPeriod = Nothing
  , committeeTotalsLastDebtsOwedByCommittee = Nothing
  , committeeTotalsLastDebtsOwedToCommittee = Nothing
  , committeeTotalsLastReportTypeFull = Nothing
  , committeeTotalsLastReportYear = Nothing
  , committeeTotalsLoanRepayments = Nothing
  , committeeTotalsLoanRepaymentsCandidateLoans = Nothing
  , committeeTotalsLoanRepaymentsMade = Nothing
  , committeeTotalsLoanRepaymentsOtherLoans = Nothing
  , committeeTotalsLoanRepaymentsReceived = Nothing
  , committeeTotalsLoans = Nothing
  , committeeTotalsLoansAndLoanRepaymentsMade = Nothing
  , committeeTotalsLoansAndLoanRepaymentsReceived = Nothing
  , committeeTotalsLoansMade = Nothing
  , committeeTotalsLoansMadeByCandidate = Nothing
  , committeeTotalsLoansReceived = Nothing
  , committeeTotalsLoansReceivedFromCandidate = Nothing
  , committeeTotalsNetContributions = Nothing
  , committeeTotalsNetOperatingExpenditures = Nothing
  , committeeTotalsNonAllocatedFedElectionActivity = Nothing
  , committeeTotalsOffsetsToFundraisingExpenditures = Nothing
  , committeeTotalsOffsetsToLegalAccounting = Nothing
  , committeeTotalsOffsetsToOperatingExpenditures = Nothing
  , committeeTotalsOperatingExpenditures = Nothing
  , committeeTotalsOtherDisbursements = Nothing
  , committeeTotalsOtherFedOperatingExpenditures = Nothing
  , committeeTotalsOtherFedReceipts = Nothing
  , committeeTotalsOtherLoansReceived = Nothing
  , committeeTotalsOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsOtherReceipts = Nothing
  , committeeTotalsOtherRefunds = Nothing
  , committeeTotalsPartyFull = Nothing
  , committeeTotalsPdfUrl = Nothing
  , committeeTotalsPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsReceipts = Nothing
  , committeeTotalsRefundedIndividualContributions = Nothing
  , committeeTotalsRefundedOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsRefundedPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsRefundsRelatingConventionExp = Nothing
  , committeeTotalsRepaymentsLoansMadeByCandidate = Nothing
  , committeeTotalsRepaymentsOtherLoans = Nothing
  , committeeTotalsReportForm = Nothing
  , committeeTotalsSharedFedActivity = Nothing
  , committeeTotalsSharedFedActivityNonfed = Nothing
  , committeeTotalsSharedFedOperatingExpenditures = Nothing
  , committeeTotalsSharedNonfedOperatingExpenditures = Nothing
  , committeeTotalsTotalExpSubjectLimits = Nothing
  , committeeTotalsTotalIndependentContributions = Nothing
  , committeeTotalsTotalIndependentExpenditures = Nothing
  , committeeTotalsTotalOffsetsToOperatingExpenditures = Nothing
  , committeeTotalsTotalTransfers = Nothing
  , committeeTotalsTransactionCoverageDate = Nothing
  , committeeTotalsTransfersFromAffiliatedCommittee = Nothing
  , committeeTotalsTransfersFromAffiliatedParty = Nothing
  , committeeTotalsTransfersFromNonfedAccount = Nothing
  , committeeTotalsTransfersFromNonfedLevin = Nothing
  , committeeTotalsTransfersFromOtherAuthorizedCommittee = Nothing
  , committeeTotalsTransfersToAffiliatedCommittee = Nothing
  , committeeTotalsTransfersToOtherAuthorizedCommittee = Nothing
  , committeeTotalsUnitemizedConventionExp = Nothing
  , committeeTotalsUnitemizedOtherDisb = Nothing
  , committeeTotalsUnitemizedOtherIncome = Nothing
  , committeeTotalsUnitemizedOtherRefunds = Nothing
  , committeeTotalsUnitemizedRefundsRelatingConventionExp = Nothing
  }

-- ** CommitteeTotalsHouseSenate
-- | CommitteeTotalsHouseSenate
data CommitteeTotalsHouseSenate = CommitteeTotalsHouseSenate
  { committeeTotalsHouseSenateAllOtherLoans :: !(Maybe Double) -- ^ "all_other_loans"
  , committeeTotalsHouseSenateCandidateContribution :: !(Maybe Double) -- ^ "candidate_contribution"
  , committeeTotalsHouseSenateCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period"
  , committeeTotalsHouseSenateCommitteeDesignation :: !(Maybe Text) -- ^ "committee_designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsHouseSenateCommitteeDesignationFull :: !(Maybe Text) -- ^ "committee_designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsHouseSenateCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeTotalsHouseSenateCommitteeName :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeTotalsHouseSenateCommitteeType :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsHouseSenateCommitteeTypeFull :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsHouseSenateContributionRefunds :: !(Maybe Double) -- ^ "contribution_refunds"
  , committeeTotalsHouseSenateContributions :: !(Maybe Double) -- ^ "contributions" - Contribution
  , committeeTotalsHouseSenateCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , committeeTotalsHouseSenateCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , committeeTotalsHouseSenateCycle :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeTotalsHouseSenateDisbursements :: !(Maybe Double) -- ^ "disbursements" - Disbursements
  , committeeTotalsHouseSenateIndividualContributions :: !(Maybe Double) -- ^ "individual_contributions"
  , committeeTotalsHouseSenateIndividualItemizedContributions :: !(Maybe Double) -- ^ "individual_itemized_contributions" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
  , committeeTotalsHouseSenateIndividualUnitemizedContributions :: !(Maybe Double) -- ^ "individual_unitemized_contributions" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
  , committeeTotalsHouseSenateLastBeginningImageNumber :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , committeeTotalsHouseSenateLastCashOnHandEndPeriod :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , committeeTotalsHouseSenateLastDebtsOwedByCommittee :: !(Maybe Double) -- ^ "last_debts_owed_by_committee"
  , committeeTotalsHouseSenateLastDebtsOwedToCommittee :: !(Maybe Double) -- ^ "last_debts_owed_to_committee"
  , committeeTotalsHouseSenateLastReportTypeFull :: !(Maybe Text) -- ^ "last_report_type_full"
  , committeeTotalsHouseSenateLastReportYear :: !(Maybe Int) -- ^ "last_report_year"
  , committeeTotalsHouseSenateLoanRepayments :: !(Maybe Double) -- ^ "loan_repayments"
  , committeeTotalsHouseSenateLoanRepaymentsCandidateLoans :: !(Maybe Double) -- ^ "loan_repayments_candidate_loans"
  , committeeTotalsHouseSenateLoanRepaymentsOtherLoans :: !(Maybe Double) -- ^ "loan_repayments_other_loans"
  , committeeTotalsHouseSenateLoans :: !(Maybe Double) -- ^ "loans"
  , committeeTotalsHouseSenateLoansMadeByCandidate :: !(Maybe Double) -- ^ "loans_made_by_candidate"
  , committeeTotalsHouseSenateNetContributions :: !(Maybe Double) -- ^ "net_contributions"
  , committeeTotalsHouseSenateNetOperatingExpenditures :: !(Maybe Double) -- ^ "net_operating_expenditures"
  , committeeTotalsHouseSenateOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures"
  , committeeTotalsHouseSenateOperatingExpenditures :: !(Maybe Double) -- ^ "operating_expenditures"
  , committeeTotalsHouseSenateOtherDisbursements :: !(Maybe Double) -- ^ "other_disbursements"
  , committeeTotalsHouseSenateOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "other_political_committee_contributions"
  , committeeTotalsHouseSenateOtherReceipts :: !(Maybe Double) -- ^ "other_receipts"
  , committeeTotalsHouseSenatePartyFull :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , committeeTotalsHouseSenatePdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeTotalsHouseSenatePoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "political_party_committee_contributions"
  , committeeTotalsHouseSenateReceipts :: !(Maybe Double) -- ^ "receipts"
  , committeeTotalsHouseSenateRefundedIndividualContributions :: !(Maybe Double) -- ^ "refunded_individual_contributions"
  , committeeTotalsHouseSenateRefundedOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions"
  , committeeTotalsHouseSenateRefundedPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions"
  , committeeTotalsHouseSenateReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeTotalsHouseSenateTransactionCoverageDate :: !(Maybe Date) -- ^ "transaction_coverage_date"
  , committeeTotalsHouseSenateTransfersFromOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_from_other_authorized_committee"
  , committeeTotalsHouseSenateTransfersToOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsHouseSenate
instance A.FromJSON CommitteeTotalsHouseSenate where
  parseJSON = A.withObject "CommitteeTotalsHouseSenate" $ \o ->
    CommitteeTotalsHouseSenate
      <$> (o .:? "all_other_loans")
      <*> (o .:? "candidate_contribution")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "committee_designation")
      <*> (o .:? "committee_designation_full")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "contribution_refunds")
      <*> (o .:? "contributions")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "disbursements")
      <*> (o .:? "individual_contributions")
      <*> (o .:? "individual_itemized_contributions")
      <*> (o .:? "individual_unitemized_contributions")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "last_debts_owed_by_committee")
      <*> (o .:? "last_debts_owed_to_committee")
      <*> (o .:? "last_report_type_full")
      <*> (o .:? "last_report_year")
      <*> (o .:? "loan_repayments")
      <*> (o .:? "loan_repayments_candidate_loans")
      <*> (o .:? "loan_repayments_other_loans")
      <*> (o .:? "loans")
      <*> (o .:? "loans_made_by_candidate")
      <*> (o .:? "net_contributions")
      <*> (o .:? "net_operating_expenditures")
      <*> (o .:? "offsets_to_operating_expenditures")
      <*> (o .:? "operating_expenditures")
      <*> (o .:? "other_disbursements")
      <*> (o .:? "other_political_committee_contributions")
      <*> (o .:? "other_receipts")
      <*> (o .:? "party_full")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions")
      <*> (o .:? "receipts")
      <*> (o .:? "refunded_individual_contributions")
      <*> (o .:? "refunded_other_political_committee_contributions")
      <*> (o .:? "refunded_political_party_committee_contributions")
      <*> (o .:? "report_form")
      <*> (o .:? "transaction_coverage_date")
      <*> (o .:? "transfers_from_other_authorized_committee")
      <*> (o .:? "transfers_to_other_authorized_committee")

-- | ToJSON CommitteeTotalsHouseSenate
instance A.ToJSON CommitteeTotalsHouseSenate where
  toJSON CommitteeTotalsHouseSenate {..} =
   _omitNulls
      [ "all_other_loans" .= committeeTotalsHouseSenateAllOtherLoans
      , "candidate_contribution" .= committeeTotalsHouseSenateCandidateContribution
      , "cash_on_hand_beginning_period" .= committeeTotalsHouseSenateCashOnHandBeginningPeriod
      , "committee_designation" .= committeeTotalsHouseSenateCommitteeDesignation
      , "committee_designation_full" .= committeeTotalsHouseSenateCommitteeDesignationFull
      , "committee_id" .= committeeTotalsHouseSenateCommitteeId
      , "committee_name" .= committeeTotalsHouseSenateCommitteeName
      , "committee_type" .= committeeTotalsHouseSenateCommitteeType
      , "committee_type_full" .= committeeTotalsHouseSenateCommitteeTypeFull
      , "contribution_refunds" .= committeeTotalsHouseSenateContributionRefunds
      , "contributions" .= committeeTotalsHouseSenateContributions
      , "coverage_end_date" .= committeeTotalsHouseSenateCoverageEndDate
      , "coverage_start_date" .= committeeTotalsHouseSenateCoverageStartDate
      , "cycle" .= committeeTotalsHouseSenateCycle
      , "disbursements" .= committeeTotalsHouseSenateDisbursements
      , "individual_contributions" .= committeeTotalsHouseSenateIndividualContributions
      , "individual_itemized_contributions" .= committeeTotalsHouseSenateIndividualItemizedContributions
      , "individual_unitemized_contributions" .= committeeTotalsHouseSenateIndividualUnitemizedContributions
      , "last_beginning_image_number" .= committeeTotalsHouseSenateLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= committeeTotalsHouseSenateLastCashOnHandEndPeriod
      , "last_debts_owed_by_committee" .= committeeTotalsHouseSenateLastDebtsOwedByCommittee
      , "last_debts_owed_to_committee" .= committeeTotalsHouseSenateLastDebtsOwedToCommittee
      , "last_report_type_full" .= committeeTotalsHouseSenateLastReportTypeFull
      , "last_report_year" .= committeeTotalsHouseSenateLastReportYear
      , "loan_repayments" .= committeeTotalsHouseSenateLoanRepayments
      , "loan_repayments_candidate_loans" .= committeeTotalsHouseSenateLoanRepaymentsCandidateLoans
      , "loan_repayments_other_loans" .= committeeTotalsHouseSenateLoanRepaymentsOtherLoans
      , "loans" .= committeeTotalsHouseSenateLoans
      , "loans_made_by_candidate" .= committeeTotalsHouseSenateLoansMadeByCandidate
      , "net_contributions" .= committeeTotalsHouseSenateNetContributions
      , "net_operating_expenditures" .= committeeTotalsHouseSenateNetOperatingExpenditures
      , "offsets_to_operating_expenditures" .= committeeTotalsHouseSenateOffsetsToOperatingExpenditures
      , "operating_expenditures" .= committeeTotalsHouseSenateOperatingExpenditures
      , "other_disbursements" .= committeeTotalsHouseSenateOtherDisbursements
      , "other_political_committee_contributions" .= committeeTotalsHouseSenateOtherPoliticalCommitteeContributions
      , "other_receipts" .= committeeTotalsHouseSenateOtherReceipts
      , "party_full" .= committeeTotalsHouseSenatePartyFull
      , "pdf_url" .= committeeTotalsHouseSenatePdfUrl
      , "political_party_committee_contributions" .= committeeTotalsHouseSenatePoliticalPartyCommitteeContributions
      , "receipts" .= committeeTotalsHouseSenateReceipts
      , "refunded_individual_contributions" .= committeeTotalsHouseSenateRefundedIndividualContributions
      , "refunded_other_political_committee_contributions" .= committeeTotalsHouseSenateRefundedOtherPoliticalCommitteeContributions
      , "refunded_political_party_committee_contributions" .= committeeTotalsHouseSenateRefundedPoliticalPartyCommitteeContributions
      , "report_form" .= committeeTotalsHouseSenateReportForm
      , "transaction_coverage_date" .= committeeTotalsHouseSenateTransactionCoverageDate
      , "transfers_from_other_authorized_committee" .= committeeTotalsHouseSenateTransfersFromOtherAuthorizedCommittee
      , "transfers_to_other_authorized_committee" .= committeeTotalsHouseSenateTransfersToOtherAuthorizedCommittee
      ]


-- | Construct a value of type 'CommitteeTotalsHouseSenate' (by applying it's required fields, if any)
mkCommitteeTotalsHouseSenate
  :: Int -- ^ 'committeeTotalsHouseSenateCycle':  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  -> CommitteeTotalsHouseSenate
mkCommitteeTotalsHouseSenate committeeTotalsHouseSenateCycle =
  CommitteeTotalsHouseSenate
  { committeeTotalsHouseSenateAllOtherLoans = Nothing
  , committeeTotalsHouseSenateCandidateContribution = Nothing
  , committeeTotalsHouseSenateCashOnHandBeginningPeriod = Nothing
  , committeeTotalsHouseSenateCommitteeDesignation = Nothing
  , committeeTotalsHouseSenateCommitteeDesignationFull = Nothing
  , committeeTotalsHouseSenateCommitteeId = Nothing
  , committeeTotalsHouseSenateCommitteeName = Nothing
  , committeeTotalsHouseSenateCommitteeType = Nothing
  , committeeTotalsHouseSenateCommitteeTypeFull = Nothing
  , committeeTotalsHouseSenateContributionRefunds = Nothing
  , committeeTotalsHouseSenateContributions = Nothing
  , committeeTotalsHouseSenateCoverageEndDate = Nothing
  , committeeTotalsHouseSenateCoverageStartDate = Nothing
  , committeeTotalsHouseSenateCycle
  , committeeTotalsHouseSenateDisbursements = Nothing
  , committeeTotalsHouseSenateIndividualContributions = Nothing
  , committeeTotalsHouseSenateIndividualItemizedContributions = Nothing
  , committeeTotalsHouseSenateIndividualUnitemizedContributions = Nothing
  , committeeTotalsHouseSenateLastBeginningImageNumber = Nothing
  , committeeTotalsHouseSenateLastCashOnHandEndPeriod = Nothing
  , committeeTotalsHouseSenateLastDebtsOwedByCommittee = Nothing
  , committeeTotalsHouseSenateLastDebtsOwedToCommittee = Nothing
  , committeeTotalsHouseSenateLastReportTypeFull = Nothing
  , committeeTotalsHouseSenateLastReportYear = Nothing
  , committeeTotalsHouseSenateLoanRepayments = Nothing
  , committeeTotalsHouseSenateLoanRepaymentsCandidateLoans = Nothing
  , committeeTotalsHouseSenateLoanRepaymentsOtherLoans = Nothing
  , committeeTotalsHouseSenateLoans = Nothing
  , committeeTotalsHouseSenateLoansMadeByCandidate = Nothing
  , committeeTotalsHouseSenateNetContributions = Nothing
  , committeeTotalsHouseSenateNetOperatingExpenditures = Nothing
  , committeeTotalsHouseSenateOffsetsToOperatingExpenditures = Nothing
  , committeeTotalsHouseSenateOperatingExpenditures = Nothing
  , committeeTotalsHouseSenateOtherDisbursements = Nothing
  , committeeTotalsHouseSenateOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsHouseSenateOtherReceipts = Nothing
  , committeeTotalsHouseSenatePartyFull = Nothing
  , committeeTotalsHouseSenatePdfUrl = Nothing
  , committeeTotalsHouseSenatePoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsHouseSenateReceipts = Nothing
  , committeeTotalsHouseSenateRefundedIndividualContributions = Nothing
  , committeeTotalsHouseSenateRefundedOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsHouseSenateRefundedPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsHouseSenateReportForm = Nothing
  , committeeTotalsHouseSenateTransactionCoverageDate = Nothing
  , committeeTotalsHouseSenateTransfersFromOtherAuthorizedCommittee = Nothing
  , committeeTotalsHouseSenateTransfersToOtherAuthorizedCommittee = Nothing
  }

-- ** CommitteeTotalsHouseSenatePage
-- | CommitteeTotalsHouseSenatePage
data CommitteeTotalsHouseSenatePage = CommitteeTotalsHouseSenatePage
  { committeeTotalsHouseSenatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeTotalsHouseSenatePageResults :: !(Maybe [CommitteeTotalsHouseSenate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsHouseSenatePage
instance A.FromJSON CommitteeTotalsHouseSenatePage where
  parseJSON = A.withObject "CommitteeTotalsHouseSenatePage" $ \o ->
    CommitteeTotalsHouseSenatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeTotalsHouseSenatePage
instance A.ToJSON CommitteeTotalsHouseSenatePage where
  toJSON CommitteeTotalsHouseSenatePage {..} =
   _omitNulls
      [ "pagination" .= committeeTotalsHouseSenatePagePagination
      , "results" .= committeeTotalsHouseSenatePageResults
      ]


-- | Construct a value of type 'CommitteeTotalsHouseSenatePage' (by applying it's required fields, if any)
mkCommitteeTotalsHouseSenatePage
  :: CommitteeTotalsHouseSenatePage
mkCommitteeTotalsHouseSenatePage =
  CommitteeTotalsHouseSenatePage
  { committeeTotalsHouseSenatePagePagination = Nothing
  , committeeTotalsHouseSenatePageResults = Nothing
  }

-- ** CommitteeTotalsIEOnly
-- | CommitteeTotalsIEOnly
data CommitteeTotalsIEOnly = CommitteeTotalsIEOnly
  { committeeTotalsIEOnlyCommitteeId                   :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeTotalsIEOnlyCoverageEndDate               :: !(Maybe DateTime) -- ^ "coverage_end_date" - Ending date of the reporting period
  , committeeTotalsIEOnlyCoverageStartDate             :: !(Maybe DateTime) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , committeeTotalsIEOnlyCycle                         :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeTotalsIEOnlyLastBeginningImageNumber      :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , committeeTotalsIEOnlyLastCashOnHandEndPeriod       :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , committeeTotalsIEOnlyPdfUrl                        :: !(Maybe Text) -- ^ "pdf_url"
  , committeeTotalsIEOnlyReportForm                    :: !(Maybe Text) -- ^ "report_form"
  , committeeTotalsIEOnlyTotalIndependentContributions :: !(Maybe Double) -- ^ "total_independent_contributions"
  , committeeTotalsIEOnlyTotalIndependentExpenditures  :: !(Maybe Double) -- ^ "total_independent_expenditures"
  , committeeTotalsIEOnlyTransactionCoverageDate       :: !(Maybe Date) -- ^ "transaction_coverage_date"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsIEOnly
instance A.FromJSON CommitteeTotalsIEOnly where
  parseJSON = A.withObject "CommitteeTotalsIEOnly" $ \o ->
    CommitteeTotalsIEOnly
      <$> (o .:? "committee_id")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "cycle")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "pdf_url")
      <*> (o .:? "report_form")
      <*> (o .:? "total_independent_contributions")
      <*> (o .:? "total_independent_expenditures")
      <*> (o .:? "transaction_coverage_date")

-- | ToJSON CommitteeTotalsIEOnly
instance A.ToJSON CommitteeTotalsIEOnly where
  toJSON CommitteeTotalsIEOnly {..} =
   _omitNulls
      [ "committee_id" .= committeeTotalsIEOnlyCommitteeId
      , "coverage_end_date" .= committeeTotalsIEOnlyCoverageEndDate
      , "coverage_start_date" .= committeeTotalsIEOnlyCoverageStartDate
      , "cycle" .= committeeTotalsIEOnlyCycle
      , "last_beginning_image_number" .= committeeTotalsIEOnlyLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= committeeTotalsIEOnlyLastCashOnHandEndPeriod
      , "pdf_url" .= committeeTotalsIEOnlyPdfUrl
      , "report_form" .= committeeTotalsIEOnlyReportForm
      , "total_independent_contributions" .= committeeTotalsIEOnlyTotalIndependentContributions
      , "total_independent_expenditures" .= committeeTotalsIEOnlyTotalIndependentExpenditures
      , "transaction_coverage_date" .= committeeTotalsIEOnlyTransactionCoverageDate
      ]


-- | Construct a value of type 'CommitteeTotalsIEOnly' (by applying it's required fields, if any)
mkCommitteeTotalsIEOnly
  :: CommitteeTotalsIEOnly
mkCommitteeTotalsIEOnly =
  CommitteeTotalsIEOnly
  { committeeTotalsIEOnlyCommitteeId = Nothing
  , committeeTotalsIEOnlyCoverageEndDate = Nothing
  , committeeTotalsIEOnlyCoverageStartDate = Nothing
  , committeeTotalsIEOnlyCycle = Nothing
  , committeeTotalsIEOnlyLastBeginningImageNumber = Nothing
  , committeeTotalsIEOnlyLastCashOnHandEndPeriod = Nothing
  , committeeTotalsIEOnlyPdfUrl = Nothing
  , committeeTotalsIEOnlyReportForm = Nothing
  , committeeTotalsIEOnlyTotalIndependentContributions = Nothing
  , committeeTotalsIEOnlyTotalIndependentExpenditures = Nothing
  , committeeTotalsIEOnlyTransactionCoverageDate = Nothing
  }

-- ** CommitteeTotalsIEOnlyPage
-- | CommitteeTotalsIEOnlyPage
data CommitteeTotalsIEOnlyPage = CommitteeTotalsIEOnlyPage
  { committeeTotalsIEOnlyPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeTotalsIEOnlyPageResults    :: !(Maybe [CommitteeTotalsIEOnly]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsIEOnlyPage
instance A.FromJSON CommitteeTotalsIEOnlyPage where
  parseJSON = A.withObject "CommitteeTotalsIEOnlyPage" $ \o ->
    CommitteeTotalsIEOnlyPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeTotalsIEOnlyPage
instance A.ToJSON CommitteeTotalsIEOnlyPage where
  toJSON CommitteeTotalsIEOnlyPage {..} =
   _omitNulls
      [ "pagination" .= committeeTotalsIEOnlyPagePagination
      , "results" .= committeeTotalsIEOnlyPageResults
      ]


-- | Construct a value of type 'CommitteeTotalsIEOnlyPage' (by applying it's required fields, if any)
mkCommitteeTotalsIEOnlyPage
  :: CommitteeTotalsIEOnlyPage
mkCommitteeTotalsIEOnlyPage =
  CommitteeTotalsIEOnlyPage
  { committeeTotalsIEOnlyPagePagination = Nothing
  , committeeTotalsIEOnlyPageResults = Nothing
  }

-- ** CommitteeTotalsPacParty
-- | CommitteeTotalsPacParty
data CommitteeTotalsPacParty = CommitteeTotalsPacParty
  { committeeTotalsPacPartyAllLoansReceived :: !(Maybe Double) -- ^ "all_loans_received"
  , committeeTotalsPacPartyAllocatedFederalElectionLevinShare :: !(Maybe Double) -- ^ "allocated_federal_election_levin_share"
  , committeeTotalsPacPartyCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period"
  , committeeTotalsPacPartyCommitteeDesignation :: !(Maybe Text) -- ^ "committee_designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsPacPartyCommitteeDesignationFull :: !(Maybe Text) -- ^ "committee_designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsPacPartyCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeTotalsPacPartyCommitteeName :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeTotalsPacPartyCommitteeType :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsPacPartyCommitteeTypeFull :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsPacPartyContributionRefunds :: !(Maybe Double) -- ^ "contribution_refunds"
  , committeeTotalsPacPartyContributions :: !(Maybe Double) -- ^ "contributions" - Contribution
  , committeeTotalsPacPartyConventionExp :: !(Maybe Double) -- ^ "convention_exp"
  , committeeTotalsPacPartyCoordinatedExpendituresByPartyCommittee :: !(Maybe Double) -- ^ "coordinated_expenditures_by_party_committee"
  , committeeTotalsPacPartyCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , committeeTotalsPacPartyCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , committeeTotalsPacPartyCycle :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeTotalsPacPartyDisbursements :: !(Maybe Double) -- ^ "disbursements" - Disbursements
  , committeeTotalsPacPartyExpPriorYearsSubjectLimits :: !(Maybe Double) -- ^ "exp_prior_years_subject_limits"
  , committeeTotalsPacPartyExpSubjectLimits :: !(Maybe Double) -- ^ "exp_subject_limits"
  , committeeTotalsPacPartyFedCandidateCommitteeContributions :: !(Maybe Double) -- ^ "fed_candidate_committee_contributions"
  , committeeTotalsPacPartyFedCandidateContributionRefunds :: !(Maybe Double) -- ^ "fed_candidate_contribution_refunds"
  , committeeTotalsPacPartyFedDisbursements :: !(Maybe Double) -- ^ "fed_disbursements"
  , committeeTotalsPacPartyFedElectionActivity :: !(Maybe Double) -- ^ "fed_election_activity"
  , committeeTotalsPacPartyFedOperatingExpenditures :: !(Maybe Double) -- ^ "fed_operating_expenditures"
  , committeeTotalsPacPartyFedReceipts :: !(Maybe Double) -- ^ "fed_receipts"
  , committeeTotalsPacPartyFederalFunds :: !(Maybe Double) -- ^ "federal_funds"
  , committeeTotalsPacPartyIndependentExpenditures :: !(Maybe Double) -- ^ "independent_expenditures"
  , committeeTotalsPacPartyIndividualContributions :: !(Maybe Double) -- ^ "individual_contributions"
  , committeeTotalsPacPartyIndividualItemizedContributions :: !(Maybe Double) -- ^ "individual_itemized_contributions" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
  , committeeTotalsPacPartyIndividualUnitemizedContributions :: !(Maybe Double) -- ^ "individual_unitemized_contributions" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
  , committeeTotalsPacPartyItemizedConventionExp :: !(Maybe Double) -- ^ "itemized_convention_exp"
  , committeeTotalsPacPartyItemizedOtherDisb :: !(Maybe Double) -- ^ "itemized_other_disb"
  , committeeTotalsPacPartyItemizedOtherIncome :: !(Maybe Double) -- ^ "itemized_other_income"
  , committeeTotalsPacPartyItemizedOtherRefunds :: !(Maybe Double) -- ^ "itemized_other_refunds"
  , committeeTotalsPacPartyItemizedRefundsRelatingConventionExp :: !(Maybe Double) -- ^ "itemized_refunds_relating_convention_exp"
  , committeeTotalsPacPartyLastBeginningImageNumber :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , committeeTotalsPacPartyLastCashOnHandEndPeriod :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , committeeTotalsPacPartyLastDebtsOwedByCommittee :: !(Maybe Double) -- ^ "last_debts_owed_by_committee"
  , committeeTotalsPacPartyLastDebtsOwedToCommittee :: !(Maybe Double) -- ^ "last_debts_owed_to_committee"
  , committeeTotalsPacPartyLastReportTypeFull :: !(Maybe Text) -- ^ "last_report_type_full"
  , committeeTotalsPacPartyLastReportYear :: !(Maybe Int) -- ^ "last_report_year"
  , committeeTotalsPacPartyLoanRepaymentsMade :: !(Maybe Double) -- ^ "loan_repayments_made"
  , committeeTotalsPacPartyLoanRepaymentsReceived :: !(Maybe Double) -- ^ "loan_repayments_received"
  , committeeTotalsPacPartyLoansAndLoanRepaymentsMade :: !(Maybe Double) -- ^ "loans_and_loan_repayments_made"
  , committeeTotalsPacPartyLoansAndLoanRepaymentsReceived :: !(Maybe Double) -- ^ "loans_and_loan_repayments_received"
  , committeeTotalsPacPartyLoansMade :: !(Maybe Double) -- ^ "loans_made"
  , committeeTotalsPacPartyNetContributions :: !(Maybe Double) -- ^ "net_contributions"
  , committeeTotalsPacPartyNetOperatingExpenditures :: !(Maybe Double) -- ^ "net_operating_expenditures"
  , committeeTotalsPacPartyNonAllocatedFedElectionActivity :: !(Maybe Double) -- ^ "non_allocated_fed_election_activity"
  , committeeTotalsPacPartyOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures"
  , committeeTotalsPacPartyOperatingExpenditures :: !(Maybe Double) -- ^ "operating_expenditures"
  , committeeTotalsPacPartyOtherDisbursements :: !(Maybe Double) -- ^ "other_disbursements"
  , committeeTotalsPacPartyOtherFedOperatingExpenditures :: !(Maybe Double) -- ^ "other_fed_operating_expenditures"
  , committeeTotalsPacPartyOtherFedReceipts :: !(Maybe Double) -- ^ "other_fed_receipts"
  , committeeTotalsPacPartyOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "other_political_committee_contributions"
  , committeeTotalsPacPartyOtherRefunds :: !(Maybe Double) -- ^ "other_refunds"
  , committeeTotalsPacPartyPartyFull :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , committeeTotalsPacPartyPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeTotalsPacPartyPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "political_party_committee_contributions"
  , committeeTotalsPacPartyReceipts :: !(Maybe Double) -- ^ "receipts"
  , committeeTotalsPacPartyRefundedIndividualContributions :: !(Maybe Double) -- ^ "refunded_individual_contributions"
  , committeeTotalsPacPartyRefundedOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions"
  , committeeTotalsPacPartyRefundedPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions"
  , committeeTotalsPacPartyRefundsRelatingConventionExp :: !(Maybe Double) -- ^ "refunds_relating_convention_exp"
  , committeeTotalsPacPartyReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeTotalsPacPartySharedFedActivity :: !(Maybe Double) -- ^ "shared_fed_activity"
  , committeeTotalsPacPartySharedFedActivityNonfed :: !(Maybe Double) -- ^ "shared_fed_activity_nonfed"
  , committeeTotalsPacPartySharedFedOperatingExpenditures :: !(Maybe Double) -- ^ "shared_fed_operating_expenditures"
  , committeeTotalsPacPartySharedNonfedOperatingExpenditures :: !(Maybe Double) -- ^ "shared_nonfed_operating_expenditures"
  , committeeTotalsPacPartyTotalExpSubjectLimits :: !(Maybe Double) -- ^ "total_exp_subject_limits"
  , committeeTotalsPacPartyTotalTransfers :: !(Maybe Double) -- ^ "total_transfers"
  , committeeTotalsPacPartyTransactionCoverageDate :: !(Maybe Date) -- ^ "transaction_coverage_date"
  , committeeTotalsPacPartyTransfersFromAffiliatedParty :: !(Maybe Double) -- ^ "transfers_from_affiliated_party"
  , committeeTotalsPacPartyTransfersFromNonfedAccount :: !(Maybe Double) -- ^ "transfers_from_nonfed_account"
  , committeeTotalsPacPartyTransfersFromNonfedLevin :: !(Maybe Double) -- ^ "transfers_from_nonfed_levin"
  , committeeTotalsPacPartyTransfersToAffiliatedCommittee :: !(Maybe Double) -- ^ "transfers_to_affiliated_committee"
  , committeeTotalsPacPartyUnitemizedConventionExp :: !(Maybe Double) -- ^ "unitemized_convention_exp"
  , committeeTotalsPacPartyUnitemizedOtherDisb :: !(Maybe Double) -- ^ "unitemized_other_disb"
  , committeeTotalsPacPartyUnitemizedOtherIncome :: !(Maybe Double) -- ^ "unitemized_other_income"
  , committeeTotalsPacPartyUnitemizedOtherRefunds :: !(Maybe Double) -- ^ "unitemized_other_refunds"
  , committeeTotalsPacPartyUnitemizedRefundsRelatingConventionExp :: !(Maybe Double) -- ^ "unitemized_refunds_relating_convention_exp"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsPacParty
instance A.FromJSON CommitteeTotalsPacParty where
  parseJSON = A.withObject "CommitteeTotalsPacParty" $ \o ->
    CommitteeTotalsPacParty
      <$> (o .:? "all_loans_received")
      <*> (o .:? "allocated_federal_election_levin_share")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "committee_designation")
      <*> (o .:? "committee_designation_full")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "contribution_refunds")
      <*> (o .:? "contributions")
      <*> (o .:? "convention_exp")
      <*> (o .:? "coordinated_expenditures_by_party_committee")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "disbursements")
      <*> (o .:? "exp_prior_years_subject_limits")
      <*> (o .:? "exp_subject_limits")
      <*> (o .:? "fed_candidate_committee_contributions")
      <*> (o .:? "fed_candidate_contribution_refunds")
      <*> (o .:? "fed_disbursements")
      <*> (o .:? "fed_election_activity")
      <*> (o .:? "fed_operating_expenditures")
      <*> (o .:? "fed_receipts")
      <*> (o .:? "federal_funds")
      <*> (o .:? "independent_expenditures")
      <*> (o .:? "individual_contributions")
      <*> (o .:? "individual_itemized_contributions")
      <*> (o .:? "individual_unitemized_contributions")
      <*> (o .:? "itemized_convention_exp")
      <*> (o .:? "itemized_other_disb")
      <*> (o .:? "itemized_other_income")
      <*> (o .:? "itemized_other_refunds")
      <*> (o .:? "itemized_refunds_relating_convention_exp")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "last_debts_owed_by_committee")
      <*> (o .:? "last_debts_owed_to_committee")
      <*> (o .:? "last_report_type_full")
      <*> (o .:? "last_report_year")
      <*> (o .:? "loan_repayments_made")
      <*> (o .:? "loan_repayments_received")
      <*> (o .:? "loans_and_loan_repayments_made")
      <*> (o .:? "loans_and_loan_repayments_received")
      <*> (o .:? "loans_made")
      <*> (o .:? "net_contributions")
      <*> (o .:? "net_operating_expenditures")
      <*> (o .:? "non_allocated_fed_election_activity")
      <*> (o .:? "offsets_to_operating_expenditures")
      <*> (o .:? "operating_expenditures")
      <*> (o .:? "other_disbursements")
      <*> (o .:? "other_fed_operating_expenditures")
      <*> (o .:? "other_fed_receipts")
      <*> (o .:? "other_political_committee_contributions")
      <*> (o .:? "other_refunds")
      <*> (o .:? "party_full")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions")
      <*> (o .:? "receipts")
      <*> (o .:? "refunded_individual_contributions")
      <*> (o .:? "refunded_other_political_committee_contributions")
      <*> (o .:? "refunded_political_party_committee_contributions")
      <*> (o .:? "refunds_relating_convention_exp")
      <*> (o .:? "report_form")
      <*> (o .:? "shared_fed_activity")
      <*> (o .:? "shared_fed_activity_nonfed")
      <*> (o .:? "shared_fed_operating_expenditures")
      <*> (o .:? "shared_nonfed_operating_expenditures")
      <*> (o .:? "total_exp_subject_limits")
      <*> (o .:? "total_transfers")
      <*> (o .:? "transaction_coverage_date")
      <*> (o .:? "transfers_from_affiliated_party")
      <*> (o .:? "transfers_from_nonfed_account")
      <*> (o .:? "transfers_from_nonfed_levin")
      <*> (o .:? "transfers_to_affiliated_committee")
      <*> (o .:? "unitemized_convention_exp")
      <*> (o .:? "unitemized_other_disb")
      <*> (o .:? "unitemized_other_income")
      <*> (o .:? "unitemized_other_refunds")
      <*> (o .:? "unitemized_refunds_relating_convention_exp")

-- | ToJSON CommitteeTotalsPacParty
instance A.ToJSON CommitteeTotalsPacParty where
  toJSON CommitteeTotalsPacParty {..} =
   _omitNulls
      [ "all_loans_received" .= committeeTotalsPacPartyAllLoansReceived
      , "allocated_federal_election_levin_share" .= committeeTotalsPacPartyAllocatedFederalElectionLevinShare
      , "cash_on_hand_beginning_period" .= committeeTotalsPacPartyCashOnHandBeginningPeriod
      , "committee_designation" .= committeeTotalsPacPartyCommitteeDesignation
      , "committee_designation_full" .= committeeTotalsPacPartyCommitteeDesignationFull
      , "committee_id" .= committeeTotalsPacPartyCommitteeId
      , "committee_name" .= committeeTotalsPacPartyCommitteeName
      , "committee_type" .= committeeTotalsPacPartyCommitteeType
      , "committee_type_full" .= committeeTotalsPacPartyCommitteeTypeFull
      , "contribution_refunds" .= committeeTotalsPacPartyContributionRefunds
      , "contributions" .= committeeTotalsPacPartyContributions
      , "convention_exp" .= committeeTotalsPacPartyConventionExp
      , "coordinated_expenditures_by_party_committee" .= committeeTotalsPacPartyCoordinatedExpendituresByPartyCommittee
      , "coverage_end_date" .= committeeTotalsPacPartyCoverageEndDate
      , "coverage_start_date" .= committeeTotalsPacPartyCoverageStartDate
      , "cycle" .= committeeTotalsPacPartyCycle
      , "disbursements" .= committeeTotalsPacPartyDisbursements
      , "exp_prior_years_subject_limits" .= committeeTotalsPacPartyExpPriorYearsSubjectLimits
      , "exp_subject_limits" .= committeeTotalsPacPartyExpSubjectLimits
      , "fed_candidate_committee_contributions" .= committeeTotalsPacPartyFedCandidateCommitteeContributions
      , "fed_candidate_contribution_refunds" .= committeeTotalsPacPartyFedCandidateContributionRefunds
      , "fed_disbursements" .= committeeTotalsPacPartyFedDisbursements
      , "fed_election_activity" .= committeeTotalsPacPartyFedElectionActivity
      , "fed_operating_expenditures" .= committeeTotalsPacPartyFedOperatingExpenditures
      , "fed_receipts" .= committeeTotalsPacPartyFedReceipts
      , "federal_funds" .= committeeTotalsPacPartyFederalFunds
      , "independent_expenditures" .= committeeTotalsPacPartyIndependentExpenditures
      , "individual_contributions" .= committeeTotalsPacPartyIndividualContributions
      , "individual_itemized_contributions" .= committeeTotalsPacPartyIndividualItemizedContributions
      , "individual_unitemized_contributions" .= committeeTotalsPacPartyIndividualUnitemizedContributions
      , "itemized_convention_exp" .= committeeTotalsPacPartyItemizedConventionExp
      , "itemized_other_disb" .= committeeTotalsPacPartyItemizedOtherDisb
      , "itemized_other_income" .= committeeTotalsPacPartyItemizedOtherIncome
      , "itemized_other_refunds" .= committeeTotalsPacPartyItemizedOtherRefunds
      , "itemized_refunds_relating_convention_exp" .= committeeTotalsPacPartyItemizedRefundsRelatingConventionExp
      , "last_beginning_image_number" .= committeeTotalsPacPartyLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= committeeTotalsPacPartyLastCashOnHandEndPeriod
      , "last_debts_owed_by_committee" .= committeeTotalsPacPartyLastDebtsOwedByCommittee
      , "last_debts_owed_to_committee" .= committeeTotalsPacPartyLastDebtsOwedToCommittee
      , "last_report_type_full" .= committeeTotalsPacPartyLastReportTypeFull
      , "last_report_year" .= committeeTotalsPacPartyLastReportYear
      , "loan_repayments_made" .= committeeTotalsPacPartyLoanRepaymentsMade
      , "loan_repayments_received" .= committeeTotalsPacPartyLoanRepaymentsReceived
      , "loans_and_loan_repayments_made" .= committeeTotalsPacPartyLoansAndLoanRepaymentsMade
      , "loans_and_loan_repayments_received" .= committeeTotalsPacPartyLoansAndLoanRepaymentsReceived
      , "loans_made" .= committeeTotalsPacPartyLoansMade
      , "net_contributions" .= committeeTotalsPacPartyNetContributions
      , "net_operating_expenditures" .= committeeTotalsPacPartyNetOperatingExpenditures
      , "non_allocated_fed_election_activity" .= committeeTotalsPacPartyNonAllocatedFedElectionActivity
      , "offsets_to_operating_expenditures" .= committeeTotalsPacPartyOffsetsToOperatingExpenditures
      , "operating_expenditures" .= committeeTotalsPacPartyOperatingExpenditures
      , "other_disbursements" .= committeeTotalsPacPartyOtherDisbursements
      , "other_fed_operating_expenditures" .= committeeTotalsPacPartyOtherFedOperatingExpenditures
      , "other_fed_receipts" .= committeeTotalsPacPartyOtherFedReceipts
      , "other_political_committee_contributions" .= committeeTotalsPacPartyOtherPoliticalCommitteeContributions
      , "other_refunds" .= committeeTotalsPacPartyOtherRefunds
      , "party_full" .= committeeTotalsPacPartyPartyFull
      , "pdf_url" .= committeeTotalsPacPartyPdfUrl
      , "political_party_committee_contributions" .= committeeTotalsPacPartyPoliticalPartyCommitteeContributions
      , "receipts" .= committeeTotalsPacPartyReceipts
      , "refunded_individual_contributions" .= committeeTotalsPacPartyRefundedIndividualContributions
      , "refunded_other_political_committee_contributions" .= committeeTotalsPacPartyRefundedOtherPoliticalCommitteeContributions
      , "refunded_political_party_committee_contributions" .= committeeTotalsPacPartyRefundedPoliticalPartyCommitteeContributions
      , "refunds_relating_convention_exp" .= committeeTotalsPacPartyRefundsRelatingConventionExp
      , "report_form" .= committeeTotalsPacPartyReportForm
      , "shared_fed_activity" .= committeeTotalsPacPartySharedFedActivity
      , "shared_fed_activity_nonfed" .= committeeTotalsPacPartySharedFedActivityNonfed
      , "shared_fed_operating_expenditures" .= committeeTotalsPacPartySharedFedOperatingExpenditures
      , "shared_nonfed_operating_expenditures" .= committeeTotalsPacPartySharedNonfedOperatingExpenditures
      , "total_exp_subject_limits" .= committeeTotalsPacPartyTotalExpSubjectLimits
      , "total_transfers" .= committeeTotalsPacPartyTotalTransfers
      , "transaction_coverage_date" .= committeeTotalsPacPartyTransactionCoverageDate
      , "transfers_from_affiliated_party" .= committeeTotalsPacPartyTransfersFromAffiliatedParty
      , "transfers_from_nonfed_account" .= committeeTotalsPacPartyTransfersFromNonfedAccount
      , "transfers_from_nonfed_levin" .= committeeTotalsPacPartyTransfersFromNonfedLevin
      , "transfers_to_affiliated_committee" .= committeeTotalsPacPartyTransfersToAffiliatedCommittee
      , "unitemized_convention_exp" .= committeeTotalsPacPartyUnitemizedConventionExp
      , "unitemized_other_disb" .= committeeTotalsPacPartyUnitemizedOtherDisb
      , "unitemized_other_income" .= committeeTotalsPacPartyUnitemizedOtherIncome
      , "unitemized_other_refunds" .= committeeTotalsPacPartyUnitemizedOtherRefunds
      , "unitemized_refunds_relating_convention_exp" .= committeeTotalsPacPartyUnitemizedRefundsRelatingConventionExp
      ]


-- | Construct a value of type 'CommitteeTotalsPacParty' (by applying it's required fields, if any)
mkCommitteeTotalsPacParty
  :: Int -- ^ 'committeeTotalsPacPartyCycle':  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  -> CommitteeTotalsPacParty
mkCommitteeTotalsPacParty committeeTotalsPacPartyCycle =
  CommitteeTotalsPacParty
  { committeeTotalsPacPartyAllLoansReceived = Nothing
  , committeeTotalsPacPartyAllocatedFederalElectionLevinShare = Nothing
  , committeeTotalsPacPartyCashOnHandBeginningPeriod = Nothing
  , committeeTotalsPacPartyCommitteeDesignation = Nothing
  , committeeTotalsPacPartyCommitteeDesignationFull = Nothing
  , committeeTotalsPacPartyCommitteeId = Nothing
  , committeeTotalsPacPartyCommitteeName = Nothing
  , committeeTotalsPacPartyCommitteeType = Nothing
  , committeeTotalsPacPartyCommitteeTypeFull = Nothing
  , committeeTotalsPacPartyContributionRefunds = Nothing
  , committeeTotalsPacPartyContributions = Nothing
  , committeeTotalsPacPartyConventionExp = Nothing
  , committeeTotalsPacPartyCoordinatedExpendituresByPartyCommittee = Nothing
  , committeeTotalsPacPartyCoverageEndDate = Nothing
  , committeeTotalsPacPartyCoverageStartDate = Nothing
  , committeeTotalsPacPartyCycle
  , committeeTotalsPacPartyDisbursements = Nothing
  , committeeTotalsPacPartyExpPriorYearsSubjectLimits = Nothing
  , committeeTotalsPacPartyExpSubjectLimits = Nothing
  , committeeTotalsPacPartyFedCandidateCommitteeContributions = Nothing
  , committeeTotalsPacPartyFedCandidateContributionRefunds = Nothing
  , committeeTotalsPacPartyFedDisbursements = Nothing
  , committeeTotalsPacPartyFedElectionActivity = Nothing
  , committeeTotalsPacPartyFedOperatingExpenditures = Nothing
  , committeeTotalsPacPartyFedReceipts = Nothing
  , committeeTotalsPacPartyFederalFunds = Nothing
  , committeeTotalsPacPartyIndependentExpenditures = Nothing
  , committeeTotalsPacPartyIndividualContributions = Nothing
  , committeeTotalsPacPartyIndividualItemizedContributions = Nothing
  , committeeTotalsPacPartyIndividualUnitemizedContributions = Nothing
  , committeeTotalsPacPartyItemizedConventionExp = Nothing
  , committeeTotalsPacPartyItemizedOtherDisb = Nothing
  , committeeTotalsPacPartyItemizedOtherIncome = Nothing
  , committeeTotalsPacPartyItemizedOtherRefunds = Nothing
  , committeeTotalsPacPartyItemizedRefundsRelatingConventionExp = Nothing
  , committeeTotalsPacPartyLastBeginningImageNumber = Nothing
  , committeeTotalsPacPartyLastCashOnHandEndPeriod = Nothing
  , committeeTotalsPacPartyLastDebtsOwedByCommittee = Nothing
  , committeeTotalsPacPartyLastDebtsOwedToCommittee = Nothing
  , committeeTotalsPacPartyLastReportTypeFull = Nothing
  , committeeTotalsPacPartyLastReportYear = Nothing
  , committeeTotalsPacPartyLoanRepaymentsMade = Nothing
  , committeeTotalsPacPartyLoanRepaymentsReceived = Nothing
  , committeeTotalsPacPartyLoansAndLoanRepaymentsMade = Nothing
  , committeeTotalsPacPartyLoansAndLoanRepaymentsReceived = Nothing
  , committeeTotalsPacPartyLoansMade = Nothing
  , committeeTotalsPacPartyNetContributions = Nothing
  , committeeTotalsPacPartyNetOperatingExpenditures = Nothing
  , committeeTotalsPacPartyNonAllocatedFedElectionActivity = Nothing
  , committeeTotalsPacPartyOffsetsToOperatingExpenditures = Nothing
  , committeeTotalsPacPartyOperatingExpenditures = Nothing
  , committeeTotalsPacPartyOtherDisbursements = Nothing
  , committeeTotalsPacPartyOtherFedOperatingExpenditures = Nothing
  , committeeTotalsPacPartyOtherFedReceipts = Nothing
  , committeeTotalsPacPartyOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsPacPartyOtherRefunds = Nothing
  , committeeTotalsPacPartyPartyFull = Nothing
  , committeeTotalsPacPartyPdfUrl = Nothing
  , committeeTotalsPacPartyPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsPacPartyReceipts = Nothing
  , committeeTotalsPacPartyRefundedIndividualContributions = Nothing
  , committeeTotalsPacPartyRefundedOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsPacPartyRefundedPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsPacPartyRefundsRelatingConventionExp = Nothing
  , committeeTotalsPacPartyReportForm = Nothing
  , committeeTotalsPacPartySharedFedActivity = Nothing
  , committeeTotalsPacPartySharedFedActivityNonfed = Nothing
  , committeeTotalsPacPartySharedFedOperatingExpenditures = Nothing
  , committeeTotalsPacPartySharedNonfedOperatingExpenditures = Nothing
  , committeeTotalsPacPartyTotalExpSubjectLimits = Nothing
  , committeeTotalsPacPartyTotalTransfers = Nothing
  , committeeTotalsPacPartyTransactionCoverageDate = Nothing
  , committeeTotalsPacPartyTransfersFromAffiliatedParty = Nothing
  , committeeTotalsPacPartyTransfersFromNonfedAccount = Nothing
  , committeeTotalsPacPartyTransfersFromNonfedLevin = Nothing
  , committeeTotalsPacPartyTransfersToAffiliatedCommittee = Nothing
  , committeeTotalsPacPartyUnitemizedConventionExp = Nothing
  , committeeTotalsPacPartyUnitemizedOtherDisb = Nothing
  , committeeTotalsPacPartyUnitemizedOtherIncome = Nothing
  , committeeTotalsPacPartyUnitemizedOtherRefunds = Nothing
  , committeeTotalsPacPartyUnitemizedRefundsRelatingConventionExp = Nothing
  }

-- ** CommitteeTotalsPacPartyPage
-- | CommitteeTotalsPacPartyPage
data CommitteeTotalsPacPartyPage = CommitteeTotalsPacPartyPage
  { committeeTotalsPacPartyPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeTotalsPacPartyPageResults    :: !(Maybe [CommitteeTotalsPacParty]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsPacPartyPage
instance A.FromJSON CommitteeTotalsPacPartyPage where
  parseJSON = A.withObject "CommitteeTotalsPacPartyPage" $ \o ->
    CommitteeTotalsPacPartyPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeTotalsPacPartyPage
instance A.ToJSON CommitteeTotalsPacPartyPage where
  toJSON CommitteeTotalsPacPartyPage {..} =
   _omitNulls
      [ "pagination" .= committeeTotalsPacPartyPagePagination
      , "results" .= committeeTotalsPacPartyPageResults
      ]


-- | Construct a value of type 'CommitteeTotalsPacPartyPage' (by applying it's required fields, if any)
mkCommitteeTotalsPacPartyPage
  :: CommitteeTotalsPacPartyPage
mkCommitteeTotalsPacPartyPage =
  CommitteeTotalsPacPartyPage
  { committeeTotalsPacPartyPagePagination = Nothing
  , committeeTotalsPacPartyPageResults = Nothing
  }

-- ** CommitteeTotalsPage
-- | CommitteeTotalsPage
data CommitteeTotalsPage = CommitteeTotalsPage
  { committeeTotalsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeTotalsPageResults    :: !(Maybe [CommitteeTotals]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsPage
instance A.FromJSON CommitteeTotalsPage where
  parseJSON = A.withObject "CommitteeTotalsPage" $ \o ->
    CommitteeTotalsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeTotalsPage
instance A.ToJSON CommitteeTotalsPage where
  toJSON CommitteeTotalsPage {..} =
   _omitNulls
      [ "pagination" .= committeeTotalsPagePagination
      , "results" .= committeeTotalsPageResults
      ]


-- | Construct a value of type 'CommitteeTotalsPage' (by applying it's required fields, if any)
mkCommitteeTotalsPage
  :: CommitteeTotalsPage
mkCommitteeTotalsPage =
  CommitteeTotalsPage
  { committeeTotalsPagePagination = Nothing
  , committeeTotalsPageResults = Nothing
  }

-- ** CommitteeTotalsPresidential
-- | CommitteeTotalsPresidential
data CommitteeTotalsPresidential = CommitteeTotalsPresidential
  { committeeTotalsPresidentialCandidateContribution :: !(Maybe Double) -- ^ "candidate_contribution"
  , committeeTotalsPresidentialCashOnHandBeginningPeriod :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period"
  , committeeTotalsPresidentialCommitteeDesignation :: !(Maybe Text) -- ^ "committee_designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsPresidentialCommitteeDesignationFull :: !(Maybe Text) -- ^ "committee_designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , committeeTotalsPresidentialCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , committeeTotalsPresidentialCommitteeName :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , committeeTotalsPresidentialCommitteeType :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsPresidentialCommitteeTypeFull :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , committeeTotalsPresidentialContributionRefunds :: !(Maybe Double) -- ^ "contribution_refunds"
  , committeeTotalsPresidentialContributions :: !(Maybe Double) -- ^ "contributions" - Contribution
  , committeeTotalsPresidentialCoverageEndDate :: !(Maybe DateTime) -- ^ "coverage_end_date"
  , committeeTotalsPresidentialCoverageStartDate :: !(Maybe DateTime) -- ^ "coverage_start_date"
  , committeeTotalsPresidentialCycle :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , committeeTotalsPresidentialDisbursements :: !(Maybe Double) -- ^ "disbursements" - Disbursements
  , committeeTotalsPresidentialExemptLegalAccountingDisbursement :: !(Maybe Double) -- ^ "exempt_legal_accounting_disbursement"
  , committeeTotalsPresidentialFederalFunds :: !(Maybe Double) -- ^ "federal_funds"
  , committeeTotalsPresidentialFundraisingDisbursements :: !(Maybe Double) -- ^ "fundraising_disbursements"
  , committeeTotalsPresidentialIndividualContributions :: !(Maybe Double) -- ^ "individual_contributions"
  , committeeTotalsPresidentialIndividualItemizedContributions :: !(Maybe Double) -- ^ "individual_itemized_contributions" - Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
  , committeeTotalsPresidentialIndividualUnitemizedContributions :: !(Maybe Double) -- ^ "individual_unitemized_contributions" - Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
  , committeeTotalsPresidentialLastBeginningImageNumber :: !(Maybe Text) -- ^ "last_beginning_image_number"
  , committeeTotalsPresidentialLastCashOnHandEndPeriod :: !(Maybe Double) -- ^ "last_cash_on_hand_end_period"
  , committeeTotalsPresidentialLastDebtsOwedByCommittee :: !(Maybe Double) -- ^ "last_debts_owed_by_committee"
  , committeeTotalsPresidentialLastDebtsOwedToCommittee :: !(Maybe Double) -- ^ "last_debts_owed_to_committee"
  , committeeTotalsPresidentialLastReportTypeFull :: !(Maybe Text) -- ^ "last_report_type_full"
  , committeeTotalsPresidentialLastReportYear :: !(Maybe Int) -- ^ "last_report_year"
  , committeeTotalsPresidentialLoanRepaymentsMade :: !(Maybe Double) -- ^ "loan_repayments_made"
  , committeeTotalsPresidentialLoansReceived :: !(Maybe Double) -- ^ "loans_received"
  , committeeTotalsPresidentialLoansReceivedFromCandidate :: !(Maybe Double) -- ^ "loans_received_from_candidate"
  , committeeTotalsPresidentialNetContributions :: !(Maybe Double) -- ^ "net_contributions"
  , committeeTotalsPresidentialNetOperatingExpenditures :: !(Maybe Double) -- ^ "net_operating_expenditures"
  , committeeTotalsPresidentialOffsetsToFundraisingExpenditures :: !(Maybe Double) -- ^ "offsets_to_fundraising_expenditures"
  , committeeTotalsPresidentialOffsetsToLegalAccounting :: !(Maybe Double) -- ^ "offsets_to_legal_accounting"
  , committeeTotalsPresidentialOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "offsets_to_operating_expenditures"
  , committeeTotalsPresidentialOperatingExpenditures :: !(Maybe Double) -- ^ "operating_expenditures"
  , committeeTotalsPresidentialOtherDisbursements :: !(Maybe Double) -- ^ "other_disbursements"
  , committeeTotalsPresidentialOtherLoansReceived :: !(Maybe Double) -- ^ "other_loans_received"
  , committeeTotalsPresidentialOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "other_political_committee_contributions"
  , committeeTotalsPresidentialOtherReceipts :: !(Maybe Double) -- ^ "other_receipts"
  , committeeTotalsPresidentialPartyFull :: !(Maybe Text) -- ^ "party_full" - Party affiliated with a candidate or committee
  , committeeTotalsPresidentialPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , committeeTotalsPresidentialPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "political_party_committee_contributions"
  , committeeTotalsPresidentialReceipts :: !(Maybe Double) -- ^ "receipts"
  , committeeTotalsPresidentialRefundedIndividualContributions :: !(Maybe Double) -- ^ "refunded_individual_contributions"
  , committeeTotalsPresidentialRefundedOtherPoliticalCommitteeContributions :: !(Maybe Double) -- ^ "refunded_other_political_committee_contributions"
  , committeeTotalsPresidentialRefundedPoliticalPartyCommitteeContributions :: !(Maybe Double) -- ^ "refunded_political_party_committee_contributions"
  , committeeTotalsPresidentialRepaymentsLoansMadeByCandidate :: !(Maybe Double) -- ^ "repayments_loans_made_by_candidate"
  , committeeTotalsPresidentialRepaymentsOtherLoans :: !(Maybe Double) -- ^ "repayments_other_loans"
  , committeeTotalsPresidentialReportForm :: !(Maybe Text) -- ^ "report_form"
  , committeeTotalsPresidentialTotalOffsetsToOperatingExpenditures :: !(Maybe Double) -- ^ "total_offsets_to_operating_expenditures"
  , committeeTotalsPresidentialTransactionCoverageDate :: !(Maybe Date) -- ^ "transaction_coverage_date"
  , committeeTotalsPresidentialTransfersFromAffiliatedCommittee :: !(Maybe Double) -- ^ "transfers_from_affiliated_committee"
  , committeeTotalsPresidentialTransfersToOtherAuthorizedCommittee :: !(Maybe Double) -- ^ "transfers_to_other_authorized_committee"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsPresidential
instance A.FromJSON CommitteeTotalsPresidential where
  parseJSON = A.withObject "CommitteeTotalsPresidential" $ \o ->
    CommitteeTotalsPresidential
      <$> (o .:? "candidate_contribution")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "committee_designation")
      <*> (o .:? "committee_designation_full")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "contribution_refunds")
      <*> (o .:? "contributions")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:  "cycle")
      <*> (o .:? "disbursements")
      <*> (o .:? "exempt_legal_accounting_disbursement")
      <*> (o .:? "federal_funds")
      <*> (o .:? "fundraising_disbursements")
      <*> (o .:? "individual_contributions")
      <*> (o .:? "individual_itemized_contributions")
      <*> (o .:? "individual_unitemized_contributions")
      <*> (o .:? "last_beginning_image_number")
      <*> (o .:? "last_cash_on_hand_end_period")
      <*> (o .:? "last_debts_owed_by_committee")
      <*> (o .:? "last_debts_owed_to_committee")
      <*> (o .:? "last_report_type_full")
      <*> (o .:? "last_report_year")
      <*> (o .:? "loan_repayments_made")
      <*> (o .:? "loans_received")
      <*> (o .:? "loans_received_from_candidate")
      <*> (o .:? "net_contributions")
      <*> (o .:? "net_operating_expenditures")
      <*> (o .:? "offsets_to_fundraising_expenditures")
      <*> (o .:? "offsets_to_legal_accounting")
      <*> (o .:? "offsets_to_operating_expenditures")
      <*> (o .:? "operating_expenditures")
      <*> (o .:? "other_disbursements")
      <*> (o .:? "other_loans_received")
      <*> (o .:? "other_political_committee_contributions")
      <*> (o .:? "other_receipts")
      <*> (o .:? "party_full")
      <*> (o .:? "pdf_url")
      <*> (o .:? "political_party_committee_contributions")
      <*> (o .:? "receipts")
      <*> (o .:? "refunded_individual_contributions")
      <*> (o .:? "refunded_other_political_committee_contributions")
      <*> (o .:? "refunded_political_party_committee_contributions")
      <*> (o .:? "repayments_loans_made_by_candidate")
      <*> (o .:? "repayments_other_loans")
      <*> (o .:? "report_form")
      <*> (o .:? "total_offsets_to_operating_expenditures")
      <*> (o .:? "transaction_coverage_date")
      <*> (o .:? "transfers_from_affiliated_committee")
      <*> (o .:? "transfers_to_other_authorized_committee")

-- | ToJSON CommitteeTotalsPresidential
instance A.ToJSON CommitteeTotalsPresidential where
  toJSON CommitteeTotalsPresidential {..} =
   _omitNulls
      [ "candidate_contribution" .= committeeTotalsPresidentialCandidateContribution
      , "cash_on_hand_beginning_period" .= committeeTotalsPresidentialCashOnHandBeginningPeriod
      , "committee_designation" .= committeeTotalsPresidentialCommitteeDesignation
      , "committee_designation_full" .= committeeTotalsPresidentialCommitteeDesignationFull
      , "committee_id" .= committeeTotalsPresidentialCommitteeId
      , "committee_name" .= committeeTotalsPresidentialCommitteeName
      , "committee_type" .= committeeTotalsPresidentialCommitteeType
      , "committee_type_full" .= committeeTotalsPresidentialCommitteeTypeFull
      , "contribution_refunds" .= committeeTotalsPresidentialContributionRefunds
      , "contributions" .= committeeTotalsPresidentialContributions
      , "coverage_end_date" .= committeeTotalsPresidentialCoverageEndDate
      , "coverage_start_date" .= committeeTotalsPresidentialCoverageStartDate
      , "cycle" .= committeeTotalsPresidentialCycle
      , "disbursements" .= committeeTotalsPresidentialDisbursements
      , "exempt_legal_accounting_disbursement" .= committeeTotalsPresidentialExemptLegalAccountingDisbursement
      , "federal_funds" .= committeeTotalsPresidentialFederalFunds
      , "fundraising_disbursements" .= committeeTotalsPresidentialFundraisingDisbursements
      , "individual_contributions" .= committeeTotalsPresidentialIndividualContributions
      , "individual_itemized_contributions" .= committeeTotalsPresidentialIndividualItemizedContributions
      , "individual_unitemized_contributions" .= committeeTotalsPresidentialIndividualUnitemizedContributions
      , "last_beginning_image_number" .= committeeTotalsPresidentialLastBeginningImageNumber
      , "last_cash_on_hand_end_period" .= committeeTotalsPresidentialLastCashOnHandEndPeriod
      , "last_debts_owed_by_committee" .= committeeTotalsPresidentialLastDebtsOwedByCommittee
      , "last_debts_owed_to_committee" .= committeeTotalsPresidentialLastDebtsOwedToCommittee
      , "last_report_type_full" .= committeeTotalsPresidentialLastReportTypeFull
      , "last_report_year" .= committeeTotalsPresidentialLastReportYear
      , "loan_repayments_made" .= committeeTotalsPresidentialLoanRepaymentsMade
      , "loans_received" .= committeeTotalsPresidentialLoansReceived
      , "loans_received_from_candidate" .= committeeTotalsPresidentialLoansReceivedFromCandidate
      , "net_contributions" .= committeeTotalsPresidentialNetContributions
      , "net_operating_expenditures" .= committeeTotalsPresidentialNetOperatingExpenditures
      , "offsets_to_fundraising_expenditures" .= committeeTotalsPresidentialOffsetsToFundraisingExpenditures
      , "offsets_to_legal_accounting" .= committeeTotalsPresidentialOffsetsToLegalAccounting
      , "offsets_to_operating_expenditures" .= committeeTotalsPresidentialOffsetsToOperatingExpenditures
      , "operating_expenditures" .= committeeTotalsPresidentialOperatingExpenditures
      , "other_disbursements" .= committeeTotalsPresidentialOtherDisbursements
      , "other_loans_received" .= committeeTotalsPresidentialOtherLoansReceived
      , "other_political_committee_contributions" .= committeeTotalsPresidentialOtherPoliticalCommitteeContributions
      , "other_receipts" .= committeeTotalsPresidentialOtherReceipts
      , "party_full" .= committeeTotalsPresidentialPartyFull
      , "pdf_url" .= committeeTotalsPresidentialPdfUrl
      , "political_party_committee_contributions" .= committeeTotalsPresidentialPoliticalPartyCommitteeContributions
      , "receipts" .= committeeTotalsPresidentialReceipts
      , "refunded_individual_contributions" .= committeeTotalsPresidentialRefundedIndividualContributions
      , "refunded_other_political_committee_contributions" .= committeeTotalsPresidentialRefundedOtherPoliticalCommitteeContributions
      , "refunded_political_party_committee_contributions" .= committeeTotalsPresidentialRefundedPoliticalPartyCommitteeContributions
      , "repayments_loans_made_by_candidate" .= committeeTotalsPresidentialRepaymentsLoansMadeByCandidate
      , "repayments_other_loans" .= committeeTotalsPresidentialRepaymentsOtherLoans
      , "report_form" .= committeeTotalsPresidentialReportForm
      , "total_offsets_to_operating_expenditures" .= committeeTotalsPresidentialTotalOffsetsToOperatingExpenditures
      , "transaction_coverage_date" .= committeeTotalsPresidentialTransactionCoverageDate
      , "transfers_from_affiliated_committee" .= committeeTotalsPresidentialTransfersFromAffiliatedCommittee
      , "transfers_to_other_authorized_committee" .= committeeTotalsPresidentialTransfersToOtherAuthorizedCommittee
      ]


-- | Construct a value of type 'CommitteeTotalsPresidential' (by applying it's required fields, if any)
mkCommitteeTotalsPresidential
  :: Int -- ^ 'committeeTotalsPresidentialCycle':  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  -> CommitteeTotalsPresidential
mkCommitteeTotalsPresidential committeeTotalsPresidentialCycle =
  CommitteeTotalsPresidential
  { committeeTotalsPresidentialCandidateContribution = Nothing
  , committeeTotalsPresidentialCashOnHandBeginningPeriod = Nothing
  , committeeTotalsPresidentialCommitteeDesignation = Nothing
  , committeeTotalsPresidentialCommitteeDesignationFull = Nothing
  , committeeTotalsPresidentialCommitteeId = Nothing
  , committeeTotalsPresidentialCommitteeName = Nothing
  , committeeTotalsPresidentialCommitteeType = Nothing
  , committeeTotalsPresidentialCommitteeTypeFull = Nothing
  , committeeTotalsPresidentialContributionRefunds = Nothing
  , committeeTotalsPresidentialContributions = Nothing
  , committeeTotalsPresidentialCoverageEndDate = Nothing
  , committeeTotalsPresidentialCoverageStartDate = Nothing
  , committeeTotalsPresidentialCycle
  , committeeTotalsPresidentialDisbursements = Nothing
  , committeeTotalsPresidentialExemptLegalAccountingDisbursement = Nothing
  , committeeTotalsPresidentialFederalFunds = Nothing
  , committeeTotalsPresidentialFundraisingDisbursements = Nothing
  , committeeTotalsPresidentialIndividualContributions = Nothing
  , committeeTotalsPresidentialIndividualItemizedContributions = Nothing
  , committeeTotalsPresidentialIndividualUnitemizedContributions = Nothing
  , committeeTotalsPresidentialLastBeginningImageNumber = Nothing
  , committeeTotalsPresidentialLastCashOnHandEndPeriod = Nothing
  , committeeTotalsPresidentialLastDebtsOwedByCommittee = Nothing
  , committeeTotalsPresidentialLastDebtsOwedToCommittee = Nothing
  , committeeTotalsPresidentialLastReportTypeFull = Nothing
  , committeeTotalsPresidentialLastReportYear = Nothing
  , committeeTotalsPresidentialLoanRepaymentsMade = Nothing
  , committeeTotalsPresidentialLoansReceived = Nothing
  , committeeTotalsPresidentialLoansReceivedFromCandidate = Nothing
  , committeeTotalsPresidentialNetContributions = Nothing
  , committeeTotalsPresidentialNetOperatingExpenditures = Nothing
  , committeeTotalsPresidentialOffsetsToFundraisingExpenditures = Nothing
  , committeeTotalsPresidentialOffsetsToLegalAccounting = Nothing
  , committeeTotalsPresidentialOffsetsToOperatingExpenditures = Nothing
  , committeeTotalsPresidentialOperatingExpenditures = Nothing
  , committeeTotalsPresidentialOtherDisbursements = Nothing
  , committeeTotalsPresidentialOtherLoansReceived = Nothing
  , committeeTotalsPresidentialOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsPresidentialOtherReceipts = Nothing
  , committeeTotalsPresidentialPartyFull = Nothing
  , committeeTotalsPresidentialPdfUrl = Nothing
  , committeeTotalsPresidentialPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsPresidentialReceipts = Nothing
  , committeeTotalsPresidentialRefundedIndividualContributions = Nothing
  , committeeTotalsPresidentialRefundedOtherPoliticalCommitteeContributions = Nothing
  , committeeTotalsPresidentialRefundedPoliticalPartyCommitteeContributions = Nothing
  , committeeTotalsPresidentialRepaymentsLoansMadeByCandidate = Nothing
  , committeeTotalsPresidentialRepaymentsOtherLoans = Nothing
  , committeeTotalsPresidentialReportForm = Nothing
  , committeeTotalsPresidentialTotalOffsetsToOperatingExpenditures = Nothing
  , committeeTotalsPresidentialTransactionCoverageDate = Nothing
  , committeeTotalsPresidentialTransfersFromAffiliatedCommittee = Nothing
  , committeeTotalsPresidentialTransfersToOtherAuthorizedCommittee = Nothing
  }

-- ** CommitteeTotalsPresidentialPage
-- | CommitteeTotalsPresidentialPage
data CommitteeTotalsPresidentialPage = CommitteeTotalsPresidentialPage
  { committeeTotalsPresidentialPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , committeeTotalsPresidentialPageResults :: !(Maybe [CommitteeTotalsPresidential]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommitteeTotalsPresidentialPage
instance A.FromJSON CommitteeTotalsPresidentialPage where
  parseJSON = A.withObject "CommitteeTotalsPresidentialPage" $ \o ->
    CommitteeTotalsPresidentialPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommitteeTotalsPresidentialPage
instance A.ToJSON CommitteeTotalsPresidentialPage where
  toJSON CommitteeTotalsPresidentialPage {..} =
   _omitNulls
      [ "pagination" .= committeeTotalsPresidentialPagePagination
      , "results" .= committeeTotalsPresidentialPageResults
      ]


-- | Construct a value of type 'CommitteeTotalsPresidentialPage' (by applying it's required fields, if any)
mkCommitteeTotalsPresidentialPage
  :: CommitteeTotalsPresidentialPage
mkCommitteeTotalsPresidentialPage =
  CommitteeTotalsPresidentialPage
  { committeeTotalsPresidentialPagePagination = Nothing
  , committeeTotalsPresidentialPageResults = Nothing
  }

-- ** CommunicationCost
-- | CommunicationCost
data CommunicationCost = CommunicationCost
  { communicationCostActionCode                         :: !(Maybe Text) -- ^ "action_code"
  , communicationCostActionCodeFull                     :: !(Maybe Text) -- ^ "action_code_full"
  , communicationCostCandidateFirstName                 :: !(Maybe Text) -- ^ "candidate_first_name"
  , communicationCostCandidateId                        :: !(Maybe Text) -- ^ "candidate_id"
  , communicationCostCandidateLastName                  :: !(Maybe Text) -- ^ "candidate_last_name"
  , communicationCostCandidateMiddleName                :: !(Maybe Text) -- ^ "candidate_middle_name"
  , communicationCostCandidateName                      :: !(Maybe Text) -- ^ "candidate_name"
  , communicationCostCandidateOffice                    :: !(Maybe Text) -- ^ "candidate_office"
  , communicationCostCandidateOfficeDistrict            :: !(Maybe Text) -- ^ "candidate_office_district"
  , communicationCostCandidateOfficeFull                :: !(Maybe Text) -- ^ "candidate_office_full"
  , communicationCostCandidateOfficeState               :: !(Maybe Text) -- ^ "candidate_office_state"
  , communicationCostCommitteeId                        :: !(Maybe Text) -- ^ "committee_id"
  , communicationCostCommitteeName                      :: !(Maybe Text) -- ^ "committee_name"
  , communicationCostCommunicationClass                 :: !(Maybe Text) -- ^ "communication_class"
  , communicationCostCommunicationType                  :: !(Maybe Text) -- ^ "communication_type"
  , communicationCostCommunicationTypeFull              :: !(Maybe Text) -- ^ "communication_type_full"
  , communicationCostCycle                              :: !(Maybe Int) -- ^ "cycle"
  , communicationCostFileNumber                         :: !(Maybe Int) -- ^ "file_number"
  , communicationCostFormTypeCode                       :: !(Maybe Text) -- ^ "form_type_code"
  , communicationCostImageNumber                        :: !(Maybe Text) -- ^ "image_number"
  , communicationCostOriginalSubId                      :: !(Maybe Int) -- ^ "original_sub_id"
  , communicationCostPdfUrl                             :: !(Maybe Text) -- ^ "pdf_url"
  , communicationCostPrimaryGeneralIndicator            :: !(Maybe Text) -- ^ "primary_general_indicator"
  , communicationCostPrimaryGeneralIndicatorDescription :: !(Maybe Text) -- ^ "primary_general_indicator_description"
  , communicationCostPurpose                            :: !(Maybe Text) -- ^ "purpose"
  , communicationCostReportType                         :: !(Maybe Text) -- ^ "report_type"
  , communicationCostReportYear                         :: !(Maybe Int) -- ^ "report_year"
  , communicationCostScheduleType                       :: !(Maybe Text) -- ^ "schedule_type"
  , communicationCostScheduleTypeFull                   :: !(Maybe Text) -- ^ "schedule_type_full"
  , communicationCostStateFull                          :: !(Maybe Text) -- ^ "state_full"
  , communicationCostSubId                              :: !(Maybe Int) -- ^ "sub_id"
  , communicationCostSupportOpposeIndicator             :: !(Maybe Text) -- ^ "support_oppose_indicator"
  , communicationCostTranId                             :: !(Maybe Text) -- ^ "tran_id"
  , communicationCostTransactionAmount                  :: !(Maybe Double) -- ^ "transaction_amount"
  , communicationCostTransactionDate                    :: !(Maybe Date) -- ^ "transaction_date"
  , communicationCostTransactionType                    :: !(Maybe Text) -- ^ "transaction_type"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommunicationCost
instance A.FromJSON CommunicationCost where
  parseJSON = A.withObject "CommunicationCost" $ \o ->
    CommunicationCost
      <$> (o .:? "action_code")
      <*> (o .:? "action_code_full")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_full")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "communication_class")
      <*> (o .:? "communication_type")
      <*> (o .:? "communication_type_full")
      <*> (o .:? "cycle")
      <*> (o .:? "file_number")
      <*> (o .:? "form_type_code")
      <*> (o .:? "image_number")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "pdf_url")
      <*> (o .:? "primary_general_indicator")
      <*> (o .:? "primary_general_indicator_description")
      <*> (o .:? "purpose")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "state_full")
      <*> (o .:? "sub_id")
      <*> (o .:? "support_oppose_indicator")
      <*> (o .:? "tran_id")
      <*> (o .:? "transaction_amount")
      <*> (o .:? "transaction_date")
      <*> (o .:? "transaction_type")

-- | ToJSON CommunicationCost
instance A.ToJSON CommunicationCost where
  toJSON CommunicationCost {..} =
   _omitNulls
      [ "action_code" .= communicationCostActionCode
      , "action_code_full" .= communicationCostActionCodeFull
      , "candidate_first_name" .= communicationCostCandidateFirstName
      , "candidate_id" .= communicationCostCandidateId
      , "candidate_last_name" .= communicationCostCandidateLastName
      , "candidate_middle_name" .= communicationCostCandidateMiddleName
      , "candidate_name" .= communicationCostCandidateName
      , "candidate_office" .= communicationCostCandidateOffice
      , "candidate_office_district" .= communicationCostCandidateOfficeDistrict
      , "candidate_office_full" .= communicationCostCandidateOfficeFull
      , "candidate_office_state" .= communicationCostCandidateOfficeState
      , "committee_id" .= communicationCostCommitteeId
      , "committee_name" .= communicationCostCommitteeName
      , "communication_class" .= communicationCostCommunicationClass
      , "communication_type" .= communicationCostCommunicationType
      , "communication_type_full" .= communicationCostCommunicationTypeFull
      , "cycle" .= communicationCostCycle
      , "file_number" .= communicationCostFileNumber
      , "form_type_code" .= communicationCostFormTypeCode
      , "image_number" .= communicationCostImageNumber
      , "original_sub_id" .= communicationCostOriginalSubId
      , "pdf_url" .= communicationCostPdfUrl
      , "primary_general_indicator" .= communicationCostPrimaryGeneralIndicator
      , "primary_general_indicator_description" .= communicationCostPrimaryGeneralIndicatorDescription
      , "purpose" .= communicationCostPurpose
      , "report_type" .= communicationCostReportType
      , "report_year" .= communicationCostReportYear
      , "schedule_type" .= communicationCostScheduleType
      , "schedule_type_full" .= communicationCostScheduleTypeFull
      , "state_full" .= communicationCostStateFull
      , "sub_id" .= communicationCostSubId
      , "support_oppose_indicator" .= communicationCostSupportOpposeIndicator
      , "tran_id" .= communicationCostTranId
      , "transaction_amount" .= communicationCostTransactionAmount
      , "transaction_date" .= communicationCostTransactionDate
      , "transaction_type" .= communicationCostTransactionType
      ]


-- | Construct a value of type 'CommunicationCost' (by applying it's required fields, if any)
mkCommunicationCost
  :: CommunicationCost
mkCommunicationCost =
  CommunicationCost
  { communicationCostActionCode = Nothing
  , communicationCostActionCodeFull = Nothing
  , communicationCostCandidateFirstName = Nothing
  , communicationCostCandidateId = Nothing
  , communicationCostCandidateLastName = Nothing
  , communicationCostCandidateMiddleName = Nothing
  , communicationCostCandidateName = Nothing
  , communicationCostCandidateOffice = Nothing
  , communicationCostCandidateOfficeDistrict = Nothing
  , communicationCostCandidateOfficeFull = Nothing
  , communicationCostCandidateOfficeState = Nothing
  , communicationCostCommitteeId = Nothing
  , communicationCostCommitteeName = Nothing
  , communicationCostCommunicationClass = Nothing
  , communicationCostCommunicationType = Nothing
  , communicationCostCommunicationTypeFull = Nothing
  , communicationCostCycle = Nothing
  , communicationCostFileNumber = Nothing
  , communicationCostFormTypeCode = Nothing
  , communicationCostImageNumber = Nothing
  , communicationCostOriginalSubId = Nothing
  , communicationCostPdfUrl = Nothing
  , communicationCostPrimaryGeneralIndicator = Nothing
  , communicationCostPrimaryGeneralIndicatorDescription = Nothing
  , communicationCostPurpose = Nothing
  , communicationCostReportType = Nothing
  , communicationCostReportYear = Nothing
  , communicationCostScheduleType = Nothing
  , communicationCostScheduleTypeFull = Nothing
  , communicationCostStateFull = Nothing
  , communicationCostSubId = Nothing
  , communicationCostSupportOpposeIndicator = Nothing
  , communicationCostTranId = Nothing
  , communicationCostTransactionAmount = Nothing
  , communicationCostTransactionDate = Nothing
  , communicationCostTransactionType = Nothing
  }

-- ** CommunicationCostByCandidate
-- | CommunicationCostByCandidate
data CommunicationCostByCandidate = CommunicationCostByCandidate
  { communicationCostByCandidateCandidateId            :: !(Maybe Text) -- ^ "candidate_id"
  , communicationCostByCandidateCandidateName          :: !(Maybe Text) -- ^ "candidate_name"
  , communicationCostByCandidateCommitteeId            :: !(Maybe Text) -- ^ "committee_id"
  , communicationCostByCandidateCommitteeName          :: !(Maybe Text) -- ^ "committee_name"
  , communicationCostByCandidateCount                  :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , communicationCostByCandidateCycle                  :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , communicationCostByCandidateSupportOpposeIndicator :: !(Text) -- ^ /Required/ "support_oppose_indicator" - Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
  , communicationCostByCandidateTotal                  :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommunicationCostByCandidate
instance A.FromJSON CommunicationCostByCandidate where
  parseJSON = A.withObject "CommunicationCostByCandidate" $ \o ->
    CommunicationCostByCandidate
      <$> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "support_oppose_indicator")
      <*> (o .:? "total")

-- | ToJSON CommunicationCostByCandidate
instance A.ToJSON CommunicationCostByCandidate where
  toJSON CommunicationCostByCandidate {..} =
   _omitNulls
      [ "candidate_id" .= communicationCostByCandidateCandidateId
      , "candidate_name" .= communicationCostByCandidateCandidateName
      , "committee_id" .= communicationCostByCandidateCommitteeId
      , "committee_name" .= communicationCostByCandidateCommitteeName
      , "count" .= communicationCostByCandidateCount
      , "cycle" .= communicationCostByCandidateCycle
      , "support_oppose_indicator" .= communicationCostByCandidateSupportOpposeIndicator
      , "total" .= communicationCostByCandidateTotal
      ]


-- | Construct a value of type 'CommunicationCostByCandidate' (by applying it's required fields, if any)
mkCommunicationCostByCandidate
  :: Int -- ^ 'communicationCostByCandidateCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'communicationCostByCandidateSupportOpposeIndicator': Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
  -> CommunicationCostByCandidate
mkCommunicationCostByCandidate communicationCostByCandidateCycle communicationCostByCandidateSupportOpposeIndicator =
  CommunicationCostByCandidate
  { communicationCostByCandidateCandidateId = Nothing
  , communicationCostByCandidateCandidateName = Nothing
  , communicationCostByCandidateCommitteeId = Nothing
  , communicationCostByCandidateCommitteeName = Nothing
  , communicationCostByCandidateCount = Nothing
  , communicationCostByCandidateCycle
  , communicationCostByCandidateSupportOpposeIndicator
  , communicationCostByCandidateTotal = Nothing
  }

-- ** CommunicationCostByCandidatePage
-- | CommunicationCostByCandidatePage
data CommunicationCostByCandidatePage = CommunicationCostByCandidatePage
  { communicationCostByCandidatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , communicationCostByCandidatePageResults :: !(Maybe [CommunicationCostByCandidate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommunicationCostByCandidatePage
instance A.FromJSON CommunicationCostByCandidatePage where
  parseJSON = A.withObject "CommunicationCostByCandidatePage" $ \o ->
    CommunicationCostByCandidatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommunicationCostByCandidatePage
instance A.ToJSON CommunicationCostByCandidatePage where
  toJSON CommunicationCostByCandidatePage {..} =
   _omitNulls
      [ "pagination" .= communicationCostByCandidatePagePagination
      , "results" .= communicationCostByCandidatePageResults
      ]


-- | Construct a value of type 'CommunicationCostByCandidatePage' (by applying it's required fields, if any)
mkCommunicationCostByCandidatePage
  :: CommunicationCostByCandidatePage
mkCommunicationCostByCandidatePage =
  CommunicationCostByCandidatePage
  { communicationCostByCandidatePagePagination = Nothing
  , communicationCostByCandidatePageResults = Nothing
  }

-- ** CommunicationCostPage
-- | CommunicationCostPage
data CommunicationCostPage = CommunicationCostPage
  { communicationCostPagePagination :: !(Maybe SeekInfo) -- ^ "pagination"
  , communicationCostPageResults    :: !(Maybe [CommunicationCost]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CommunicationCostPage
instance A.FromJSON CommunicationCostPage where
  parseJSON = A.withObject "CommunicationCostPage" $ \o ->
    CommunicationCostPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON CommunicationCostPage
instance A.ToJSON CommunicationCostPage where
  toJSON CommunicationCostPage {..} =
   _omitNulls
      [ "pagination" .= communicationCostPagePagination
      , "results" .= communicationCostPageResults
      ]


-- | Construct a value of type 'CommunicationCostPage' (by applying it's required fields, if any)
mkCommunicationCostPage
  :: CommunicationCostPage
mkCommunicationCostPage =
  CommunicationCostPage
  { communicationCostPagePagination = Nothing
  , communicationCostPageResults = Nothing
  }

-- ** EFilings
-- | EFilings
data EFilings = EFilings
  { eFilingsAmendedBy            :: !(Maybe Int) -- ^ "amended_by"
  , eFilingsAmendmentChain       :: !(Maybe [Int]) -- ^ "amendment_chain"
  , eFilingsAmendmentNumber      :: !(Maybe Int) -- ^ "amendment_number" -  Number of times the report has been amended.
  , eFilingsAmendsFile           :: !(Maybe Int) -- ^ "amends_file" -  For amendments, this file_number is the file_number of the previous report that is being amended. See amended_by for the most recent version of the report.
  , eFilingsBeginningImageNumber :: !(Maybe Text) -- ^ "beginning_image_number"
  , eFilingsCommitteeId          :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , eFilingsCommitteeName        :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , eFilingsCoverageEndDate      :: !(Maybe Date) -- ^ "coverage_end_date" - Ending date of the reporting period
  , eFilingsCoverageStartDate    :: !(Maybe Date) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , eFilingsCsvUrl               :: !(Maybe Text) -- ^ "csv_url"
  , eFilingsDocumentDescription  :: !(Maybe Text) -- ^ "document_description"
  , eFilingsEndingImageNumber    :: !(Maybe Text) -- ^ "ending_image_number"
  , eFilingsFecFileId            :: !(Maybe Text) -- ^ "fec_file_id"
  , eFilingsFecUrl               :: !(Maybe Text) -- ^ "fec_url"
  , eFilingsFileNumber           :: !(Maybe Int) -- ^ "file_number" - Filing ID number
  , eFilingsFormType             :: !(Maybe Text) -- ^ "form_type" -  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc...
  , eFilingsHtmlUrl              :: !(Maybe Text) -- ^ "html_url"
  , eFilingsIsAmended            :: !(Maybe Bool) -- ^ "is_amended"
  , eFilingsLoadTimestamp        :: !(Maybe DateTime) -- ^ "load_timestamp" - Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
  , eFilingsMostRecent           :: !(Maybe Bool) -- ^ "most_recent"
  , eFilingsMostRecentFiling     :: !(Maybe Int) -- ^ "most_recent_filing"
  , eFilingsPdfUrl               :: !(Maybe Text) -- ^ "pdf_url"
  , eFilingsReceiptDate          :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON EFilings
instance A.FromJSON EFilings where
  parseJSON = A.withObject "EFilings" $ \o ->
    EFilings
      <$> (o .:? "amended_by")
      <*> (o .:? "amendment_chain")
      <*> (o .:? "amendment_number")
      <*> (o .:? "amends_file")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "document_description")
      <*> (o .:? "ending_image_number")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "file_number")
      <*> (o .:? "form_type")
      <*> (o .:? "html_url")
      <*> (o .:? "is_amended")
      <*> (o .:? "load_timestamp")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_filing")
      <*> (o .:? "pdf_url")
      <*> (o .:? "receipt_date")

-- | ToJSON EFilings
instance A.ToJSON EFilings where
  toJSON EFilings {..} =
   _omitNulls
      [ "amended_by" .= eFilingsAmendedBy
      , "amendment_chain" .= eFilingsAmendmentChain
      , "amendment_number" .= eFilingsAmendmentNumber
      , "amends_file" .= eFilingsAmendsFile
      , "beginning_image_number" .= eFilingsBeginningImageNumber
      , "committee_id" .= eFilingsCommitteeId
      , "committee_name" .= eFilingsCommitteeName
      , "coverage_end_date" .= eFilingsCoverageEndDate
      , "coverage_start_date" .= eFilingsCoverageStartDate
      , "csv_url" .= eFilingsCsvUrl
      , "document_description" .= eFilingsDocumentDescription
      , "ending_image_number" .= eFilingsEndingImageNumber
      , "fec_file_id" .= eFilingsFecFileId
      , "fec_url" .= eFilingsFecUrl
      , "file_number" .= eFilingsFileNumber
      , "form_type" .= eFilingsFormType
      , "html_url" .= eFilingsHtmlUrl
      , "is_amended" .= eFilingsIsAmended
      , "load_timestamp" .= eFilingsLoadTimestamp
      , "most_recent" .= eFilingsMostRecent
      , "most_recent_filing" .= eFilingsMostRecentFiling
      , "pdf_url" .= eFilingsPdfUrl
      , "receipt_date" .= eFilingsReceiptDate
      ]


-- | Construct a value of type 'EFilings' (by applying it's required fields, if any)
mkEFilings
  :: EFilings
mkEFilings =
  EFilings
  { eFilingsAmendedBy = Nothing
  , eFilingsAmendmentChain = Nothing
  , eFilingsAmendmentNumber = Nothing
  , eFilingsAmendsFile = Nothing
  , eFilingsBeginningImageNumber = Nothing
  , eFilingsCommitteeId = Nothing
  , eFilingsCommitteeName = Nothing
  , eFilingsCoverageEndDate = Nothing
  , eFilingsCoverageStartDate = Nothing
  , eFilingsCsvUrl = Nothing
  , eFilingsDocumentDescription = Nothing
  , eFilingsEndingImageNumber = Nothing
  , eFilingsFecFileId = Nothing
  , eFilingsFecUrl = Nothing
  , eFilingsFileNumber = Nothing
  , eFilingsFormType = Nothing
  , eFilingsHtmlUrl = Nothing
  , eFilingsIsAmended = Nothing
  , eFilingsLoadTimestamp = Nothing
  , eFilingsMostRecent = Nothing
  , eFilingsMostRecentFiling = Nothing
  , eFilingsPdfUrl = Nothing
  , eFilingsReceiptDate = Nothing
  }

-- ** EFilingsPage
-- | EFilingsPage
data EFilingsPage = EFilingsPage
  { eFilingsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , eFilingsPageResults    :: !(Maybe [EFilings]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON EFilingsPage
instance A.FromJSON EFilingsPage where
  parseJSON = A.withObject "EFilingsPage" $ \o ->
    EFilingsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON EFilingsPage
instance A.ToJSON EFilingsPage where
  toJSON EFilingsPage {..} =
   _omitNulls
      [ "pagination" .= eFilingsPagePagination
      , "results" .= eFilingsPageResults
      ]


-- | Construct a value of type 'EFilingsPage' (by applying it's required fields, if any)
mkEFilingsPage
  :: EFilingsPage
mkEFilingsPage =
  EFilingsPage
  { eFilingsPagePagination = Nothing
  , eFilingsPageResults = Nothing
  }

-- ** EfilingsAmendments
-- | EfilingsAmendments
data EfilingsAmendments = EfilingsAmendments
  { efilingsAmendmentsAmendmentChain     :: !(Maybe [Double]) -- ^ "amendment_chain"
  , efilingsAmendmentsDepth              :: !(Maybe Double) -- ^ "depth"
  , efilingsAmendmentsFileNumber         :: !(Maybe Int) -- ^ "file_number" - Filing ID number
  , efilingsAmendmentsLast               :: !(Maybe Double) -- ^ "last"
  , efilingsAmendmentsLongestChain       :: !(Maybe [Double]) -- ^ "longest_chain"
  , efilingsAmendmentsMostRecentFiling   :: !(Maybe Double) -- ^ "most_recent_filing"
  , efilingsAmendmentsPreviousFileNumber :: !(Maybe Double) -- ^ "previous_file_number"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON EfilingsAmendments
instance A.FromJSON EfilingsAmendments where
  parseJSON = A.withObject "EfilingsAmendments" $ \o ->
    EfilingsAmendments
      <$> (o .:? "amendment_chain")
      <*> (o .:? "depth")
      <*> (o .:? "file_number")
      <*> (o .:? "last")
      <*> (o .:? "longest_chain")
      <*> (o .:? "most_recent_filing")
      <*> (o .:? "previous_file_number")

-- | ToJSON EfilingsAmendments
instance A.ToJSON EfilingsAmendments where
  toJSON EfilingsAmendments {..} =
   _omitNulls
      [ "amendment_chain" .= efilingsAmendmentsAmendmentChain
      , "depth" .= efilingsAmendmentsDepth
      , "file_number" .= efilingsAmendmentsFileNumber
      , "last" .= efilingsAmendmentsLast
      , "longest_chain" .= efilingsAmendmentsLongestChain
      , "most_recent_filing" .= efilingsAmendmentsMostRecentFiling
      , "previous_file_number" .= efilingsAmendmentsPreviousFileNumber
      ]


-- | Construct a value of type 'EfilingsAmendments' (by applying it's required fields, if any)
mkEfilingsAmendments
  :: EfilingsAmendments
mkEfilingsAmendments =
  EfilingsAmendments
  { efilingsAmendmentsAmendmentChain = Nothing
  , efilingsAmendmentsDepth = Nothing
  , efilingsAmendmentsFileNumber = Nothing
  , efilingsAmendmentsLast = Nothing
  , efilingsAmendmentsLongestChain = Nothing
  , efilingsAmendmentsMostRecentFiling = Nothing
  , efilingsAmendmentsPreviousFileNumber = Nothing
  }

-- ** EfilingsAmendmentsPage
-- | EfilingsAmendmentsPage
data EfilingsAmendmentsPage = EfilingsAmendmentsPage
  { efilingsAmendmentsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , efilingsAmendmentsPageResults    :: !(Maybe [EfilingsAmendments]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON EfilingsAmendmentsPage
instance A.FromJSON EfilingsAmendmentsPage where
  parseJSON = A.withObject "EfilingsAmendmentsPage" $ \o ->
    EfilingsAmendmentsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON EfilingsAmendmentsPage
instance A.ToJSON EfilingsAmendmentsPage where
  toJSON EfilingsAmendmentsPage {..} =
   _omitNulls
      [ "pagination" .= efilingsAmendmentsPagePagination
      , "results" .= efilingsAmendmentsPageResults
      ]


-- | Construct a value of type 'EfilingsAmendmentsPage' (by applying it's required fields, if any)
mkEfilingsAmendmentsPage
  :: EfilingsAmendmentsPage
mkEfilingsAmendmentsPage =
  EfilingsAmendmentsPage
  { efilingsAmendmentsPagePagination = Nothing
  , efilingsAmendmentsPageResults = Nothing
  }

-- ** Election
-- | Election
data Election = Election
  { electionCandidateElectionYear  :: !(Maybe Int) -- ^ "candidate_election_year"
  , electionCandidateId            :: !(Maybe Text) -- ^ "candidate_id"
  , electionCandidateName          :: !(Maybe Text) -- ^ "candidate_name"
  , electionCandidatePccId         :: !(Maybe Text) -- ^ "candidate_pcc_id"
  , electionCandidatePccName       :: !(Maybe Text) -- ^ "candidate_pcc_name"
  , electionCashOnHandEndPeriod    :: !(Maybe Double) -- ^ "cash_on_hand_end_period"
  , electionCommitteeIds           :: !(Maybe [Text]) -- ^ "committee_ids"
  , electionCoverageEndDate        :: !(Maybe Date) -- ^ "coverage_end_date"
  , electionIncumbentChallengeFull :: !(Maybe Text) -- ^ "incumbent_challenge_full"
  , electionPartyFull              :: !(Maybe Text) -- ^ "party_full"
  , electionTotalDisbursements     :: !(Maybe Double) -- ^ "total_disbursements"
  , electionTotalReceipts          :: !(Maybe Double) -- ^ "total_receipts"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON Election
instance A.FromJSON Election where
  parseJSON = A.withObject "Election" $ \o ->
    Election
      <$> (o .:? "candidate_election_year")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_pcc_id")
      <*> (o .:? "candidate_pcc_name")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "committee_ids")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "incumbent_challenge_full")
      <*> (o .:? "party_full")
      <*> (o .:? "total_disbursements")
      <*> (o .:? "total_receipts")

-- | ToJSON Election
instance A.ToJSON Election where
  toJSON Election {..} =
   _omitNulls
      [ "candidate_election_year" .= electionCandidateElectionYear
      , "candidate_id" .= electionCandidateId
      , "candidate_name" .= electionCandidateName
      , "candidate_pcc_id" .= electionCandidatePccId
      , "candidate_pcc_name" .= electionCandidatePccName
      , "cash_on_hand_end_period" .= electionCashOnHandEndPeriod
      , "committee_ids" .= electionCommitteeIds
      , "coverage_end_date" .= electionCoverageEndDate
      , "incumbent_challenge_full" .= electionIncumbentChallengeFull
      , "party_full" .= electionPartyFull
      , "total_disbursements" .= electionTotalDisbursements
      , "total_receipts" .= electionTotalReceipts
      ]


-- | Construct a value of type 'Election' (by applying it's required fields, if any)
mkElection
  :: Election
mkElection =
  Election
  { electionCandidateElectionYear = Nothing
  , electionCandidateId = Nothing
  , electionCandidateName = Nothing
  , electionCandidatePccId = Nothing
  , electionCandidatePccName = Nothing
  , electionCashOnHandEndPeriod = Nothing
  , electionCommitteeIds = Nothing
  , electionCoverageEndDate = Nothing
  , electionIncumbentChallengeFull = Nothing
  , electionPartyFull = Nothing
  , electionTotalDisbursements = Nothing
  , electionTotalReceipts = Nothing
  }

-- ** ElectionDate
-- | ElectionDate
data ElectionDate = ElectionDate
  { electionDateActiveElection     :: !(Maybe Bool) -- ^ "active_election"
  , electionDateCreateDate         :: !(Maybe DateTime) -- ^ "create_date" - Date the record was created
  , electionDateElectionDate       :: !(Maybe Date) -- ^ "election_date" - Date of election
  , electionDateElectionDistrict   :: !(Maybe Int) -- ^ "election_district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , electionDateElectionNotes      :: !(Maybe Text) -- ^ "election_notes"
  , electionDateElectionParty      :: !(Maybe Text) -- ^ "election_party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , electionDateElectionState      :: !(Maybe Text) -- ^ "election_state" - US state or territory where a candidate runs for office
  , electionDateElectionTypeFull   :: !(Maybe Text) -- ^ "election_type_full"
  , electionDateElectionTypeId     :: !(Maybe Text) -- ^ "election_type_id" - Election type  Convention, Primary, General, Special, Runoff etc.
  , electionDateElectionYear       :: !(Maybe Int) -- ^ "election_year" - Year of election
  , electionDateOfficeSought       :: !(Maybe Text) -- ^ "office_sought" - Federal office candidate runs for: H, S or P
  , electionDatePrimaryGeneralDate :: !(Maybe Date) -- ^ "primary_general_date"
  , electionDateUpdateDate         :: !(Maybe DateTime) -- ^ "update_date" - Date the record was updated
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionDate
instance A.FromJSON ElectionDate where
  parseJSON = A.withObject "ElectionDate" $ \o ->
    ElectionDate
      <$> (o .:? "active_election")
      <*> (o .:? "create_date")
      <*> (o .:? "election_date")
      <*> (o .:? "election_district")
      <*> (o .:? "election_notes")
      <*> (o .:? "election_party")
      <*> (o .:? "election_state")
      <*> (o .:? "election_type_full")
      <*> (o .:? "election_type_id")
      <*> (o .:? "election_year")
      <*> (o .:? "office_sought")
      <*> (o .:? "primary_general_date")
      <*> (o .:? "update_date")

-- | ToJSON ElectionDate
instance A.ToJSON ElectionDate where
  toJSON ElectionDate {..} =
   _omitNulls
      [ "active_election" .= electionDateActiveElection
      , "create_date" .= electionDateCreateDate
      , "election_date" .= electionDateElectionDate
      , "election_district" .= electionDateElectionDistrict
      , "election_notes" .= electionDateElectionNotes
      , "election_party" .= electionDateElectionParty
      , "election_state" .= electionDateElectionState
      , "election_type_full" .= electionDateElectionTypeFull
      , "election_type_id" .= electionDateElectionTypeId
      , "election_year" .= electionDateElectionYear
      , "office_sought" .= electionDateOfficeSought
      , "primary_general_date" .= electionDatePrimaryGeneralDate
      , "update_date" .= electionDateUpdateDate
      ]


-- | Construct a value of type 'ElectionDate' (by applying it's required fields, if any)
mkElectionDate
  :: ElectionDate
mkElectionDate =
  ElectionDate
  { electionDateActiveElection = Nothing
  , electionDateCreateDate = Nothing
  , electionDateElectionDate = Nothing
  , electionDateElectionDistrict = Nothing
  , electionDateElectionNotes = Nothing
  , electionDateElectionParty = Nothing
  , electionDateElectionState = Nothing
  , electionDateElectionTypeFull = Nothing
  , electionDateElectionTypeId = Nothing
  , electionDateElectionYear = Nothing
  , electionDateOfficeSought = Nothing
  , electionDatePrimaryGeneralDate = Nothing
  , electionDateUpdateDate = Nothing
  }

-- ** ElectionDatePage
-- | ElectionDatePage
data ElectionDatePage = ElectionDatePage
  { electionDatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , electionDatePageResults    :: !(Maybe [ElectionDate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionDatePage
instance A.FromJSON ElectionDatePage where
  parseJSON = A.withObject "ElectionDatePage" $ \o ->
    ElectionDatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ElectionDatePage
instance A.ToJSON ElectionDatePage where
  toJSON ElectionDatePage {..} =
   _omitNulls
      [ "pagination" .= electionDatePagePagination
      , "results" .= electionDatePageResults
      ]


-- | Construct a value of type 'ElectionDatePage' (by applying it's required fields, if any)
mkElectionDatePage
  :: ElectionDatePage
mkElectionDatePage =
  ElectionDatePage
  { electionDatePagePagination = Nothing
  , electionDatePageResults = Nothing
  }

-- ** ElectionPage
-- | ElectionPage
data ElectionPage = ElectionPage
  { electionPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , electionPageResults    :: !(Maybe [Election]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionPage
instance A.FromJSON ElectionPage where
  parseJSON = A.withObject "ElectionPage" $ \o ->
    ElectionPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ElectionPage
instance A.ToJSON ElectionPage where
  toJSON ElectionPage {..} =
   _omitNulls
      [ "pagination" .= electionPagePagination
      , "results" .= electionPageResults
      ]


-- | Construct a value of type 'ElectionPage' (by applying it's required fields, if any)
mkElectionPage
  :: ElectionPage
mkElectionPage =
  ElectionPage
  { electionPagePagination = Nothing
  , electionPageResults = Nothing
  }

-- ** ElectionSearch
-- | ElectionSearch
data ElectionSearch = ElectionSearch
  { electionSearchCandidateStatus :: !(Maybe Text) -- ^ "candidate_status"
  , electionSearchCycle           :: !(Maybe Int) -- ^ "cycle"
  , electionSearchDistrict        :: !(Maybe Text) -- ^ "district"
  , electionSearchIncumbentId     :: !(Maybe Text) -- ^ "incumbent_id"
  , electionSearchIncumbentName   :: !(Maybe Text) -- ^ "incumbent_name"
  , electionSearchOffice          :: !(Maybe Text) -- ^ "office"
  , electionSearchState           :: !(Maybe Text) -- ^ "state"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionSearch
instance A.FromJSON ElectionSearch where
  parseJSON = A.withObject "ElectionSearch" $ \o ->
    ElectionSearch
      <$> (o .:? "candidate_status")
      <*> (o .:? "cycle")
      <*> (o .:? "district")
      <*> (o .:? "incumbent_id")
      <*> (o .:? "incumbent_name")
      <*> (o .:? "office")
      <*> (o .:? "state")

-- | ToJSON ElectionSearch
instance A.ToJSON ElectionSearch where
  toJSON ElectionSearch {..} =
   _omitNulls
      [ "candidate_status" .= electionSearchCandidateStatus
      , "cycle" .= electionSearchCycle
      , "district" .= electionSearchDistrict
      , "incumbent_id" .= electionSearchIncumbentId
      , "incumbent_name" .= electionSearchIncumbentName
      , "office" .= electionSearchOffice
      , "state" .= electionSearchState
      ]


-- | Construct a value of type 'ElectionSearch' (by applying it's required fields, if any)
mkElectionSearch
  :: ElectionSearch
mkElectionSearch =
  ElectionSearch
  { electionSearchCandidateStatus = Nothing
  , electionSearchCycle = Nothing
  , electionSearchDistrict = Nothing
  , electionSearchIncumbentId = Nothing
  , electionSearchIncumbentName = Nothing
  , electionSearchOffice = Nothing
  , electionSearchState = Nothing
  }

-- ** ElectionSearchPage
-- | ElectionSearchPage
data ElectionSearchPage = ElectionSearchPage
  { electionSearchPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , electionSearchPageResults    :: !(Maybe [ElectionSearch]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionSearchPage
instance A.FromJSON ElectionSearchPage where
  parseJSON = A.withObject "ElectionSearchPage" $ \o ->
    ElectionSearchPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ElectionSearchPage
instance A.ToJSON ElectionSearchPage where
  toJSON ElectionSearchPage {..} =
   _omitNulls
      [ "pagination" .= electionSearchPagePagination
      , "results" .= electionSearchPageResults
      ]


-- | Construct a value of type 'ElectionSearchPage' (by applying it's required fields, if any)
mkElectionSearchPage
  :: ElectionSearchPage
mkElectionSearchPage =
  ElectionSearchPage
  { electionSearchPagePagination = Nothing
  , electionSearchPageResults = Nothing
  }

-- ** ElectionSummary
-- | ElectionSummary
data ElectionSummary = ElectionSummary
  { electionSummaryCount                   :: !(Maybe Int) -- ^ "count"
  , electionSummaryDisbursements           :: !(Maybe Double) -- ^ "disbursements"
  , electionSummaryIndependentExpenditures :: !(Maybe Double) -- ^ "independent_expenditures"
  , electionSummaryReceipts                :: !(Maybe Double) -- ^ "receipts"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionSummary
instance A.FromJSON ElectionSummary where
  parseJSON = A.withObject "ElectionSummary" $ \o ->
    ElectionSummary
      <$> (o .:? "count")
      <*> (o .:? "disbursements")
      <*> (o .:? "independent_expenditures")
      <*> (o .:? "receipts")

-- | ToJSON ElectionSummary
instance A.ToJSON ElectionSummary where
  toJSON ElectionSummary {..} =
   _omitNulls
      [ "count" .= electionSummaryCount
      , "disbursements" .= electionSummaryDisbursements
      , "independent_expenditures" .= electionSummaryIndependentExpenditures
      , "receipts" .= electionSummaryReceipts
      ]


-- | Construct a value of type 'ElectionSummary' (by applying it's required fields, if any)
mkElectionSummary
  :: ElectionSummary
mkElectionSummary =
  ElectionSummary
  { electionSummaryCount = Nothing
  , electionSummaryDisbursements = Nothing
  , electionSummaryIndependentExpenditures = Nothing
  , electionSummaryReceipts = Nothing
  }

-- ** Electioneering
-- | Electioneering
data Electioneering = Electioneering
  { electioneeringAmendmentIndicator       :: !(Maybe Text) -- ^ "amendment_indicator"
  , electioneeringBeginningImageNumber     :: !(Maybe Text) -- ^ "beginning_image_number"
  , electioneeringCalculatedCandidateShare :: !(Maybe Double) -- ^ "calculated_candidate_share" - If an electioneering cost targets several candidates, the total cost is divided by the number of candidates. If it only mentions one candidate the full cost of the communication is listed.
  , electioneeringCandidateDistrict        :: !(Maybe Text) -- ^ "candidate_district"
  , electioneeringCandidateId              :: !(Maybe Text) -- ^ "candidate_id"
  , electioneeringCandidateName            :: !(Maybe Text) -- ^ "candidate_name"
  , electioneeringCandidateOffice          :: !(Maybe Text) -- ^ "candidate_office"
  , electioneeringCandidateState           :: !(Maybe Text) -- ^ "candidate_state"
  , electioneeringCommitteeId              :: !(Maybe Text) -- ^ "committee_id"
  , electioneeringCommitteeName            :: !(Maybe Text) -- ^ "committee_name"
  , electioneeringCommunicationDate        :: !(Maybe Date) -- ^ "communication_date" - It is the airing, broadcast, cablecast or other dissemination of the communication
  , electioneeringDisbursementAmount       :: !(Maybe Double) -- ^ "disbursement_amount"
  , electioneeringDisbursementDate         :: !(Maybe Date) -- ^ "disbursement_date" - Disbursement date includes actual disbursements and execution of contracts creating an obligation to make disbursements (SB date of disbursement)
  , electioneeringElectionType             :: !(Maybe Text) -- ^ "election_type"
  , electioneeringFileNumber               :: !(Maybe Int) -- ^ "file_number"
  , electioneeringLinkId                   :: !(Maybe Int) -- ^ "link_id"
  , electioneeringNumberOfCandidates       :: !(Maybe Double) -- ^ "number_of_candidates"
  , electioneeringPdfUrl                   :: !(Maybe Text) -- ^ "pdf_url"
  , electioneeringPublicDistributionDate   :: !(Maybe Date) -- ^ "public_distribution_date" - The pubic distribution date is the date that triggers disclosure of the electioneering communication (date reported on page 1 of Form 9)
  , electioneeringPurposeDescription       :: !(Maybe Text) -- ^ "purpose_description"
  , electioneeringReceiptDate              :: !(Maybe Date) -- ^ "receipt_date"
  , electioneeringReportYear               :: !(Maybe Int) -- ^ "report_year"
  , electioneeringSbImageNum               :: !(Maybe Text) -- ^ "sb_image_num"
  , electioneeringSbLinkId                 :: !(Maybe Text) -- ^ "sb_link_id"
  , electioneeringSubId                    :: !(Maybe Int) -- ^ "sub_id" - The identifier for each electioneering record
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON Electioneering
instance A.FromJSON Electioneering where
  parseJSON = A.withObject "Electioneering" $ \o ->
    Electioneering
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "calculated_candidate_share")
      <*> (o .:? "candidate_district")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_state")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "communication_date")
      <*> (o .:? "disbursement_amount")
      <*> (o .:? "disbursement_date")
      <*> (o .:? "election_type")
      <*> (o .:? "file_number")
      <*> (o .:? "link_id")
      <*> (o .:? "number_of_candidates")
      <*> (o .:? "pdf_url")
      <*> (o .:? "public_distribution_date")
      <*> (o .:? "purpose_description")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report_year")
      <*> (o .:? "sb_image_num")
      <*> (o .:? "sb_link_id")
      <*> (o .:? "sub_id")

-- | ToJSON Electioneering
instance A.ToJSON Electioneering where
  toJSON Electioneering {..} =
   _omitNulls
      [ "amendment_indicator" .= electioneeringAmendmentIndicator
      , "beginning_image_number" .= electioneeringBeginningImageNumber
      , "calculated_candidate_share" .= electioneeringCalculatedCandidateShare
      , "candidate_district" .= electioneeringCandidateDistrict
      , "candidate_id" .= electioneeringCandidateId
      , "candidate_name" .= electioneeringCandidateName
      , "candidate_office" .= electioneeringCandidateOffice
      , "candidate_state" .= electioneeringCandidateState
      , "committee_id" .= electioneeringCommitteeId
      , "committee_name" .= electioneeringCommitteeName
      , "communication_date" .= electioneeringCommunicationDate
      , "disbursement_amount" .= electioneeringDisbursementAmount
      , "disbursement_date" .= electioneeringDisbursementDate
      , "election_type" .= electioneeringElectionType
      , "file_number" .= electioneeringFileNumber
      , "link_id" .= electioneeringLinkId
      , "number_of_candidates" .= electioneeringNumberOfCandidates
      , "pdf_url" .= electioneeringPdfUrl
      , "public_distribution_date" .= electioneeringPublicDistributionDate
      , "purpose_description" .= electioneeringPurposeDescription
      , "receipt_date" .= electioneeringReceiptDate
      , "report_year" .= electioneeringReportYear
      , "sb_image_num" .= electioneeringSbImageNum
      , "sb_link_id" .= electioneeringSbLinkId
      , "sub_id" .= electioneeringSubId
      ]


-- | Construct a value of type 'Electioneering' (by applying it's required fields, if any)
mkElectioneering
  :: Electioneering
mkElectioneering =
  Electioneering
  { electioneeringAmendmentIndicator = Nothing
  , electioneeringBeginningImageNumber = Nothing
  , electioneeringCalculatedCandidateShare = Nothing
  , electioneeringCandidateDistrict = Nothing
  , electioneeringCandidateId = Nothing
  , electioneeringCandidateName = Nothing
  , electioneeringCandidateOffice = Nothing
  , electioneeringCandidateState = Nothing
  , electioneeringCommitteeId = Nothing
  , electioneeringCommitteeName = Nothing
  , electioneeringCommunicationDate = Nothing
  , electioneeringDisbursementAmount = Nothing
  , electioneeringDisbursementDate = Nothing
  , electioneeringElectionType = Nothing
  , electioneeringFileNumber = Nothing
  , electioneeringLinkId = Nothing
  , electioneeringNumberOfCandidates = Nothing
  , electioneeringPdfUrl = Nothing
  , electioneeringPublicDistributionDate = Nothing
  , electioneeringPurposeDescription = Nothing
  , electioneeringReceiptDate = Nothing
  , electioneeringReportYear = Nothing
  , electioneeringSbImageNum = Nothing
  , electioneeringSbLinkId = Nothing
  , electioneeringSubId = Nothing
  }

-- ** ElectioneeringByCandidate
-- | ElectioneeringByCandidate
data ElectioneeringByCandidate = ElectioneeringByCandidate
  { electioneeringByCandidateCandidateId   :: !(Maybe Text) -- ^ "candidate_id"
  , electioneeringByCandidateCandidateName :: !(Maybe Text) -- ^ "candidate_name"
  , electioneeringByCandidateCommitteeId   :: !(Maybe Text) -- ^ "committee_id"
  , electioneeringByCandidateCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , electioneeringByCandidateCount         :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , electioneeringByCandidateCycle         :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , electioneeringByCandidateTotal         :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectioneeringByCandidate
instance A.FromJSON ElectioneeringByCandidate where
  parseJSON = A.withObject "ElectioneeringByCandidate" $ \o ->
    ElectioneeringByCandidate
      <$> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:? "total")

-- | ToJSON ElectioneeringByCandidate
instance A.ToJSON ElectioneeringByCandidate where
  toJSON ElectioneeringByCandidate {..} =
   _omitNulls
      [ "candidate_id" .= electioneeringByCandidateCandidateId
      , "candidate_name" .= electioneeringByCandidateCandidateName
      , "committee_id" .= electioneeringByCandidateCommitteeId
      , "committee_name" .= electioneeringByCandidateCommitteeName
      , "count" .= electioneeringByCandidateCount
      , "cycle" .= electioneeringByCandidateCycle
      , "total" .= electioneeringByCandidateTotal
      ]


-- | Construct a value of type 'ElectioneeringByCandidate' (by applying it's required fields, if any)
mkElectioneeringByCandidate
  :: Int -- ^ 'electioneeringByCandidateCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> ElectioneeringByCandidate
mkElectioneeringByCandidate electioneeringByCandidateCycle =
  ElectioneeringByCandidate
  { electioneeringByCandidateCandidateId = Nothing
  , electioneeringByCandidateCandidateName = Nothing
  , electioneeringByCandidateCommitteeId = Nothing
  , electioneeringByCandidateCommitteeName = Nothing
  , electioneeringByCandidateCount = Nothing
  , electioneeringByCandidateCycle
  , electioneeringByCandidateTotal = Nothing
  }

-- ** ElectioneeringByCandidatePage
-- | ElectioneeringByCandidatePage
data ElectioneeringByCandidatePage = ElectioneeringByCandidatePage
  { electioneeringByCandidatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , electioneeringByCandidatePageResults :: !(Maybe [ElectioneeringByCandidate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectioneeringByCandidatePage
instance A.FromJSON ElectioneeringByCandidatePage where
  parseJSON = A.withObject "ElectioneeringByCandidatePage" $ \o ->
    ElectioneeringByCandidatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ElectioneeringByCandidatePage
instance A.ToJSON ElectioneeringByCandidatePage where
  toJSON ElectioneeringByCandidatePage {..} =
   _omitNulls
      [ "pagination" .= electioneeringByCandidatePagePagination
      , "results" .= electioneeringByCandidatePageResults
      ]


-- | Construct a value of type 'ElectioneeringByCandidatePage' (by applying it's required fields, if any)
mkElectioneeringByCandidatePage
  :: ElectioneeringByCandidatePage
mkElectioneeringByCandidatePage =
  ElectioneeringByCandidatePage
  { electioneeringByCandidatePagePagination = Nothing
  , electioneeringByCandidatePageResults = Nothing
  }

-- ** ElectioneeringPage
-- | ElectioneeringPage
data ElectioneeringPage = ElectioneeringPage
  { electioneeringPagePagination :: !(Maybe SeekInfo) -- ^ "pagination"
  , electioneeringPageResults    :: !(Maybe [Electioneering]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectioneeringPage
instance A.FromJSON ElectioneeringPage where
  parseJSON = A.withObject "ElectioneeringPage" $ \o ->
    ElectioneeringPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ElectioneeringPage
instance A.ToJSON ElectioneeringPage where
  toJSON ElectioneeringPage {..} =
   _omitNulls
      [ "pagination" .= electioneeringPagePagination
      , "results" .= electioneeringPageResults
      ]


-- | Construct a value of type 'ElectioneeringPage' (by applying it's required fields, if any)
mkElectioneeringPage
  :: ElectioneeringPage
mkElectioneeringPage =
  ElectioneeringPage
  { electioneeringPagePagination = Nothing
  , electioneeringPageResults = Nothing
  }

-- ** ElectionsList
-- | ElectionsList
data ElectionsList = ElectionsList
  { electionsListCycle    :: !(Maybe Int) -- ^ "cycle"
  , electionsListDistrict :: !(Maybe Text) -- ^ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , electionsListOffice   :: !(Maybe Text) -- ^ "office" - Federal office candidate runs for: H, S or P
  , electionsListState    :: !(Maybe Text) -- ^ "state" - US state or territory
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionsList
instance A.FromJSON ElectionsList where
  parseJSON = A.withObject "ElectionsList" $ \o ->
    ElectionsList
      <$> (o .:? "cycle")
      <*> (o .:? "district")
      <*> (o .:? "office")
      <*> (o .:? "state")

-- | ToJSON ElectionsList
instance A.ToJSON ElectionsList where
  toJSON ElectionsList {..} =
   _omitNulls
      [ "cycle" .= electionsListCycle
      , "district" .= electionsListDistrict
      , "office" .= electionsListOffice
      , "state" .= electionsListState
      ]


-- | Construct a value of type 'ElectionsList' (by applying it's required fields, if any)
mkElectionsList
  :: ElectionsList
mkElectionsList =
  ElectionsList
  { electionsListCycle = Nothing
  , electionsListDistrict = Nothing
  , electionsListOffice = Nothing
  , electionsListState = Nothing
  }

-- ** ElectionsListPage
-- | ElectionsListPage
data ElectionsListPage = ElectionsListPage
  { electionsListPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , electionsListPageResults    :: !(Maybe [ElectionsList]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ElectionsListPage
instance A.FromJSON ElectionsListPage where
  parseJSON = A.withObject "ElectionsListPage" $ \o ->
    ElectionsListPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ElectionsListPage
instance A.ToJSON ElectionsListPage where
  toJSON ElectionsListPage {..} =
   _omitNulls
      [ "pagination" .= electionsListPagePagination
      , "results" .= electionsListPageResults
      ]


-- | Construct a value of type 'ElectionsListPage' (by applying it's required fields, if any)
mkElectionsListPage
  :: ElectionsListPage
mkElectionsListPage =
  ElectionsListPage
  { electionsListPagePagination = Nothing
  , electionsListPageResults = Nothing
  }

-- ** EntityReceiptDisbursementTotals
-- | EntityReceiptDisbursementTotals
data EntityReceiptDisbursementTotals = EntityReceiptDisbursementTotals
  { entityReceiptDisbursementTotalsCumulativeCandidateDisbursements :: !(Maybe Float) -- ^ "cumulative_candidate_disbursements" - Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.
  , entityReceiptDisbursementTotalsCumulativeCandidateReceipts :: !(Maybe Float) -- ^ "cumulative_candidate_receipts" - Cumulative candidate receipts in a two year period, adjusted to avoid double counting.
  , entityReceiptDisbursementTotalsCumulativePacDisbursements :: !(Maybe Float) -- ^ "cumulative_pac_disbursements" - Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.
  , entityReceiptDisbursementTotalsCumulativePacReceipts :: !(Maybe Float) -- ^ "cumulative_pac_receipts" - Cumulative PAC recipts in a two year period, adjusted to avoid double counting.
  , entityReceiptDisbursementTotalsCumulativePartyDisbursements :: !(Maybe Float) -- ^ "cumulative_party_disbursements" - Cumulative party disbursements in a two year period, adjusted to avoid double counting.
  , entityReceiptDisbursementTotalsCumulativePartyReceipts :: !(Maybe Float) -- ^ "cumulative_party_receipts" - Cumulative party receipts in a two year period, adjusted to avoid double counting.
  , entityReceiptDisbursementTotalsCycle :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , entityReceiptDisbursementTotalsEndDate :: !(Maybe Date) -- ^ "end_date"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON EntityReceiptDisbursementTotals
instance A.FromJSON EntityReceiptDisbursementTotals where
  parseJSON = A.withObject "EntityReceiptDisbursementTotals" $ \o ->
    EntityReceiptDisbursementTotals
      <$> (o .:? "cumulative_candidate_disbursements")
      <*> (o .:? "cumulative_candidate_receipts")
      <*> (o .:? "cumulative_pac_disbursements")
      <*> (o .:? "cumulative_pac_receipts")
      <*> (o .:? "cumulative_party_disbursements")
      <*> (o .:? "cumulative_party_receipts")
      <*> (o .:? "cycle")
      <*> (o .:? "end_date")

-- | ToJSON EntityReceiptDisbursementTotals
instance A.ToJSON EntityReceiptDisbursementTotals where
  toJSON EntityReceiptDisbursementTotals {..} =
   _omitNulls
      [ "cumulative_candidate_disbursements" .= entityReceiptDisbursementTotalsCumulativeCandidateDisbursements
      , "cumulative_candidate_receipts" .= entityReceiptDisbursementTotalsCumulativeCandidateReceipts
      , "cumulative_pac_disbursements" .= entityReceiptDisbursementTotalsCumulativePacDisbursements
      , "cumulative_pac_receipts" .= entityReceiptDisbursementTotalsCumulativePacReceipts
      , "cumulative_party_disbursements" .= entityReceiptDisbursementTotalsCumulativePartyDisbursements
      , "cumulative_party_receipts" .= entityReceiptDisbursementTotalsCumulativePartyReceipts
      , "cycle" .= entityReceiptDisbursementTotalsCycle
      , "end_date" .= entityReceiptDisbursementTotalsEndDate
      ]


-- | Construct a value of type 'EntityReceiptDisbursementTotals' (by applying it's required fields, if any)
mkEntityReceiptDisbursementTotals
  :: EntityReceiptDisbursementTotals
mkEntityReceiptDisbursementTotals =
  EntityReceiptDisbursementTotals
  { entityReceiptDisbursementTotalsCumulativeCandidateDisbursements = Nothing
  , entityReceiptDisbursementTotalsCumulativeCandidateReceipts = Nothing
  , entityReceiptDisbursementTotalsCumulativePacDisbursements = Nothing
  , entityReceiptDisbursementTotalsCumulativePacReceipts = Nothing
  , entityReceiptDisbursementTotalsCumulativePartyDisbursements = Nothing
  , entityReceiptDisbursementTotalsCumulativePartyReceipts = Nothing
  , entityReceiptDisbursementTotalsCycle = Nothing
  , entityReceiptDisbursementTotalsEndDate = Nothing
  }

-- ** EntityReceiptDisbursementTotalsPage
-- | EntityReceiptDisbursementTotalsPage
data EntityReceiptDisbursementTotalsPage = EntityReceiptDisbursementTotalsPage
  { entityReceiptDisbursementTotalsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , entityReceiptDisbursementTotalsPageResults :: !(Maybe [EntityReceiptDisbursementTotals]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON EntityReceiptDisbursementTotalsPage
instance A.FromJSON EntityReceiptDisbursementTotalsPage where
  parseJSON = A.withObject "EntityReceiptDisbursementTotalsPage" $ \o ->
    EntityReceiptDisbursementTotalsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON EntityReceiptDisbursementTotalsPage
instance A.ToJSON EntityReceiptDisbursementTotalsPage where
  toJSON EntityReceiptDisbursementTotalsPage {..} =
   _omitNulls
      [ "pagination" .= entityReceiptDisbursementTotalsPagePagination
      , "results" .= entityReceiptDisbursementTotalsPageResults
      ]


-- | Construct a value of type 'EntityReceiptDisbursementTotalsPage' (by applying it's required fields, if any)
mkEntityReceiptDisbursementTotalsPage
  :: EntityReceiptDisbursementTotalsPage
mkEntityReceiptDisbursementTotalsPage =
  EntityReceiptDisbursementTotalsPage
  { entityReceiptDisbursementTotalsPagePagination = Nothing
  , entityReceiptDisbursementTotalsPageResults = Nothing
  }

-- ** Filings
-- | Filings
data Filings = Filings
  { filingsAmendmentChain               :: !(Maybe [Double]) -- ^ "amendment_chain"
  , filingsAmendmentIndicator           :: !(Maybe Text) -- ^ "amendment_indicator" -  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed.
  , filingsAmendmentVersion             :: !(Maybe Int) -- ^ "amendment_version"
  , filingsBeginningImageNumber         :: !(Maybe Text) -- ^ "beginning_image_number"
  , filingsCandidateId                  :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , filingsCandidateName                :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , filingsCashOnHandBeginningPeriod    :: !(Maybe Double) -- ^ "cash_on_hand_beginning_period" - Balance for the committee at the start of the two-year period
  , filingsCashOnHandEndPeriod          :: !(Maybe Double) -- ^ "cash_on_hand_end_period" - Ending cash balance on the most recent filing
  , filingsCmteTp                       :: !(Maybe Text) -- ^ "cmte_tp" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , filingsCommitteeId                  :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , filingsCommitteeName                :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , filingsCoverageEndDate              :: !(Maybe Date) -- ^ "coverage_end_date" - Ending date of the reporting period
  , filingsCoverageStartDate            :: !(Maybe Date) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , filingsCsvUrl                       :: !(Maybe Text) -- ^ "csv_url"
  , filingsCycle                        :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , filingsDebtsOwedByCommittee         :: !(Maybe Double) -- ^ "debts_owed_by_committee" - Debts owed by the committee
  , filingsDebtsOwedToCommittee         :: !(Maybe Double) -- ^ "debts_owed_to_committee" - Debts owed to the committee
  , filingsDocumentDescription          :: !(Maybe Text) -- ^ "document_description"
  , filingsDocumentType                 :: !(Maybe Text) -- ^ "document_type" -  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice
  , filingsDocumentTypeFull             :: !(Maybe Text) -- ^ "document_type_full" -  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice
  , filingsElectionYear                 :: !(Maybe Int) -- ^ "election_year" - Year of election
  , filingsEndingImageNumber            :: !(Maybe Text) -- ^ "ending_image_number"
  , filingsFecFileId                    :: !(Maybe Text) -- ^ "fec_file_id"
  , filingsFecUrl                       :: !(Maybe Text) -- ^ "fec_url"
  , filingsFileNumber                   :: !(Maybe Int) -- ^ "file_number"
  , filingsFormType                     :: !(Maybe Text) -- ^ "form_type" -  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc...
  , filingsHousePersonalFunds           :: !(Maybe Double) -- ^ "house_personal_funds"
  , filingsHtmlUrl                      :: !(Maybe Text) -- ^ "html_url" - HTML link to the filing.
  , filingsIsAmended                    :: !(Maybe Bool) -- ^ "is_amended"
  , filingsMeansFiled                   :: !(Maybe Text) -- ^ "means_filed" - The method used to file with the FEC, either electronic or on paper.
  , filingsMostRecent                   :: !(Maybe Bool) -- ^ "most_recent"
  , filingsMostRecentFileNumber         :: !(Maybe Int) -- ^ "most_recent_file_number"
  , filingsNetDonations                 :: !(Maybe Double) -- ^ "net_donations"
  , filingsOffice                       :: !(Maybe Text) -- ^ "office" - Federal office candidate runs for: H, S or P
  , filingsOppositionPersonalFunds      :: !(Maybe Double) -- ^ "opposition_personal_funds"
  , filingsPages                        :: !(Maybe Int) -- ^ "pages" - Number of pages in the document
  , filingsParty                        :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , filingsPdfUrl                       :: !(Maybe Text) -- ^ "pdf_url"
  , filingsPreviousFileNumber           :: !(Maybe Int) -- ^ "previous_file_number"
  , filingsPrimaryGeneralIndicator      :: !(Maybe Text) -- ^ "primary_general_indicator"
  , filingsReceiptDate                  :: !(Maybe Date) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , filingsReportType                   :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , filingsReportTypeFull               :: !(Maybe Text) -- ^ "report_type_full" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , filingsReportYear                   :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , filingsRequestType                  :: !(Maybe Text) -- ^ "request_type"
  , filingsSenatePersonalFunds          :: !(Maybe Double) -- ^ "senate_personal_funds"
  , filingsState                        :: !(Maybe Text) -- ^ "state" - US state or territory where a candidate runs for office
  , filingsSubId                        :: !(Maybe Text) -- ^ "sub_id"
  , filingsTotalCommunicationCost       :: !(Maybe Double) -- ^ "total_communication_cost"
  , filingsTotalDisbursements           :: !(Maybe Double) -- ^ "total_disbursements"
  , filingsTotalIndependentExpenditures :: !(Maybe Double) -- ^ "total_independent_expenditures"
  , filingsTotalIndividualContributions :: !(Maybe Double) -- ^ "total_individual_contributions"
  , filingsTotalReceipts                :: !(Maybe Double) -- ^ "total_receipts"
  , filingsTreasurerName                :: !(Maybe Text) -- ^ "treasurer_name" - Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
  , filingsUpdateDate                   :: !(Maybe Date) -- ^ "update_date"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON Filings
instance A.FromJSON Filings where
  parseJSON = A.withObject "Filings" $ \o ->
    Filings
      <$> (o .:? "amendment_chain")
      <*> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_version")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "cash_on_hand_beginning_period")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "cmte_tp")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "debts_owed_to_committee")
      <*> (o .:? "document_description")
      <*> (o .:? "document_type")
      <*> (o .:? "document_type_full")
      <*> (o .:? "election_year")
      <*> (o .:? "ending_image_number")
      <*> (o .:? "fec_file_id")
      <*> (o .:? "fec_url")
      <*> (o .:? "file_number")
      <*> (o .:? "form_type")
      <*> (o .:? "house_personal_funds")
      <*> (o .:? "html_url")
      <*> (o .:? "is_amended")
      <*> (o .:? "means_filed")
      <*> (o .:? "most_recent")
      <*> (o .:? "most_recent_file_number")
      <*> (o .:? "net_donations")
      <*> (o .:? "office")
      <*> (o .:? "opposition_personal_funds")
      <*> (o .:? "pages")
      <*> (o .:? "party")
      <*> (o .:? "pdf_url")
      <*> (o .:? "previous_file_number")
      <*> (o .:? "primary_general_indicator")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")
      <*> (o .:? "request_type")
      <*> (o .:? "senate_personal_funds")
      <*> (o .:? "state")
      <*> (o .:? "sub_id")
      <*> (o .:? "total_communication_cost")
      <*> (o .:? "total_disbursements")
      <*> (o .:? "total_independent_expenditures")
      <*> (o .:? "total_individual_contributions")
      <*> (o .:? "total_receipts")
      <*> (o .:? "treasurer_name")
      <*> (o .:? "update_date")

-- | ToJSON Filings
instance A.ToJSON Filings where
  toJSON Filings {..} =
   _omitNulls
      [ "amendment_chain" .= filingsAmendmentChain
      , "amendment_indicator" .= filingsAmendmentIndicator
      , "amendment_version" .= filingsAmendmentVersion
      , "beginning_image_number" .= filingsBeginningImageNumber
      , "candidate_id" .= filingsCandidateId
      , "candidate_name" .= filingsCandidateName
      , "cash_on_hand_beginning_period" .= filingsCashOnHandBeginningPeriod
      , "cash_on_hand_end_period" .= filingsCashOnHandEndPeriod
      , "cmte_tp" .= filingsCmteTp
      , "committee_id" .= filingsCommitteeId
      , "committee_name" .= filingsCommitteeName
      , "coverage_end_date" .= filingsCoverageEndDate
      , "coverage_start_date" .= filingsCoverageStartDate
      , "csv_url" .= filingsCsvUrl
      , "cycle" .= filingsCycle
      , "debts_owed_by_committee" .= filingsDebtsOwedByCommittee
      , "debts_owed_to_committee" .= filingsDebtsOwedToCommittee
      , "document_description" .= filingsDocumentDescription
      , "document_type" .= filingsDocumentType
      , "document_type_full" .= filingsDocumentTypeFull
      , "election_year" .= filingsElectionYear
      , "ending_image_number" .= filingsEndingImageNumber
      , "fec_file_id" .= filingsFecFileId
      , "fec_url" .= filingsFecUrl
      , "file_number" .= filingsFileNumber
      , "form_type" .= filingsFormType
      , "house_personal_funds" .= filingsHousePersonalFunds
      , "html_url" .= filingsHtmlUrl
      , "is_amended" .= filingsIsAmended
      , "means_filed" .= filingsMeansFiled
      , "most_recent" .= filingsMostRecent
      , "most_recent_file_number" .= filingsMostRecentFileNumber
      , "net_donations" .= filingsNetDonations
      , "office" .= filingsOffice
      , "opposition_personal_funds" .= filingsOppositionPersonalFunds
      , "pages" .= filingsPages
      , "party" .= filingsParty
      , "pdf_url" .= filingsPdfUrl
      , "previous_file_number" .= filingsPreviousFileNumber
      , "primary_general_indicator" .= filingsPrimaryGeneralIndicator
      , "receipt_date" .= filingsReceiptDate
      , "report_type" .= filingsReportType
      , "report_type_full" .= filingsReportTypeFull
      , "report_year" .= filingsReportYear
      , "request_type" .= filingsRequestType
      , "senate_personal_funds" .= filingsSenatePersonalFunds
      , "state" .= filingsState
      , "sub_id" .= filingsSubId
      , "total_communication_cost" .= filingsTotalCommunicationCost
      , "total_disbursements" .= filingsTotalDisbursements
      , "total_independent_expenditures" .= filingsTotalIndependentExpenditures
      , "total_individual_contributions" .= filingsTotalIndividualContributions
      , "total_receipts" .= filingsTotalReceipts
      , "treasurer_name" .= filingsTreasurerName
      , "update_date" .= filingsUpdateDate
      ]


-- | Construct a value of type 'Filings' (by applying it's required fields, if any)
mkFilings
  :: Filings
mkFilings =
  Filings
  { filingsAmendmentChain = Nothing
  , filingsAmendmentIndicator = Nothing
  , filingsAmendmentVersion = Nothing
  , filingsBeginningImageNumber = Nothing
  , filingsCandidateId = Nothing
  , filingsCandidateName = Nothing
  , filingsCashOnHandBeginningPeriod = Nothing
  , filingsCashOnHandEndPeriod = Nothing
  , filingsCmteTp = Nothing
  , filingsCommitteeId = Nothing
  , filingsCommitteeName = Nothing
  , filingsCoverageEndDate = Nothing
  , filingsCoverageStartDate = Nothing
  , filingsCsvUrl = Nothing
  , filingsCycle = Nothing
  , filingsDebtsOwedByCommittee = Nothing
  , filingsDebtsOwedToCommittee = Nothing
  , filingsDocumentDescription = Nothing
  , filingsDocumentType = Nothing
  , filingsDocumentTypeFull = Nothing
  , filingsElectionYear = Nothing
  , filingsEndingImageNumber = Nothing
  , filingsFecFileId = Nothing
  , filingsFecUrl = Nothing
  , filingsFileNumber = Nothing
  , filingsFormType = Nothing
  , filingsHousePersonalFunds = Nothing
  , filingsHtmlUrl = Nothing
  , filingsIsAmended = Nothing
  , filingsMeansFiled = Nothing
  , filingsMostRecent = Nothing
  , filingsMostRecentFileNumber = Nothing
  , filingsNetDonations = Nothing
  , filingsOffice = Nothing
  , filingsOppositionPersonalFunds = Nothing
  , filingsPages = Nothing
  , filingsParty = Nothing
  , filingsPdfUrl = Nothing
  , filingsPreviousFileNumber = Nothing
  , filingsPrimaryGeneralIndicator = Nothing
  , filingsReceiptDate = Nothing
  , filingsReportType = Nothing
  , filingsReportTypeFull = Nothing
  , filingsReportYear = Nothing
  , filingsRequestType = Nothing
  , filingsSenatePersonalFunds = Nothing
  , filingsState = Nothing
  , filingsSubId = Nothing
  , filingsTotalCommunicationCost = Nothing
  , filingsTotalDisbursements = Nothing
  , filingsTotalIndependentExpenditures = Nothing
  , filingsTotalIndividualContributions = Nothing
  , filingsTotalReceipts = Nothing
  , filingsTreasurerName = Nothing
  , filingsUpdateDate = Nothing
  }

-- ** FilingsPage
-- | FilingsPage
data FilingsPage = FilingsPage
  { filingsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , filingsPageResults    :: !(Maybe [Filings]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON FilingsPage
instance A.FromJSON FilingsPage where
  parseJSON = A.withObject "FilingsPage" $ \o ->
    FilingsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON FilingsPage
instance A.ToJSON FilingsPage where
  toJSON FilingsPage {..} =
   _omitNulls
      [ "pagination" .= filingsPagePagination
      , "results" .= filingsPageResults
      ]


-- | Construct a value of type 'FilingsPage' (by applying it's required fields, if any)
mkFilingsPage
  :: FilingsPage
mkFilingsPage =
  FilingsPage
  { filingsPagePagination = Nothing
  , filingsPageResults = Nothing
  }

-- ** InlineResponseDefault
-- | InlineResponseDefault
data InlineResponseDefault = InlineResponseDefault
  { inlineResponseDefaultPagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , inlineResponseDefaultResults    :: !(Maybe [ElectionDate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault
instance A.FromJSON InlineResponseDefault where
  parseJSON = A.withObject "InlineResponseDefault" $ \o ->
    InlineResponseDefault
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON InlineResponseDefault
instance A.ToJSON InlineResponseDefault where
  toJSON InlineResponseDefault {..} =
   _omitNulls
      [ "pagination" .= inlineResponseDefaultPagination
      , "results" .= inlineResponseDefaultResults
      ]


-- | Construct a value of type 'InlineResponseDefault' (by applying it's required fields, if any)
mkInlineResponseDefault
  :: InlineResponseDefault
mkInlineResponseDefault =
  InlineResponseDefault
  { inlineResponseDefaultPagination = Nothing
  , inlineResponseDefaultResults = Nothing
  }

-- ** InlineResponseDefault1
-- | InlineResponseDefault1
data InlineResponseDefault1 = InlineResponseDefault1
  { inlineResponseDefault1AdminFines :: !(Maybe [InlineResponseDefault1AdminFines]) -- ^ "admin_fines"
  , inlineResponseDefault1Adrs :: !(Maybe [InlineResponseDefault1Adrs]) -- ^ "adrs"
  , inlineResponseDefault1AdvisoryOpinions :: !(Maybe [InlineResponseDefault1AdvisoryOpinions]) -- ^ "advisory_opinions"
  , inlineResponseDefault1Murs :: !(Maybe [InlineResponseDefault1Murs]) -- ^ "murs"
  , inlineResponseDefault1Regulations :: !(Maybe [InlineResponseDefault1Regulations]) -- ^ "regulations"
  , inlineResponseDefault1Statutes :: !(Maybe [InlineResponseDefault1Statutes]) -- ^ "statutes"
  , inlineResponseDefault1TotalAdminFines :: !(Maybe Int) -- ^ "total_admin_fines" - Total number of Admin Fines matching the search criteria
  , inlineResponseDefault1TotalAdrs :: !(Maybe Int) -- ^ "total_adrs" - Total number of ADRs matching the search criteria
  , inlineResponseDefault1TotalAdvisoryOpinions :: !(Maybe Int) -- ^ "total_advisory_opinions" - Total number of Advisory Opinions matching the search criteria
  , inlineResponseDefault1TotalAll :: !(Maybe Int) -- ^ "total_all" - Total number of legal documents matching the search criteria
  , inlineResponseDefault1TotalMurs :: !(Maybe Int) -- ^ "total_murs" - Total number of MURs matching the search criteria
  , inlineResponseDefault1TotalRegulations :: !(Maybe Int) -- ^ "total_regulations" - Total number of Regulations matching the search criteria
  , inlineResponseDefault1TotalStatutes :: !(Maybe Int) -- ^ "total_statutes" - Total number of Statutes matching the search criteria
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1
instance A.FromJSON InlineResponseDefault1 where
  parseJSON = A.withObject "InlineResponseDefault1" $ \o ->
    InlineResponseDefault1
      <$> (o .:? "admin_fines")
      <*> (o .:? "adrs")
      <*> (o .:? "advisory_opinions")
      <*> (o .:? "murs")
      <*> (o .:? "regulations")
      <*> (o .:? "statutes")
      <*> (o .:? "total_admin_fines")
      <*> (o .:? "total_adrs")
      <*> (o .:? "total_advisory_opinions")
      <*> (o .:? "total_all")
      <*> (o .:? "total_murs")
      <*> (o .:? "total_regulations")
      <*> (o .:? "total_statutes")

-- | ToJSON InlineResponseDefault1
instance A.ToJSON InlineResponseDefault1 where
  toJSON InlineResponseDefault1 {..} =
   _omitNulls
      [ "admin_fines" .= inlineResponseDefault1AdminFines
      , "adrs" .= inlineResponseDefault1Adrs
      , "advisory_opinions" .= inlineResponseDefault1AdvisoryOpinions
      , "murs" .= inlineResponseDefault1Murs
      , "regulations" .= inlineResponseDefault1Regulations
      , "statutes" .= inlineResponseDefault1Statutes
      , "total_admin_fines" .= inlineResponseDefault1TotalAdminFines
      , "total_adrs" .= inlineResponseDefault1TotalAdrs
      , "total_advisory_opinions" .= inlineResponseDefault1TotalAdvisoryOpinions
      , "total_all" .= inlineResponseDefault1TotalAll
      , "total_murs" .= inlineResponseDefault1TotalMurs
      , "total_regulations" .= inlineResponseDefault1TotalRegulations
      , "total_statutes" .= inlineResponseDefault1TotalStatutes
      ]


-- | Construct a value of type 'InlineResponseDefault1' (by applying it's required fields, if any)
mkInlineResponseDefault1
  :: InlineResponseDefault1
mkInlineResponseDefault1 =
  InlineResponseDefault1
  { inlineResponseDefault1AdminFines = Nothing
  , inlineResponseDefault1Adrs = Nothing
  , inlineResponseDefault1AdvisoryOpinions = Nothing
  , inlineResponseDefault1Murs = Nothing
  , inlineResponseDefault1Regulations = Nothing
  , inlineResponseDefault1Statutes = Nothing
  , inlineResponseDefault1TotalAdminFines = Nothing
  , inlineResponseDefault1TotalAdrs = Nothing
  , inlineResponseDefault1TotalAdvisoryOpinions = Nothing
  , inlineResponseDefault1TotalAll = Nothing
  , inlineResponseDefault1TotalMurs = Nothing
  , inlineResponseDefault1TotalRegulations = Nothing
  , inlineResponseDefault1TotalStatutes = Nothing
  }

-- ** InlineResponseDefault1AdminFines
-- | InlineResponseDefault1AdminFines
data InlineResponseDefault1AdminFines = InlineResponseDefault1AdminFines
  { inlineResponseDefault1AdminFinesChallengeOutcome :: !(Maybe Text) -- ^ "challenge_outcome"
  , inlineResponseDefault1AdminFinesChallengeReceiptDate :: !(Maybe Date) -- ^ "challenge_receipt_date"
  , inlineResponseDefault1AdminFinesCheckAmount :: !(Maybe Double) -- ^ "check_amount"
  , inlineResponseDefault1AdminFinesCommissionVotes :: !(Maybe [InlineResponseDefault1CommissionVotes]) -- ^ "commission_votes"
  , inlineResponseDefault1AdminFinesCommitteeId :: !(Maybe Text) -- ^ "committee_id"
  , inlineResponseDefault1AdminFinesDocId :: !(Maybe Text) -- ^ "doc_id"
  , inlineResponseDefault1AdminFinesDocumentHighlights :: !(Maybe A.Value) -- ^ "document_highlights"
  , inlineResponseDefault1AdminFinesDocuments :: !(Maybe [InlineResponseDefault1Documents]) -- ^ "documents"
  , inlineResponseDefault1AdminFinesFinalDeterminationAmount :: !(Maybe Double) -- ^ "final_determination_amount"
  , inlineResponseDefault1AdminFinesFinalDeterminationDate :: !(Maybe Date) -- ^ "final_determination_date"
  , inlineResponseDefault1AdminFinesHighlights :: !(Maybe [Text]) -- ^ "highlights"
  , inlineResponseDefault1AdminFinesName :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1AdminFinesNo :: !(Maybe Text) -- ^ "no"
  , inlineResponseDefault1AdminFinesPetitionCourtDecisionDate :: !(Maybe Date) -- ^ "petition_court_decision_date"
  , inlineResponseDefault1AdminFinesPetitionCourtFilingDate :: !(Maybe Date) -- ^ "petition_court_filing_date"
  , inlineResponseDefault1AdminFinesReasonToBelieveActionDate :: !(Maybe Date) -- ^ "reason_to_believe_action_date"
  , inlineResponseDefault1AdminFinesReasonToBelieveFineAmount :: !(Maybe Double) -- ^ "reason_to_believe_fine_amount"
  , inlineResponseDefault1AdminFinesReportType :: !(Maybe Text) -- ^ "report_type"
  , inlineResponseDefault1AdminFinesReportYear :: !(Maybe Text) -- ^ "report_year"
  , inlineResponseDefault1AdminFinesTreasuryReferralAmount :: !(Maybe Double) -- ^ "treasury_referral_amount"
  , inlineResponseDefault1AdminFinesTreasuryReferralDate :: !(Maybe Date) -- ^ "treasury_referral_date"
  , inlineResponseDefault1AdminFinesUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1AdminFines
instance A.FromJSON InlineResponseDefault1AdminFines where
  parseJSON = A.withObject "InlineResponseDefault1AdminFines" $ \o ->
    InlineResponseDefault1AdminFines
      <$> (o .:? "challenge_outcome")
      <*> (o .:? "challenge_receipt_date")
      <*> (o .:? "check_amount")
      <*> (o .:? "commission_votes")
      <*> (o .:? "committee_id")
      <*> (o .:? "doc_id")
      <*> (o .:? "document_highlights")
      <*> (o .:? "documents")
      <*> (o .:? "final_determination_amount")
      <*> (o .:? "final_determination_date")
      <*> (o .:? "highlights")
      <*> (o .:? "name")
      <*> (o .:? "no")
      <*> (o .:? "petition_court_decision_date")
      <*> (o .:? "petition_court_filing_date")
      <*> (o .:? "reason_to_believe_action_date")
      <*> (o .:? "reason_to_believe_fine_amount")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "treasury_referral_amount")
      <*> (o .:? "treasury_referral_date")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1AdminFines
instance A.ToJSON InlineResponseDefault1AdminFines where
  toJSON InlineResponseDefault1AdminFines {..} =
   _omitNulls
      [ "challenge_outcome" .= inlineResponseDefault1AdminFinesChallengeOutcome
      , "challenge_receipt_date" .= inlineResponseDefault1AdminFinesChallengeReceiptDate
      , "check_amount" .= inlineResponseDefault1AdminFinesCheckAmount
      , "commission_votes" .= inlineResponseDefault1AdminFinesCommissionVotes
      , "committee_id" .= inlineResponseDefault1AdminFinesCommitteeId
      , "doc_id" .= inlineResponseDefault1AdminFinesDocId
      , "document_highlights" .= inlineResponseDefault1AdminFinesDocumentHighlights
      , "documents" .= inlineResponseDefault1AdminFinesDocuments
      , "final_determination_amount" .= inlineResponseDefault1AdminFinesFinalDeterminationAmount
      , "final_determination_date" .= inlineResponseDefault1AdminFinesFinalDeterminationDate
      , "highlights" .= inlineResponseDefault1AdminFinesHighlights
      , "name" .= inlineResponseDefault1AdminFinesName
      , "no" .= inlineResponseDefault1AdminFinesNo
      , "petition_court_decision_date" .= inlineResponseDefault1AdminFinesPetitionCourtDecisionDate
      , "petition_court_filing_date" .= inlineResponseDefault1AdminFinesPetitionCourtFilingDate
      , "reason_to_believe_action_date" .= inlineResponseDefault1AdminFinesReasonToBelieveActionDate
      , "reason_to_believe_fine_amount" .= inlineResponseDefault1AdminFinesReasonToBelieveFineAmount
      , "report_type" .= inlineResponseDefault1AdminFinesReportType
      , "report_year" .= inlineResponseDefault1AdminFinesReportYear
      , "treasury_referral_amount" .= inlineResponseDefault1AdminFinesTreasuryReferralAmount
      , "treasury_referral_date" .= inlineResponseDefault1AdminFinesTreasuryReferralDate
      , "url" .= inlineResponseDefault1AdminFinesUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1AdminFines' (by applying it's required fields, if any)
mkInlineResponseDefault1AdminFines
  :: InlineResponseDefault1AdminFines
mkInlineResponseDefault1AdminFines =
  InlineResponseDefault1AdminFines
  { inlineResponseDefault1AdminFinesChallengeOutcome = Nothing
  , inlineResponseDefault1AdminFinesChallengeReceiptDate = Nothing
  , inlineResponseDefault1AdminFinesCheckAmount = Nothing
  , inlineResponseDefault1AdminFinesCommissionVotes = Nothing
  , inlineResponseDefault1AdminFinesCommitteeId = Nothing
  , inlineResponseDefault1AdminFinesDocId = Nothing
  , inlineResponseDefault1AdminFinesDocumentHighlights = Nothing
  , inlineResponseDefault1AdminFinesDocuments = Nothing
  , inlineResponseDefault1AdminFinesFinalDeterminationAmount = Nothing
  , inlineResponseDefault1AdminFinesFinalDeterminationDate = Nothing
  , inlineResponseDefault1AdminFinesHighlights = Nothing
  , inlineResponseDefault1AdminFinesName = Nothing
  , inlineResponseDefault1AdminFinesNo = Nothing
  , inlineResponseDefault1AdminFinesPetitionCourtDecisionDate = Nothing
  , inlineResponseDefault1AdminFinesPetitionCourtFilingDate = Nothing
  , inlineResponseDefault1AdminFinesReasonToBelieveActionDate = Nothing
  , inlineResponseDefault1AdminFinesReasonToBelieveFineAmount = Nothing
  , inlineResponseDefault1AdminFinesReportType = Nothing
  , inlineResponseDefault1AdminFinesReportYear = Nothing
  , inlineResponseDefault1AdminFinesTreasuryReferralAmount = Nothing
  , inlineResponseDefault1AdminFinesTreasuryReferralDate = Nothing
  , inlineResponseDefault1AdminFinesUrl = Nothing
  }

-- ** InlineResponseDefault1Adrs
-- | InlineResponseDefault1Adrs
data InlineResponseDefault1Adrs = InlineResponseDefault1Adrs
  { inlineResponseDefault1AdrsCloseDate :: !(Maybe Date) -- ^ "close_date"
  , inlineResponseDefault1AdrsCommissionVotes :: !(Maybe [InlineResponseDefault1CommissionVotes]) -- ^ "commission_votes"
  , inlineResponseDefault1AdrsDispositions :: !(Maybe [InlineResponseDefault1Dispositions]) -- ^ "dispositions"
  , inlineResponseDefault1AdrsDocId :: !(Maybe Text) -- ^ "doc_id"
  , inlineResponseDefault1AdrsDocumentHighlights :: !(Maybe A.Value) -- ^ "document_highlights"
  , inlineResponseDefault1AdrsDocuments :: !(Maybe [InlineResponseDefault1Documents]) -- ^ "documents"
  , inlineResponseDefault1AdrsElectionCycles :: !(Maybe Int) -- ^ "election_cycles"
  , inlineResponseDefault1AdrsHighlights :: !(Maybe [Text]) -- ^ "highlights"
  , inlineResponseDefault1AdrsName :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1AdrsNo :: !(Maybe Text) -- ^ "no"
  , inlineResponseDefault1AdrsOpenDate :: !(Maybe Date) -- ^ "open_date"
  , inlineResponseDefault1AdrsParticipants :: !(Maybe [InlineResponseDefault1Participants]) -- ^ "participants"
  , inlineResponseDefault1AdrsRespondents :: !(Maybe [Text]) -- ^ "respondents"
  , inlineResponseDefault1AdrsSubjects :: !(Maybe [Text]) -- ^ "subjects"
  , inlineResponseDefault1AdrsUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Adrs
instance A.FromJSON InlineResponseDefault1Adrs where
  parseJSON = A.withObject "InlineResponseDefault1Adrs" $ \o ->
    InlineResponseDefault1Adrs
      <$> (o .:? "close_date")
      <*> (o .:? "commission_votes")
      <*> (o .:? "dispositions")
      <*> (o .:? "doc_id")
      <*> (o .:? "document_highlights")
      <*> (o .:? "documents")
      <*> (o .:? "election_cycles")
      <*> (o .:? "highlights")
      <*> (o .:? "name")
      <*> (o .:? "no")
      <*> (o .:? "open_date")
      <*> (o .:? "participants")
      <*> (o .:? "respondents")
      <*> (o .:? "subjects")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Adrs
instance A.ToJSON InlineResponseDefault1Adrs where
  toJSON InlineResponseDefault1Adrs {..} =
   _omitNulls
      [ "close_date" .= inlineResponseDefault1AdrsCloseDate
      , "commission_votes" .= inlineResponseDefault1AdrsCommissionVotes
      , "dispositions" .= inlineResponseDefault1AdrsDispositions
      , "doc_id" .= inlineResponseDefault1AdrsDocId
      , "document_highlights" .= inlineResponseDefault1AdrsDocumentHighlights
      , "documents" .= inlineResponseDefault1AdrsDocuments
      , "election_cycles" .= inlineResponseDefault1AdrsElectionCycles
      , "highlights" .= inlineResponseDefault1AdrsHighlights
      , "name" .= inlineResponseDefault1AdrsName
      , "no" .= inlineResponseDefault1AdrsNo
      , "open_date" .= inlineResponseDefault1AdrsOpenDate
      , "participants" .= inlineResponseDefault1AdrsParticipants
      , "respondents" .= inlineResponseDefault1AdrsRespondents
      , "subjects" .= inlineResponseDefault1AdrsSubjects
      , "url" .= inlineResponseDefault1AdrsUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1Adrs' (by applying it's required fields, if any)
mkInlineResponseDefault1Adrs
  :: InlineResponseDefault1Adrs
mkInlineResponseDefault1Adrs =
  InlineResponseDefault1Adrs
  { inlineResponseDefault1AdrsCloseDate = Nothing
  , inlineResponseDefault1AdrsCommissionVotes = Nothing
  , inlineResponseDefault1AdrsDispositions = Nothing
  , inlineResponseDefault1AdrsDocId = Nothing
  , inlineResponseDefault1AdrsDocumentHighlights = Nothing
  , inlineResponseDefault1AdrsDocuments = Nothing
  , inlineResponseDefault1AdrsElectionCycles = Nothing
  , inlineResponseDefault1AdrsHighlights = Nothing
  , inlineResponseDefault1AdrsName = Nothing
  , inlineResponseDefault1AdrsNo = Nothing
  , inlineResponseDefault1AdrsOpenDate = Nothing
  , inlineResponseDefault1AdrsParticipants = Nothing
  , inlineResponseDefault1AdrsRespondents = Nothing
  , inlineResponseDefault1AdrsSubjects = Nothing
  , inlineResponseDefault1AdrsUrl = Nothing
  }

-- ** InlineResponseDefault1AdvisoryOpinions
-- | InlineResponseDefault1AdvisoryOpinions
data InlineResponseDefault1AdvisoryOpinions = InlineResponseDefault1AdvisoryOpinions
  { inlineResponseDefault1AdvisoryOpinionsAoCitations :: !(Maybe [InlineResponseDefault1AoCitations]) -- ^ "ao_citations"
  , inlineResponseDefault1AdvisoryOpinionsAosCitedBy :: !(Maybe [InlineResponseDefault1AoCitations]) -- ^ "aos_cited_by"
  , inlineResponseDefault1AdvisoryOpinionsCommenterNames :: !(Maybe [Text]) -- ^ "commenter_names"
  , inlineResponseDefault1AdvisoryOpinionsDocumentHighlights :: !(Maybe A.Value) -- ^ "document_highlights"
  , inlineResponseDefault1AdvisoryOpinionsDocuments :: !(Maybe [InlineResponseDefault1Documents1]) -- ^ "documents"
  , inlineResponseDefault1AdvisoryOpinionsEntities :: !(Maybe [InlineResponseDefault1Entities]) -- ^ "entities"
  , inlineResponseDefault1AdvisoryOpinionsHighlights :: !(Maybe [Text]) -- ^ "highlights"
  , inlineResponseDefault1AdvisoryOpinionsIsPending :: !(Maybe Bool) -- ^ "is_pending"
  , inlineResponseDefault1AdvisoryOpinionsIssueDate :: !(Maybe Date) -- ^ "issue_date"
  , inlineResponseDefault1AdvisoryOpinionsName :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1AdvisoryOpinionsNo :: !(Maybe Text) -- ^ "no"
  , inlineResponseDefault1AdvisoryOpinionsRegulatoryCitations :: !(Maybe [InlineResponseDefault1RegulatoryCitations]) -- ^ "regulatory_citations"
  , inlineResponseDefault1AdvisoryOpinionsRepresentativeNames :: !(Maybe [Text]) -- ^ "representative_names"
  , inlineResponseDefault1AdvisoryOpinionsRequestDate :: !(Maybe Date) -- ^ "request_date"
  , inlineResponseDefault1AdvisoryOpinionsRequestorNames :: !(Maybe [Text]) -- ^ "requestor_names"
  , inlineResponseDefault1AdvisoryOpinionsRequestorTypes :: !(Maybe [Text]) -- ^ "requestor_types"
  , inlineResponseDefault1AdvisoryOpinionsStatus :: !(Maybe Text) -- ^ "status"
  , inlineResponseDefault1AdvisoryOpinionsStatutoryCitations :: !(Maybe [InlineResponseDefault1StatutoryCitations]) -- ^ "statutory_citations"
  , inlineResponseDefault1AdvisoryOpinionsSummary :: !(Maybe Text) -- ^ "summary"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1AdvisoryOpinions
instance A.FromJSON InlineResponseDefault1AdvisoryOpinions where
  parseJSON = A.withObject "InlineResponseDefault1AdvisoryOpinions" $ \o ->
    InlineResponseDefault1AdvisoryOpinions
      <$> (o .:? "ao_citations")
      <*> (o .:? "aos_cited_by")
      <*> (o .:? "commenter_names")
      <*> (o .:? "document_highlights")
      <*> (o .:? "documents")
      <*> (o .:? "entities")
      <*> (o .:? "highlights")
      <*> (o .:? "is_pending")
      <*> (o .:? "issue_date")
      <*> (o .:? "name")
      <*> (o .:? "no")
      <*> (o .:? "regulatory_citations")
      <*> (o .:? "representative_names")
      <*> (o .:? "request_date")
      <*> (o .:? "requestor_names")
      <*> (o .:? "requestor_types")
      <*> (o .:? "status")
      <*> (o .:? "statutory_citations")
      <*> (o .:? "summary")

-- | ToJSON InlineResponseDefault1AdvisoryOpinions
instance A.ToJSON InlineResponseDefault1AdvisoryOpinions where
  toJSON InlineResponseDefault1AdvisoryOpinions {..} =
   _omitNulls
      [ "ao_citations" .= inlineResponseDefault1AdvisoryOpinionsAoCitations
      , "aos_cited_by" .= inlineResponseDefault1AdvisoryOpinionsAosCitedBy
      , "commenter_names" .= inlineResponseDefault1AdvisoryOpinionsCommenterNames
      , "document_highlights" .= inlineResponseDefault1AdvisoryOpinionsDocumentHighlights
      , "documents" .= inlineResponseDefault1AdvisoryOpinionsDocuments
      , "entities" .= inlineResponseDefault1AdvisoryOpinionsEntities
      , "highlights" .= inlineResponseDefault1AdvisoryOpinionsHighlights
      , "is_pending" .= inlineResponseDefault1AdvisoryOpinionsIsPending
      , "issue_date" .= inlineResponseDefault1AdvisoryOpinionsIssueDate
      , "name" .= inlineResponseDefault1AdvisoryOpinionsName
      , "no" .= inlineResponseDefault1AdvisoryOpinionsNo
      , "regulatory_citations" .= inlineResponseDefault1AdvisoryOpinionsRegulatoryCitations
      , "representative_names" .= inlineResponseDefault1AdvisoryOpinionsRepresentativeNames
      , "request_date" .= inlineResponseDefault1AdvisoryOpinionsRequestDate
      , "requestor_names" .= inlineResponseDefault1AdvisoryOpinionsRequestorNames
      , "requestor_types" .= inlineResponseDefault1AdvisoryOpinionsRequestorTypes
      , "status" .= inlineResponseDefault1AdvisoryOpinionsStatus
      , "statutory_citations" .= inlineResponseDefault1AdvisoryOpinionsStatutoryCitations
      , "summary" .= inlineResponseDefault1AdvisoryOpinionsSummary
      ]


-- | Construct a value of type 'InlineResponseDefault1AdvisoryOpinions' (by applying it's required fields, if any)
mkInlineResponseDefault1AdvisoryOpinions
  :: InlineResponseDefault1AdvisoryOpinions
mkInlineResponseDefault1AdvisoryOpinions =
  InlineResponseDefault1AdvisoryOpinions
  { inlineResponseDefault1AdvisoryOpinionsAoCitations = Nothing
  , inlineResponseDefault1AdvisoryOpinionsAosCitedBy = Nothing
  , inlineResponseDefault1AdvisoryOpinionsCommenterNames = Nothing
  , inlineResponseDefault1AdvisoryOpinionsDocumentHighlights = Nothing
  , inlineResponseDefault1AdvisoryOpinionsDocuments = Nothing
  , inlineResponseDefault1AdvisoryOpinionsEntities = Nothing
  , inlineResponseDefault1AdvisoryOpinionsHighlights = Nothing
  , inlineResponseDefault1AdvisoryOpinionsIsPending = Nothing
  , inlineResponseDefault1AdvisoryOpinionsIssueDate = Nothing
  , inlineResponseDefault1AdvisoryOpinionsName = Nothing
  , inlineResponseDefault1AdvisoryOpinionsNo = Nothing
  , inlineResponseDefault1AdvisoryOpinionsRegulatoryCitations = Nothing
  , inlineResponseDefault1AdvisoryOpinionsRepresentativeNames = Nothing
  , inlineResponseDefault1AdvisoryOpinionsRequestDate = Nothing
  , inlineResponseDefault1AdvisoryOpinionsRequestorNames = Nothing
  , inlineResponseDefault1AdvisoryOpinionsRequestorTypes = Nothing
  , inlineResponseDefault1AdvisoryOpinionsStatus = Nothing
  , inlineResponseDefault1AdvisoryOpinionsStatutoryCitations = Nothing
  , inlineResponseDefault1AdvisoryOpinionsSummary = Nothing
  }

-- ** InlineResponseDefault1AoCitations
-- | InlineResponseDefault1AoCitations
data InlineResponseDefault1AoCitations = InlineResponseDefault1AoCitations
  { inlineResponseDefault1AoCitationsName :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1AoCitationsNo   :: !(Maybe Text) -- ^ "no"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1AoCitations
instance A.FromJSON InlineResponseDefault1AoCitations where
  parseJSON = A.withObject "InlineResponseDefault1AoCitations" $ \o ->
    InlineResponseDefault1AoCitations
      <$> (o .:? "name")
      <*> (o .:? "no")

-- | ToJSON InlineResponseDefault1AoCitations
instance A.ToJSON InlineResponseDefault1AoCitations where
  toJSON InlineResponseDefault1AoCitations {..} =
   _omitNulls
      [ "name" .= inlineResponseDefault1AoCitationsName
      , "no" .= inlineResponseDefault1AoCitationsNo
      ]


-- | Construct a value of type 'InlineResponseDefault1AoCitations' (by applying it's required fields, if any)
mkInlineResponseDefault1AoCitations
  :: InlineResponseDefault1AoCitations
mkInlineResponseDefault1AoCitations =
  InlineResponseDefault1AoCitations
  { inlineResponseDefault1AoCitationsName = Nothing
  , inlineResponseDefault1AoCitationsNo = Nothing
  }

-- ** InlineResponseDefault1Citations
-- | InlineResponseDefault1Citations
data InlineResponseDefault1Citations = InlineResponseDefault1Citations
  { inlineResponseDefault1CitationsText  :: !(Maybe Text) -- ^ "text"
  , inlineResponseDefault1CitationsTitle :: !(Maybe Text) -- ^ "title"
  , inlineResponseDefault1CitationsType  :: !(Maybe Text) -- ^ "type"
  , inlineResponseDefault1CitationsUrl   :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Citations
instance A.FromJSON InlineResponseDefault1Citations where
  parseJSON = A.withObject "InlineResponseDefault1Citations" $ \o ->
    InlineResponseDefault1Citations
      <$> (o .:? "text")
      <*> (o .:? "title")
      <*> (o .:? "type")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Citations
instance A.ToJSON InlineResponseDefault1Citations where
  toJSON InlineResponseDefault1Citations {..} =
   _omitNulls
      [ "text" .= inlineResponseDefault1CitationsText
      , "title" .= inlineResponseDefault1CitationsTitle
      , "type" .= inlineResponseDefault1CitationsType
      , "url" .= inlineResponseDefault1CitationsUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1Citations' (by applying it's required fields, if any)
mkInlineResponseDefault1Citations
  :: InlineResponseDefault1Citations
mkInlineResponseDefault1Citations =
  InlineResponseDefault1Citations
  { inlineResponseDefault1CitationsText = Nothing
  , inlineResponseDefault1CitationsTitle = Nothing
  , inlineResponseDefault1CitationsType = Nothing
  , inlineResponseDefault1CitationsUrl = Nothing
  }

-- ** InlineResponseDefault1CommissionVotes
-- | InlineResponseDefault1CommissionVotes
data InlineResponseDefault1CommissionVotes = InlineResponseDefault1CommissionVotes
  { inlineResponseDefault1CommissionVotesAction   :: !(Maybe Text) -- ^ "action"
  , inlineResponseDefault1CommissionVotesVoteDate :: !(Maybe Date) -- ^ "vote_date"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1CommissionVotes
instance A.FromJSON InlineResponseDefault1CommissionVotes where
  parseJSON = A.withObject "InlineResponseDefault1CommissionVotes" $ \o ->
    InlineResponseDefault1CommissionVotes
      <$> (o .:? "action")
      <*> (o .:? "vote_date")

-- | ToJSON InlineResponseDefault1CommissionVotes
instance A.ToJSON InlineResponseDefault1CommissionVotes where
  toJSON InlineResponseDefault1CommissionVotes {..} =
   _omitNulls
      [ "action" .= inlineResponseDefault1CommissionVotesAction
      , "vote_date" .= inlineResponseDefault1CommissionVotesVoteDate
      ]


-- | Construct a value of type 'InlineResponseDefault1CommissionVotes' (by applying it's required fields, if any)
mkInlineResponseDefault1CommissionVotes
  :: InlineResponseDefault1CommissionVotes
mkInlineResponseDefault1CommissionVotes =
  InlineResponseDefault1CommissionVotes
  { inlineResponseDefault1CommissionVotesAction = Nothing
  , inlineResponseDefault1CommissionVotesVoteDate = Nothing
  }

-- ** InlineResponseDefault1Dispositions
-- | InlineResponseDefault1Dispositions
data InlineResponseDefault1Dispositions = InlineResponseDefault1Dispositions
  { inlineResponseDefault1DispositionsCitations :: !(Maybe [InlineResponseDefault1Citations]) -- ^ "citations"
  , inlineResponseDefault1DispositionsDisposition :: !(Maybe Text) -- ^ "disposition"
  , inlineResponseDefault1DispositionsPenalty :: !(Maybe Double) -- ^ "penalty"
  , inlineResponseDefault1DispositionsRespondent :: !(Maybe Text) -- ^ "respondent"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Dispositions
instance A.FromJSON InlineResponseDefault1Dispositions where
  parseJSON = A.withObject "InlineResponseDefault1Dispositions" $ \o ->
    InlineResponseDefault1Dispositions
      <$> (o .:? "citations")
      <*> (o .:? "disposition")
      <*> (o .:? "penalty")
      <*> (o .:? "respondent")

-- | ToJSON InlineResponseDefault1Dispositions
instance A.ToJSON InlineResponseDefault1Dispositions where
  toJSON InlineResponseDefault1Dispositions {..} =
   _omitNulls
      [ "citations" .= inlineResponseDefault1DispositionsCitations
      , "disposition" .= inlineResponseDefault1DispositionsDisposition
      , "penalty" .= inlineResponseDefault1DispositionsPenalty
      , "respondent" .= inlineResponseDefault1DispositionsRespondent
      ]


-- | Construct a value of type 'InlineResponseDefault1Dispositions' (by applying it's required fields, if any)
mkInlineResponseDefault1Dispositions
  :: InlineResponseDefault1Dispositions
mkInlineResponseDefault1Dispositions =
  InlineResponseDefault1Dispositions
  { inlineResponseDefault1DispositionsCitations = Nothing
  , inlineResponseDefault1DispositionsDisposition = Nothing
  , inlineResponseDefault1DispositionsPenalty = Nothing
  , inlineResponseDefault1DispositionsRespondent = Nothing
  }

-- ** InlineResponseDefault1Documents
-- | InlineResponseDefault1Documents
data InlineResponseDefault1Documents = InlineResponseDefault1Documents
  { inlineResponseDefault1DocumentsCategory     :: !(Maybe Text) -- ^ "category"
  , inlineResponseDefault1DocumentsDescription  :: !(Maybe Text) -- ^ "description"
  , inlineResponseDefault1DocumentsDocumentDate :: !(Maybe Date) -- ^ "document_date"
  , inlineResponseDefault1DocumentsDocumentId   :: !(Maybe Int) -- ^ "document_id"
  , inlineResponseDefault1DocumentsLength       :: !(Maybe Int) -- ^ "length"
  , inlineResponseDefault1DocumentsUrl          :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Documents
instance A.FromJSON InlineResponseDefault1Documents where
  parseJSON = A.withObject "InlineResponseDefault1Documents" $ \o ->
    InlineResponseDefault1Documents
      <$> (o .:? "category")
      <*> (o .:? "description")
      <*> (o .:? "document_date")
      <*> (o .:? "document_id")
      <*> (o .:? "length")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Documents
instance A.ToJSON InlineResponseDefault1Documents where
  toJSON InlineResponseDefault1Documents {..} =
   _omitNulls
      [ "category" .= inlineResponseDefault1DocumentsCategory
      , "description" .= inlineResponseDefault1DocumentsDescription
      , "document_date" .= inlineResponseDefault1DocumentsDocumentDate
      , "document_id" .= inlineResponseDefault1DocumentsDocumentId
      , "length" .= inlineResponseDefault1DocumentsLength
      , "url" .= inlineResponseDefault1DocumentsUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1Documents' (by applying it's required fields, if any)
mkInlineResponseDefault1Documents
  :: InlineResponseDefault1Documents
mkInlineResponseDefault1Documents =
  InlineResponseDefault1Documents
  { inlineResponseDefault1DocumentsCategory = Nothing
  , inlineResponseDefault1DocumentsDescription = Nothing
  , inlineResponseDefault1DocumentsDocumentDate = Nothing
  , inlineResponseDefault1DocumentsDocumentId = Nothing
  , inlineResponseDefault1DocumentsLength = Nothing
  , inlineResponseDefault1DocumentsUrl = Nothing
  }

-- ** InlineResponseDefault1Documents1
-- | InlineResponseDefault1Documents1
data InlineResponseDefault1Documents1 = InlineResponseDefault1Documents1
  { inlineResponseDefault1Documents1Category    :: !(Maybe Text) -- ^ "category"
  , inlineResponseDefault1Documents1Date        :: !(Maybe Date) -- ^ "date"
  , inlineResponseDefault1Documents1Description :: !(Maybe Text) -- ^ "description"
  , inlineResponseDefault1Documents1DocumentId  :: !(Maybe Int) -- ^ "document_id"
  , inlineResponseDefault1Documents1Url         :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Documents1
instance A.FromJSON InlineResponseDefault1Documents1 where
  parseJSON = A.withObject "InlineResponseDefault1Documents1" $ \o ->
    InlineResponseDefault1Documents1
      <$> (o .:? "category")
      <*> (o .:? "date")
      <*> (o .:? "description")
      <*> (o .:? "document_id")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Documents1
instance A.ToJSON InlineResponseDefault1Documents1 where
  toJSON InlineResponseDefault1Documents1 {..} =
   _omitNulls
      [ "category" .= inlineResponseDefault1Documents1Category
      , "date" .= inlineResponseDefault1Documents1Date
      , "description" .= inlineResponseDefault1Documents1Description
      , "document_id" .= inlineResponseDefault1Documents1DocumentId
      , "url" .= inlineResponseDefault1Documents1Url
      ]


-- | Construct a value of type 'InlineResponseDefault1Documents1' (by applying it's required fields, if any)
mkInlineResponseDefault1Documents1
  :: InlineResponseDefault1Documents1
mkInlineResponseDefault1Documents1 =
  InlineResponseDefault1Documents1
  { inlineResponseDefault1Documents1Category = Nothing
  , inlineResponseDefault1Documents1Date = Nothing
  , inlineResponseDefault1Documents1Description = Nothing
  , inlineResponseDefault1Documents1DocumentId = Nothing
  , inlineResponseDefault1Documents1Url = Nothing
  }

-- ** InlineResponseDefault1Entities
-- | InlineResponseDefault1Entities
data InlineResponseDefault1Entities = InlineResponseDefault1Entities
  { inlineResponseDefault1EntitiesName :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1EntitiesRole :: !(Maybe Text) -- ^ "role"
  , inlineResponseDefault1EntitiesType :: !(Maybe Text) -- ^ "type"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Entities
instance A.FromJSON InlineResponseDefault1Entities where
  parseJSON = A.withObject "InlineResponseDefault1Entities" $ \o ->
    InlineResponseDefault1Entities
      <$> (o .:? "name")
      <*> (o .:? "role")
      <*> (o .:? "type")

-- | ToJSON InlineResponseDefault1Entities
instance A.ToJSON InlineResponseDefault1Entities where
  toJSON InlineResponseDefault1Entities {..} =
   _omitNulls
      [ "name" .= inlineResponseDefault1EntitiesName
      , "role" .= inlineResponseDefault1EntitiesRole
      , "type" .= inlineResponseDefault1EntitiesType
      ]


-- | Construct a value of type 'InlineResponseDefault1Entities' (by applying it's required fields, if any)
mkInlineResponseDefault1Entities
  :: InlineResponseDefault1Entities
mkInlineResponseDefault1Entities =
  InlineResponseDefault1Entities
  { inlineResponseDefault1EntitiesName = Nothing
  , inlineResponseDefault1EntitiesRole = Nothing
  , inlineResponseDefault1EntitiesType = Nothing
  }

-- ** InlineResponseDefault1Murs
-- | InlineResponseDefault1Murs
data InlineResponseDefault1Murs = InlineResponseDefault1Murs
  { inlineResponseDefault1MursCloseDate :: !(Maybe Date) -- ^ "close_date"
  , inlineResponseDefault1MursCommissionVotes :: !(Maybe [InlineResponseDefault1CommissionVotes]) -- ^ "commission_votes"
  , inlineResponseDefault1MursDispositions :: !(Maybe [InlineResponseDefault1Dispositions]) -- ^ "dispositions"
  , inlineResponseDefault1MursDocId :: !(Maybe Text) -- ^ "doc_id"
  , inlineResponseDefault1MursDocumentHighlights :: !(Maybe A.Value) -- ^ "document_highlights"
  , inlineResponseDefault1MursDocuments :: !(Maybe [InlineResponseDefault1Documents]) -- ^ "documents"
  , inlineResponseDefault1MursElectionCycles :: !(Maybe Int) -- ^ "election_cycles"
  , inlineResponseDefault1MursHighlights :: !(Maybe [Text]) -- ^ "highlights"
  , inlineResponseDefault1MursMurType :: !(Maybe E'MurType) -- ^ "mur_type"
  , inlineResponseDefault1MursName :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1MursNo :: !(Maybe Text) -- ^ "no"
  , inlineResponseDefault1MursOpenDate :: !(Maybe Date) -- ^ "open_date"
  , inlineResponseDefault1MursParticipants :: !(Maybe [InlineResponseDefault1Participants]) -- ^ "participants"
  , inlineResponseDefault1MursRespondents :: !(Maybe [Text]) -- ^ "respondents"
  , inlineResponseDefault1MursSubjects :: !(Maybe [Text]) -- ^ "subjects"
  , inlineResponseDefault1MursUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Murs
instance A.FromJSON InlineResponseDefault1Murs where
  parseJSON = A.withObject "InlineResponseDefault1Murs" $ \o ->
    InlineResponseDefault1Murs
      <$> (o .:? "close_date")
      <*> (o .:? "commission_votes")
      <*> (o .:? "dispositions")
      <*> (o .:? "doc_id")
      <*> (o .:? "document_highlights")
      <*> (o .:? "documents")
      <*> (o .:? "election_cycles")
      <*> (o .:? "highlights")
      <*> (o .:? "mur_type")
      <*> (o .:? "name")
      <*> (o .:? "no")
      <*> (o .:? "open_date")
      <*> (o .:? "participants")
      <*> (o .:? "respondents")
      <*> (o .:? "subjects")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Murs
instance A.ToJSON InlineResponseDefault1Murs where
  toJSON InlineResponseDefault1Murs {..} =
   _omitNulls
      [ "close_date" .= inlineResponseDefault1MursCloseDate
      , "commission_votes" .= inlineResponseDefault1MursCommissionVotes
      , "dispositions" .= inlineResponseDefault1MursDispositions
      , "doc_id" .= inlineResponseDefault1MursDocId
      , "document_highlights" .= inlineResponseDefault1MursDocumentHighlights
      , "documents" .= inlineResponseDefault1MursDocuments
      , "election_cycles" .= inlineResponseDefault1MursElectionCycles
      , "highlights" .= inlineResponseDefault1MursHighlights
      , "mur_type" .= inlineResponseDefault1MursMurType
      , "name" .= inlineResponseDefault1MursName
      , "no" .= inlineResponseDefault1MursNo
      , "open_date" .= inlineResponseDefault1MursOpenDate
      , "participants" .= inlineResponseDefault1MursParticipants
      , "respondents" .= inlineResponseDefault1MursRespondents
      , "subjects" .= inlineResponseDefault1MursSubjects
      , "url" .= inlineResponseDefault1MursUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1Murs' (by applying it's required fields, if any)
mkInlineResponseDefault1Murs
  :: InlineResponseDefault1Murs
mkInlineResponseDefault1Murs =
  InlineResponseDefault1Murs
  { inlineResponseDefault1MursCloseDate = Nothing
  , inlineResponseDefault1MursCommissionVotes = Nothing
  , inlineResponseDefault1MursDispositions = Nothing
  , inlineResponseDefault1MursDocId = Nothing
  , inlineResponseDefault1MursDocumentHighlights = Nothing
  , inlineResponseDefault1MursDocuments = Nothing
  , inlineResponseDefault1MursElectionCycles = Nothing
  , inlineResponseDefault1MursHighlights = Nothing
  , inlineResponseDefault1MursMurType = Nothing
  , inlineResponseDefault1MursName = Nothing
  , inlineResponseDefault1MursNo = Nothing
  , inlineResponseDefault1MursOpenDate = Nothing
  , inlineResponseDefault1MursParticipants = Nothing
  , inlineResponseDefault1MursRespondents = Nothing
  , inlineResponseDefault1MursSubjects = Nothing
  , inlineResponseDefault1MursUrl = Nothing
  }

-- ** InlineResponseDefault1Participants
-- | InlineResponseDefault1Participants
data InlineResponseDefault1Participants = InlineResponseDefault1Participants
  { inlineResponseDefault1ParticipantsCitations :: !(Maybe A.Value) -- ^ "citations"
  , inlineResponseDefault1ParticipantsName      :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1ParticipantsRole      :: !(Maybe Text) -- ^ "role"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Participants
instance A.FromJSON InlineResponseDefault1Participants where
  parseJSON = A.withObject "InlineResponseDefault1Participants" $ \o ->
    InlineResponseDefault1Participants
      <$> (o .:? "citations")
      <*> (o .:? "name")
      <*> (o .:? "role")

-- | ToJSON InlineResponseDefault1Participants
instance A.ToJSON InlineResponseDefault1Participants where
  toJSON InlineResponseDefault1Participants {..} =
   _omitNulls
      [ "citations" .= inlineResponseDefault1ParticipantsCitations
      , "name" .= inlineResponseDefault1ParticipantsName
      , "role" .= inlineResponseDefault1ParticipantsRole
      ]


-- | Construct a value of type 'InlineResponseDefault1Participants' (by applying it's required fields, if any)
mkInlineResponseDefault1Participants
  :: InlineResponseDefault1Participants
mkInlineResponseDefault1Participants =
  InlineResponseDefault1Participants
  { inlineResponseDefault1ParticipantsCitations = Nothing
  , inlineResponseDefault1ParticipantsName = Nothing
  , inlineResponseDefault1ParticipantsRole = Nothing
  }

-- ** InlineResponseDefault1Regulations
-- | InlineResponseDefault1Regulations
data InlineResponseDefault1Regulations = InlineResponseDefault1Regulations
  { inlineResponseDefault1RegulationsDocId              :: !(Maybe Text) -- ^ "doc_id"
  , inlineResponseDefault1RegulationsDocumentHighlights :: !(Maybe A.Value) -- ^ "document_highlights"
  , inlineResponseDefault1RegulationsHighlights         :: !(Maybe [Text]) -- ^ "highlights"
  , inlineResponseDefault1RegulationsName               :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1RegulationsNo                 :: !(Maybe Text) -- ^ "no"
  , inlineResponseDefault1RegulationsUrl                :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Regulations
instance A.FromJSON InlineResponseDefault1Regulations where
  parseJSON = A.withObject "InlineResponseDefault1Regulations" $ \o ->
    InlineResponseDefault1Regulations
      <$> (o .:? "doc_id")
      <*> (o .:? "document_highlights")
      <*> (o .:? "highlights")
      <*> (o .:? "name")
      <*> (o .:? "no")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Regulations
instance A.ToJSON InlineResponseDefault1Regulations where
  toJSON InlineResponseDefault1Regulations {..} =
   _omitNulls
      [ "doc_id" .= inlineResponseDefault1RegulationsDocId
      , "document_highlights" .= inlineResponseDefault1RegulationsDocumentHighlights
      , "highlights" .= inlineResponseDefault1RegulationsHighlights
      , "name" .= inlineResponseDefault1RegulationsName
      , "no" .= inlineResponseDefault1RegulationsNo
      , "url" .= inlineResponseDefault1RegulationsUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1Regulations' (by applying it's required fields, if any)
mkInlineResponseDefault1Regulations
  :: InlineResponseDefault1Regulations
mkInlineResponseDefault1Regulations =
  InlineResponseDefault1Regulations
  { inlineResponseDefault1RegulationsDocId = Nothing
  , inlineResponseDefault1RegulationsDocumentHighlights = Nothing
  , inlineResponseDefault1RegulationsHighlights = Nothing
  , inlineResponseDefault1RegulationsName = Nothing
  , inlineResponseDefault1RegulationsNo = Nothing
  , inlineResponseDefault1RegulationsUrl = Nothing
  }

-- ** InlineResponseDefault1RegulatoryCitations
-- | InlineResponseDefault1RegulatoryCitations
data InlineResponseDefault1RegulatoryCitations = InlineResponseDefault1RegulatoryCitations
  { inlineResponseDefault1RegulatoryCitationsPart    :: !(Maybe Int) -- ^ "part"
  , inlineResponseDefault1RegulatoryCitationsSection :: !(Maybe Int) -- ^ "section"
  , inlineResponseDefault1RegulatoryCitationsTitle   :: !(Maybe Int) -- ^ "title"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1RegulatoryCitations
instance A.FromJSON InlineResponseDefault1RegulatoryCitations where
  parseJSON = A.withObject "InlineResponseDefault1RegulatoryCitations" $ \o ->
    InlineResponseDefault1RegulatoryCitations
      <$> (o .:? "part")
      <*> (o .:? "section")
      <*> (o .:? "title")

-- | ToJSON InlineResponseDefault1RegulatoryCitations
instance A.ToJSON InlineResponseDefault1RegulatoryCitations where
  toJSON InlineResponseDefault1RegulatoryCitations {..} =
   _omitNulls
      [ "part" .= inlineResponseDefault1RegulatoryCitationsPart
      , "section" .= inlineResponseDefault1RegulatoryCitationsSection
      , "title" .= inlineResponseDefault1RegulatoryCitationsTitle
      ]


-- | Construct a value of type 'InlineResponseDefault1RegulatoryCitations' (by applying it's required fields, if any)
mkInlineResponseDefault1RegulatoryCitations
  :: InlineResponseDefault1RegulatoryCitations
mkInlineResponseDefault1RegulatoryCitations =
  InlineResponseDefault1RegulatoryCitations
  { inlineResponseDefault1RegulatoryCitationsPart = Nothing
  , inlineResponseDefault1RegulatoryCitationsSection = Nothing
  , inlineResponseDefault1RegulatoryCitationsTitle = Nothing
  }

-- ** InlineResponseDefault1Statutes
-- | InlineResponseDefault1Statutes
data InlineResponseDefault1Statutes = InlineResponseDefault1Statutes
  { inlineResponseDefault1StatutesChapter            :: !(Maybe Text) -- ^ "chapter"
  , inlineResponseDefault1StatutesDocId              :: !(Maybe Text) -- ^ "doc_id"
  , inlineResponseDefault1StatutesDocumentHighlights :: !(Maybe A.Value) -- ^ "document_highlights"
  , inlineResponseDefault1StatutesHighlights         :: !(Maybe [Text]) -- ^ "highlights"
  , inlineResponseDefault1StatutesName               :: !(Maybe Text) -- ^ "name"
  , inlineResponseDefault1StatutesNo                 :: !(Maybe Text) -- ^ "no"
  , inlineResponseDefault1StatutesTitle              :: !(Maybe Text) -- ^ "title"
  , inlineResponseDefault1StatutesUrl                :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1Statutes
instance A.FromJSON InlineResponseDefault1Statutes where
  parseJSON = A.withObject "InlineResponseDefault1Statutes" $ \o ->
    InlineResponseDefault1Statutes
      <$> (o .:? "chapter")
      <*> (o .:? "doc_id")
      <*> (o .:? "document_highlights")
      <*> (o .:? "highlights")
      <*> (o .:? "name")
      <*> (o .:? "no")
      <*> (o .:? "title")
      <*> (o .:? "url")

-- | ToJSON InlineResponseDefault1Statutes
instance A.ToJSON InlineResponseDefault1Statutes where
  toJSON InlineResponseDefault1Statutes {..} =
   _omitNulls
      [ "chapter" .= inlineResponseDefault1StatutesChapter
      , "doc_id" .= inlineResponseDefault1StatutesDocId
      , "document_highlights" .= inlineResponseDefault1StatutesDocumentHighlights
      , "highlights" .= inlineResponseDefault1StatutesHighlights
      , "name" .= inlineResponseDefault1StatutesName
      , "no" .= inlineResponseDefault1StatutesNo
      , "title" .= inlineResponseDefault1StatutesTitle
      , "url" .= inlineResponseDefault1StatutesUrl
      ]


-- | Construct a value of type 'InlineResponseDefault1Statutes' (by applying it's required fields, if any)
mkInlineResponseDefault1Statutes
  :: InlineResponseDefault1Statutes
mkInlineResponseDefault1Statutes =
  InlineResponseDefault1Statutes
  { inlineResponseDefault1StatutesChapter = Nothing
  , inlineResponseDefault1StatutesDocId = Nothing
  , inlineResponseDefault1StatutesDocumentHighlights = Nothing
  , inlineResponseDefault1StatutesHighlights = Nothing
  , inlineResponseDefault1StatutesName = Nothing
  , inlineResponseDefault1StatutesNo = Nothing
  , inlineResponseDefault1StatutesTitle = Nothing
  , inlineResponseDefault1StatutesUrl = Nothing
  }

-- ** InlineResponseDefault1StatutoryCitations
-- | InlineResponseDefault1StatutoryCitations
data InlineResponseDefault1StatutoryCitations = InlineResponseDefault1StatutoryCitations
  { inlineResponseDefault1StatutoryCitationsSection :: !(Maybe Text) -- ^ "section"
  , inlineResponseDefault1StatutoryCitationsTitle   :: !(Maybe Int) -- ^ "title"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault1StatutoryCitations
instance A.FromJSON InlineResponseDefault1StatutoryCitations where
  parseJSON = A.withObject "InlineResponseDefault1StatutoryCitations" $ \o ->
    InlineResponseDefault1StatutoryCitations
      <$> (o .:? "section")
      <*> (o .:? "title")

-- | ToJSON InlineResponseDefault1StatutoryCitations
instance A.ToJSON InlineResponseDefault1StatutoryCitations where
  toJSON InlineResponseDefault1StatutoryCitations {..} =
   _omitNulls
      [ "section" .= inlineResponseDefault1StatutoryCitationsSection
      , "title" .= inlineResponseDefault1StatutoryCitationsTitle
      ]


-- | Construct a value of type 'InlineResponseDefault1StatutoryCitations' (by applying it's required fields, if any)
mkInlineResponseDefault1StatutoryCitations
  :: InlineResponseDefault1StatutoryCitations
mkInlineResponseDefault1StatutoryCitations =
  InlineResponseDefault1StatutoryCitations
  { inlineResponseDefault1StatutoryCitationsSection = Nothing
  , inlineResponseDefault1StatutoryCitationsTitle = Nothing
  }

-- ** InlineResponseDefault2
-- | InlineResponseDefault2
data InlineResponseDefault2 = InlineResponseDefault2
  { inlineResponseDefault2Pagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , inlineResponseDefault2Results    :: !(Maybe [ReportDate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault2
instance A.FromJSON InlineResponseDefault2 where
  parseJSON = A.withObject "InlineResponseDefault2" $ \o ->
    InlineResponseDefault2
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON InlineResponseDefault2
instance A.ToJSON InlineResponseDefault2 where
  toJSON InlineResponseDefault2 {..} =
   _omitNulls
      [ "pagination" .= inlineResponseDefault2Pagination
      , "results" .= inlineResponseDefault2Results
      ]


-- | Construct a value of type 'InlineResponseDefault2' (by applying it's required fields, if any)
mkInlineResponseDefault2
  :: InlineResponseDefault2
mkInlineResponseDefault2 =
  InlineResponseDefault2
  { inlineResponseDefault2Pagination = Nothing
  , inlineResponseDefault2Results = Nothing
  }

-- ** InlineResponseDefault3
-- | InlineResponseDefault3
data InlineResponseDefault3 = InlineResponseDefault3
  { inlineResponseDefault3Pagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , inlineResponseDefault3Results    :: !(Maybe [InlineResponseDefault3Results]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault3
instance A.FromJSON InlineResponseDefault3 where
  parseJSON = A.withObject "InlineResponseDefault3" $ \o ->
    InlineResponseDefault3
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON InlineResponseDefault3
instance A.ToJSON InlineResponseDefault3 where
  toJSON InlineResponseDefault3 {..} =
   _omitNulls
      [ "pagination" .= inlineResponseDefault3Pagination
      , "results" .= inlineResponseDefault3Results
      ]


-- | Construct a value of type 'InlineResponseDefault3' (by applying it's required fields, if any)
mkInlineResponseDefault3
  :: InlineResponseDefault3
mkInlineResponseDefault3 =
  InlineResponseDefault3
  { inlineResponseDefault3Pagination = Nothing
  , inlineResponseDefault3Results = Nothing
  }

-- ** InlineResponseDefault3Results
-- | InlineResponseDefault3Results
data InlineResponseDefault3Results = InlineResponseDefault3Results
  { inlineResponseDefault3ResultsActionCode :: !(Maybe Text) -- ^ "action_code"
  , inlineResponseDefault3ResultsActionCodeFull :: !(Maybe Text) -- ^ "action_code_full"
  , inlineResponseDefault3ResultsCandidateFirstName :: !(Maybe Text) -- ^ "candidate_first_name"
  , inlineResponseDefault3ResultsCandidateId :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , inlineResponseDefault3ResultsCandidateLastName :: !(Maybe Text) -- ^ "candidate_last_name"
  , inlineResponseDefault3ResultsCandidateMiddleName :: !(Maybe Text) -- ^ "candidate_middle_name"
  , inlineResponseDefault3ResultsCandidateName :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , inlineResponseDefault3ResultsCandidateOffice :: !(Maybe Text) -- ^ "candidate_office"
  , inlineResponseDefault3ResultsCandidateOfficeDistrict :: !(Maybe Text) -- ^ "candidate_office_district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , inlineResponseDefault3ResultsCandidateOfficeFull :: !(Maybe Text) -- ^ "candidate_office_full"
  , inlineResponseDefault3ResultsCandidateOfficeState :: !(Maybe Text) -- ^ "candidate_office_state"
  , inlineResponseDefault3ResultsCandidateOfficeStateFull :: !(Maybe Text) -- ^ "candidate_office_state_full"
  , inlineResponseDefault3ResultsCandidatePrefix :: !(Maybe Text) -- ^ "candidate_prefix"
  , inlineResponseDefault3ResultsCandidateSuffix :: !(Maybe Text) -- ^ "candidate_suffix"
  , inlineResponseDefault3ResultsCommittee :: !(Maybe CommitteeHistory) -- ^ "committee"
  , inlineResponseDefault3ResultsCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , inlineResponseDefault3ResultsCycle :: !(Maybe Int) -- ^ "cycle"
  , inlineResponseDefault3ResultsDueDateTerms :: !(Maybe Text) -- ^ "due_date_terms"
  , inlineResponseDefault3ResultsElectionType :: !(Maybe Text) -- ^ "election_type"
  , inlineResponseDefault3ResultsElectionTypeFull :: !(Maybe Text) -- ^ "election_type_full"
  , inlineResponseDefault3ResultsEntityType :: !(Maybe Text) -- ^ "entity_type"
  , inlineResponseDefault3ResultsEntityTypeFull :: !(Maybe Text) -- ^ "entity_type_full"
  , inlineResponseDefault3ResultsFecCommitteeId :: !(Maybe Text) -- ^ "fec_committee_id"
  , inlineResponseDefault3ResultsFecElectionTypeFull :: !(Maybe Text) -- ^ "fec_election_type_full"
  , inlineResponseDefault3ResultsFecElectionTypeYear :: !(Maybe Text) -- ^ "fec_election_type_year"
  , inlineResponseDefault3ResultsFileNumber :: !(Maybe Int) -- ^ "file_number"
  , inlineResponseDefault3ResultsFilingForm :: !(Maybe Text) -- ^ "filing_form"
  , inlineResponseDefault3ResultsImageNumber :: !(Maybe Text) -- ^ "image_number" - An unique identifier for each page the electronic or paper report.
  , inlineResponseDefault3ResultsIncurredDate :: !(Maybe DateTime) -- ^ "incurred_date"
  , inlineResponseDefault3ResultsInterestRateTerms :: !(Maybe Text) -- ^ "interest_rate_terms"
  , inlineResponseDefault3ResultsLineNumber :: !(Maybe Text) -- ^ "line_number"
  , inlineResponseDefault3ResultsLinkId :: !(Maybe Int) -- ^ "link_id"
  , inlineResponseDefault3ResultsLoadDate :: !(Maybe DateTime) -- ^ "load_date"
  , inlineResponseDefault3ResultsLoanBalance :: !(Maybe Float) -- ^ "loan_balance"
  , inlineResponseDefault3ResultsLoanSourceCity :: !(Maybe Text) -- ^ "loan_source_city"
  , inlineResponseDefault3ResultsLoanSourceFirstName :: !(Maybe Text) -- ^ "loan_source_first_name"
  , inlineResponseDefault3ResultsLoanSourceLastName :: !(Maybe Text) -- ^ "loan_source_last_name"
  , inlineResponseDefault3ResultsLoanSourceMiddleName :: !(Maybe Text) -- ^ "loan_source_middle_name"
  , inlineResponseDefault3ResultsLoanSourceName :: !(Maybe Text) -- ^ "loan_source_name" - Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,other line of credit, or personal funds of the candidate
  , inlineResponseDefault3ResultsLoanSourcePrefix :: !(Maybe Text) -- ^ "loan_source_prefix"
  , inlineResponseDefault3ResultsLoanSourceState :: !(Maybe Text) -- ^ "loan_source_state"
  , inlineResponseDefault3ResultsLoanSourceStreet1 :: !(Maybe Text) -- ^ "loan_source_street_1"
  , inlineResponseDefault3ResultsLoanSourceStreet2 :: !(Maybe Text) -- ^ "loan_source_street_2"
  , inlineResponseDefault3ResultsLoanSourceSuffix :: !(Maybe Text) -- ^ "loan_source_suffix"
  , inlineResponseDefault3ResultsLoanSourceZip :: !(Maybe Int) -- ^ "loan_source_zip"
  , inlineResponseDefault3ResultsMemoCode :: !(Maybe Text) -- ^ "memo_code"
  , inlineResponseDefault3ResultsMemoText :: !(Maybe Text) -- ^ "memo_text"
  , inlineResponseDefault3ResultsOriginalLoanAmount :: !(Maybe Float) -- ^ "original_loan_amount"
  , inlineResponseDefault3ResultsOriginalSubId :: !(Maybe Int) -- ^ "original_sub_id"
  , inlineResponseDefault3ResultsPaymentToDate :: !(Maybe Float) -- ^ "payment_to_date"
  , inlineResponseDefault3ResultsPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , inlineResponseDefault3ResultsPersonallyFunded :: !(Maybe Text) -- ^ "personally_funded"
  , inlineResponseDefault3ResultsReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , inlineResponseDefault3ResultsReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , inlineResponseDefault3ResultsScheduleALineNumber :: !(Maybe Int) -- ^ "schedule_a_line_number"
  , inlineResponseDefault3ResultsScheduleType :: !(Maybe Text) -- ^ "schedule_type"
  , inlineResponseDefault3ResultsScheduleTypeFull :: !(Maybe Text) -- ^ "schedule_type_full"
  , inlineResponseDefault3ResultsSecuredInd :: !(Maybe Text) -- ^ "secured_ind"
  , inlineResponseDefault3ResultsSubId :: !(Maybe Text) -- ^ "sub_id"
  , inlineResponseDefault3ResultsTransactionId :: !(Maybe Text) -- ^ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault3Results
instance A.FromJSON InlineResponseDefault3Results where
  parseJSON = A.withObject "InlineResponseDefault3Results" $ \o ->
    InlineResponseDefault3Results
      <$> (o .:? "action_code")
      <*> (o .:? "action_code_full")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_full")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "candidate_office_state_full")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "cycle")
      <*> (o .:? "due_date_terms")
      <*> (o .:? "election_type")
      <*> (o .:? "election_type_full")
      <*> (o .:? "entity_type")
      <*> (o .:? "entity_type_full")
      <*> (o .:? "fec_committee_id")
      <*> (o .:? "fec_election_type_full")
      <*> (o .:? "fec_election_type_year")
      <*> (o .:? "file_number")
      <*> (o .:? "filing_form")
      <*> (o .:? "image_number")
      <*> (o .:? "incurred_date")
      <*> (o .:? "interest_rate_terms")
      <*> (o .:? "line_number")
      <*> (o .:? "link_id")
      <*> (o .:? "load_date")
      <*> (o .:? "loan_balance")
      <*> (o .:? "loan_source_city")
      <*> (o .:? "loan_source_first_name")
      <*> (o .:? "loan_source_last_name")
      <*> (o .:? "loan_source_middle_name")
      <*> (o .:? "loan_source_name")
      <*> (o .:? "loan_source_prefix")
      <*> (o .:? "loan_source_state")
      <*> (o .:? "loan_source_street_1")
      <*> (o .:? "loan_source_street_2")
      <*> (o .:? "loan_source_suffix")
      <*> (o .:? "loan_source_zip")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_text")
      <*> (o .:? "original_loan_amount")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "payment_to_date")
      <*> (o .:? "pdf_url")
      <*> (o .:? "personally_funded")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_a_line_number")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "secured_ind")
      <*> (o .:? "sub_id")
      <*> (o .:? "transaction_id")

-- | ToJSON InlineResponseDefault3Results
instance A.ToJSON InlineResponseDefault3Results where
  toJSON InlineResponseDefault3Results {..} =
   _omitNulls
      [ "action_code" .= inlineResponseDefault3ResultsActionCode
      , "action_code_full" .= inlineResponseDefault3ResultsActionCodeFull
      , "candidate_first_name" .= inlineResponseDefault3ResultsCandidateFirstName
      , "candidate_id" .= inlineResponseDefault3ResultsCandidateId
      , "candidate_last_name" .= inlineResponseDefault3ResultsCandidateLastName
      , "candidate_middle_name" .= inlineResponseDefault3ResultsCandidateMiddleName
      , "candidate_name" .= inlineResponseDefault3ResultsCandidateName
      , "candidate_office" .= inlineResponseDefault3ResultsCandidateOffice
      , "candidate_office_district" .= inlineResponseDefault3ResultsCandidateOfficeDistrict
      , "candidate_office_full" .= inlineResponseDefault3ResultsCandidateOfficeFull
      , "candidate_office_state" .= inlineResponseDefault3ResultsCandidateOfficeState
      , "candidate_office_state_full" .= inlineResponseDefault3ResultsCandidateOfficeStateFull
      , "candidate_prefix" .= inlineResponseDefault3ResultsCandidatePrefix
      , "candidate_suffix" .= inlineResponseDefault3ResultsCandidateSuffix
      , "committee" .= inlineResponseDefault3ResultsCommittee
      , "committee_id" .= inlineResponseDefault3ResultsCommitteeId
      , "cycle" .= inlineResponseDefault3ResultsCycle
      , "due_date_terms" .= inlineResponseDefault3ResultsDueDateTerms
      , "election_type" .= inlineResponseDefault3ResultsElectionType
      , "election_type_full" .= inlineResponseDefault3ResultsElectionTypeFull
      , "entity_type" .= inlineResponseDefault3ResultsEntityType
      , "entity_type_full" .= inlineResponseDefault3ResultsEntityTypeFull
      , "fec_committee_id" .= inlineResponseDefault3ResultsFecCommitteeId
      , "fec_election_type_full" .= inlineResponseDefault3ResultsFecElectionTypeFull
      , "fec_election_type_year" .= inlineResponseDefault3ResultsFecElectionTypeYear
      , "file_number" .= inlineResponseDefault3ResultsFileNumber
      , "filing_form" .= inlineResponseDefault3ResultsFilingForm
      , "image_number" .= inlineResponseDefault3ResultsImageNumber
      , "incurred_date" .= inlineResponseDefault3ResultsIncurredDate
      , "interest_rate_terms" .= inlineResponseDefault3ResultsInterestRateTerms
      , "line_number" .= inlineResponseDefault3ResultsLineNumber
      , "link_id" .= inlineResponseDefault3ResultsLinkId
      , "load_date" .= inlineResponseDefault3ResultsLoadDate
      , "loan_balance" .= inlineResponseDefault3ResultsLoanBalance
      , "loan_source_city" .= inlineResponseDefault3ResultsLoanSourceCity
      , "loan_source_first_name" .= inlineResponseDefault3ResultsLoanSourceFirstName
      , "loan_source_last_name" .= inlineResponseDefault3ResultsLoanSourceLastName
      , "loan_source_middle_name" .= inlineResponseDefault3ResultsLoanSourceMiddleName
      , "loan_source_name" .= inlineResponseDefault3ResultsLoanSourceName
      , "loan_source_prefix" .= inlineResponseDefault3ResultsLoanSourcePrefix
      , "loan_source_state" .= inlineResponseDefault3ResultsLoanSourceState
      , "loan_source_street_1" .= inlineResponseDefault3ResultsLoanSourceStreet1
      , "loan_source_street_2" .= inlineResponseDefault3ResultsLoanSourceStreet2
      , "loan_source_suffix" .= inlineResponseDefault3ResultsLoanSourceSuffix
      , "loan_source_zip" .= inlineResponseDefault3ResultsLoanSourceZip
      , "memo_code" .= inlineResponseDefault3ResultsMemoCode
      , "memo_text" .= inlineResponseDefault3ResultsMemoText
      , "original_loan_amount" .= inlineResponseDefault3ResultsOriginalLoanAmount
      , "original_sub_id" .= inlineResponseDefault3ResultsOriginalSubId
      , "payment_to_date" .= inlineResponseDefault3ResultsPaymentToDate
      , "pdf_url" .= inlineResponseDefault3ResultsPdfUrl
      , "personally_funded" .= inlineResponseDefault3ResultsPersonallyFunded
      , "report_type" .= inlineResponseDefault3ResultsReportType
      , "report_year" .= inlineResponseDefault3ResultsReportYear
      , "schedule_a_line_number" .= inlineResponseDefault3ResultsScheduleALineNumber
      , "schedule_type" .= inlineResponseDefault3ResultsScheduleType
      , "schedule_type_full" .= inlineResponseDefault3ResultsScheduleTypeFull
      , "secured_ind" .= inlineResponseDefault3ResultsSecuredInd
      , "sub_id" .= inlineResponseDefault3ResultsSubId
      , "transaction_id" .= inlineResponseDefault3ResultsTransactionId
      ]


-- | Construct a value of type 'InlineResponseDefault3Results' (by applying it's required fields, if any)
mkInlineResponseDefault3Results
  :: InlineResponseDefault3Results
mkInlineResponseDefault3Results =
  InlineResponseDefault3Results
  { inlineResponseDefault3ResultsActionCode = Nothing
  , inlineResponseDefault3ResultsActionCodeFull = Nothing
  , inlineResponseDefault3ResultsCandidateFirstName = Nothing
  , inlineResponseDefault3ResultsCandidateId = Nothing
  , inlineResponseDefault3ResultsCandidateLastName = Nothing
  , inlineResponseDefault3ResultsCandidateMiddleName = Nothing
  , inlineResponseDefault3ResultsCandidateName = Nothing
  , inlineResponseDefault3ResultsCandidateOffice = Nothing
  , inlineResponseDefault3ResultsCandidateOfficeDistrict = Nothing
  , inlineResponseDefault3ResultsCandidateOfficeFull = Nothing
  , inlineResponseDefault3ResultsCandidateOfficeState = Nothing
  , inlineResponseDefault3ResultsCandidateOfficeStateFull = Nothing
  , inlineResponseDefault3ResultsCandidatePrefix = Nothing
  , inlineResponseDefault3ResultsCandidateSuffix = Nothing
  , inlineResponseDefault3ResultsCommittee = Nothing
  , inlineResponseDefault3ResultsCommitteeId = Nothing
  , inlineResponseDefault3ResultsCycle = Nothing
  , inlineResponseDefault3ResultsDueDateTerms = Nothing
  , inlineResponseDefault3ResultsElectionType = Nothing
  , inlineResponseDefault3ResultsElectionTypeFull = Nothing
  , inlineResponseDefault3ResultsEntityType = Nothing
  , inlineResponseDefault3ResultsEntityTypeFull = Nothing
  , inlineResponseDefault3ResultsFecCommitteeId = Nothing
  , inlineResponseDefault3ResultsFecElectionTypeFull = Nothing
  , inlineResponseDefault3ResultsFecElectionTypeYear = Nothing
  , inlineResponseDefault3ResultsFileNumber = Nothing
  , inlineResponseDefault3ResultsFilingForm = Nothing
  , inlineResponseDefault3ResultsImageNumber = Nothing
  , inlineResponseDefault3ResultsIncurredDate = Nothing
  , inlineResponseDefault3ResultsInterestRateTerms = Nothing
  , inlineResponseDefault3ResultsLineNumber = Nothing
  , inlineResponseDefault3ResultsLinkId = Nothing
  , inlineResponseDefault3ResultsLoadDate = Nothing
  , inlineResponseDefault3ResultsLoanBalance = Nothing
  , inlineResponseDefault3ResultsLoanSourceCity = Nothing
  , inlineResponseDefault3ResultsLoanSourceFirstName = Nothing
  , inlineResponseDefault3ResultsLoanSourceLastName = Nothing
  , inlineResponseDefault3ResultsLoanSourceMiddleName = Nothing
  , inlineResponseDefault3ResultsLoanSourceName = Nothing
  , inlineResponseDefault3ResultsLoanSourcePrefix = Nothing
  , inlineResponseDefault3ResultsLoanSourceState = Nothing
  , inlineResponseDefault3ResultsLoanSourceStreet1 = Nothing
  , inlineResponseDefault3ResultsLoanSourceStreet2 = Nothing
  , inlineResponseDefault3ResultsLoanSourceSuffix = Nothing
  , inlineResponseDefault3ResultsLoanSourceZip = Nothing
  , inlineResponseDefault3ResultsMemoCode = Nothing
  , inlineResponseDefault3ResultsMemoText = Nothing
  , inlineResponseDefault3ResultsOriginalLoanAmount = Nothing
  , inlineResponseDefault3ResultsOriginalSubId = Nothing
  , inlineResponseDefault3ResultsPaymentToDate = Nothing
  , inlineResponseDefault3ResultsPdfUrl = Nothing
  , inlineResponseDefault3ResultsPersonallyFunded = Nothing
  , inlineResponseDefault3ResultsReportType = Nothing
  , inlineResponseDefault3ResultsReportYear = Nothing
  , inlineResponseDefault3ResultsScheduleALineNumber = Nothing
  , inlineResponseDefault3ResultsScheduleType = Nothing
  , inlineResponseDefault3ResultsScheduleTypeFull = Nothing
  , inlineResponseDefault3ResultsSecuredInd = Nothing
  , inlineResponseDefault3ResultsSubId = Nothing
  , inlineResponseDefault3ResultsTransactionId = Nothing
  }

-- ** InlineResponseDefault4
-- | InlineResponseDefault4
data InlineResponseDefault4 = InlineResponseDefault4
  { inlineResponseDefault4Pagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , inlineResponseDefault4Results    :: !(Maybe [InlineResponseDefault4Results]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault4
instance A.FromJSON InlineResponseDefault4 where
  parseJSON = A.withObject "InlineResponseDefault4" $ \o ->
    InlineResponseDefault4
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON InlineResponseDefault4
instance A.ToJSON InlineResponseDefault4 where
  toJSON InlineResponseDefault4 {..} =
   _omitNulls
      [ "pagination" .= inlineResponseDefault4Pagination
      , "results" .= inlineResponseDefault4Results
      ]


-- | Construct a value of type 'InlineResponseDefault4' (by applying it's required fields, if any)
mkInlineResponseDefault4
  :: InlineResponseDefault4
mkInlineResponseDefault4 =
  InlineResponseDefault4
  { inlineResponseDefault4Pagination = Nothing
  , inlineResponseDefault4Results = Nothing
  }

-- ** InlineResponseDefault4Results
-- | InlineResponseDefault4Results
data InlineResponseDefault4Results = InlineResponseDefault4Results
  { inlineResponseDefault4ResultsActionCode :: !(Maybe Text) -- ^ "action_code"
  , inlineResponseDefault4ResultsActionCodeFull :: !(Maybe Text) -- ^ "action_code_full"
  , inlineResponseDefault4ResultsAmountIncurredPeriod :: !(Maybe Float) -- ^ "amount_incurred_period"
  , inlineResponseDefault4ResultsCandidateFirstName :: !(Maybe Text) -- ^ "candidate_first_name"
  , inlineResponseDefault4ResultsCandidateId :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , inlineResponseDefault4ResultsCandidateLastName :: !(Maybe Text) -- ^ "candidate_last_name"
  , inlineResponseDefault4ResultsCandidateOffice :: !(Maybe Text) -- ^ "candidate_office"
  , inlineResponseDefault4ResultsCandidateOfficeDistrict :: !(Maybe Text) -- ^ "candidate_office_district"
  , inlineResponseDefault4ResultsCandidateOfficeState :: !(Maybe Text) -- ^ "candidate_office_state"
  , inlineResponseDefault4ResultsCandidateOfficeStateFull :: !(Maybe Text) -- ^ "candidate_office_state_full"
  , inlineResponseDefault4ResultsCanidateName :: !(Maybe Text) -- ^ "canidate_name" - Name of candidate running for office
  , inlineResponseDefault4ResultsCommittee :: !(Maybe CommitteeHistory) -- ^ "committee"
  , inlineResponseDefault4ResultsCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , inlineResponseDefault4ResultsCommitteeName :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , inlineResponseDefault4ResultsConduitCommitteeCity :: !(Maybe Text) -- ^ "conduit_committee_city"
  , inlineResponseDefault4ResultsConduitCommitteeId :: !(Maybe Text) -- ^ "conduit_committee_id"
  , inlineResponseDefault4ResultsConduitCommitteeName :: !(Maybe Text) -- ^ "conduit_committee_name"
  , inlineResponseDefault4ResultsConduitCommitteeState :: !(Maybe Text) -- ^ "conduit_committee_state"
  , inlineResponseDefault4ResultsConduitCommitteeStreet1 :: !(Maybe Text) -- ^ "conduit_committee_street1"
  , inlineResponseDefault4ResultsConduitCommitteeStreet2 :: !(Maybe Text) -- ^ "conduit_committee_street2"
  , inlineResponseDefault4ResultsConduitCommitteeZip :: !(Maybe Int) -- ^ "conduit_committee_zip"
  , inlineResponseDefault4ResultsCreditorDebtorCity :: !(Maybe Text) -- ^ "creditor_debtor_city"
  , inlineResponseDefault4ResultsCreditorDebtorFirstName :: !(Maybe Text) -- ^ "creditor_debtor_first_name"
  , inlineResponseDefault4ResultsCreditorDebtorId :: !(Maybe Text) -- ^ "creditor_debtor_id"
  , inlineResponseDefault4ResultsCreditorDebtorLastName :: !(Maybe Text) -- ^ "creditor_debtor_last_name"
  , inlineResponseDefault4ResultsCreditorDebtorMiddleName :: !(Maybe Text) -- ^ "creditor_debtor_middle_name"
  , inlineResponseDefault4ResultsCreditorDebtorName :: !(Maybe Text) -- ^ "creditor_debtor_name"
  , inlineResponseDefault4ResultsCreditorDebtorPrefix :: !(Maybe Text) -- ^ "creditor_debtor_prefix"
  , inlineResponseDefault4ResultsCreditorDebtorState :: !(Maybe Text) -- ^ "creditor_debtor_state"
  , inlineResponseDefault4ResultsCreditorDebtorStreet1 :: !(Maybe Text) -- ^ "creditor_debtor_street1"
  , inlineResponseDefault4ResultsCreditorDebtorStreet2 :: !(Maybe Text) -- ^ "creditor_debtor_street2"
  , inlineResponseDefault4ResultsCreditorDebtorSuffix :: !(Maybe Text) -- ^ "creditor_debtor_suffix"
  , inlineResponseDefault4ResultsElectionCycle :: !(Maybe Int) -- ^ "election_cycle"
  , inlineResponseDefault4ResultsEntityType :: !(Maybe Text) -- ^ "entity_type"
  , inlineResponseDefault4ResultsFileNumber :: !(Maybe Int) -- ^ "file_number"
  , inlineResponseDefault4ResultsFilingForm :: !(Maybe Text) -- ^ "filing_form"
  , inlineResponseDefault4ResultsImageNumber :: !(Maybe Text) -- ^ "image_number" - An unique identifier for each page the electronic or paper report.
  , inlineResponseDefault4ResultsLineNumber :: !(Maybe Text) -- ^ "line_number"
  , inlineResponseDefault4ResultsLinkId :: !(Maybe Int) -- ^ "link_id"
  , inlineResponseDefault4ResultsLoadDate :: !(Maybe DateTime) -- ^ "load_date"
  , inlineResponseDefault4ResultsNatureOfDebt :: !(Maybe Text) -- ^ "nature_of_debt"
  , inlineResponseDefault4ResultsOriginalSubId :: !(Maybe Int) -- ^ "original_sub_id"
  , inlineResponseDefault4ResultsOutstandingBalanceBeginningOfPeriod :: !(Maybe Float) -- ^ "outstanding_balance_beginning_of_period"
  , inlineResponseDefault4ResultsOutstandingBalanceCloseOfPeriod :: !(Maybe Float) -- ^ "outstanding_balance_close_of_period"
  , inlineResponseDefault4ResultsPaymentPeriod :: !(Maybe Float) -- ^ "payment_period"
  , inlineResponseDefault4ResultsPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , inlineResponseDefault4ResultsReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , inlineResponseDefault4ResultsReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , inlineResponseDefault4ResultsScheduleType :: !(Maybe Text) -- ^ "schedule_type"
  , inlineResponseDefault4ResultsScheduleTypeFull :: !(Maybe Text) -- ^ "schedule_type_full"
  , inlineResponseDefault4ResultsSubId :: !(Maybe Text) -- ^ "sub_id"
  , inlineResponseDefault4ResultsTransactionId :: !(Maybe Text) -- ^ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault4Results
instance A.FromJSON InlineResponseDefault4Results where
  parseJSON = A.withObject "InlineResponseDefault4Results" $ \o ->
    InlineResponseDefault4Results
      <$> (o .:? "action_code")
      <*> (o .:? "action_code_full")
      <*> (o .:? "amount_incurred_period")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "candidate_office_state_full")
      <*> (o .:? "canidate_name")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "conduit_committee_city")
      <*> (o .:? "conduit_committee_id")
      <*> (o .:? "conduit_committee_name")
      <*> (o .:? "conduit_committee_state")
      <*> (o .:? "conduit_committee_street1")
      <*> (o .:? "conduit_committee_street2")
      <*> (o .:? "conduit_committee_zip")
      <*> (o .:? "creditor_debtor_city")
      <*> (o .:? "creditor_debtor_first_name")
      <*> (o .:? "creditor_debtor_id")
      <*> (o .:? "creditor_debtor_last_name")
      <*> (o .:? "creditor_debtor_middle_name")
      <*> (o .:? "creditor_debtor_name")
      <*> (o .:? "creditor_debtor_prefix")
      <*> (o .:? "creditor_debtor_state")
      <*> (o .:? "creditor_debtor_street1")
      <*> (o .:? "creditor_debtor_street2")
      <*> (o .:? "creditor_debtor_suffix")
      <*> (o .:? "election_cycle")
      <*> (o .:? "entity_type")
      <*> (o .:? "file_number")
      <*> (o .:? "filing_form")
      <*> (o .:? "image_number")
      <*> (o .:? "line_number")
      <*> (o .:? "link_id")
      <*> (o .:? "load_date")
      <*> (o .:? "nature_of_debt")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "outstanding_balance_beginning_of_period")
      <*> (o .:? "outstanding_balance_close_of_period")
      <*> (o .:? "payment_period")
      <*> (o .:? "pdf_url")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "sub_id")
      <*> (o .:? "transaction_id")

-- | ToJSON InlineResponseDefault4Results
instance A.ToJSON InlineResponseDefault4Results where
  toJSON InlineResponseDefault4Results {..} =
   _omitNulls
      [ "action_code" .= inlineResponseDefault4ResultsActionCode
      , "action_code_full" .= inlineResponseDefault4ResultsActionCodeFull
      , "amount_incurred_period" .= inlineResponseDefault4ResultsAmountIncurredPeriod
      , "candidate_first_name" .= inlineResponseDefault4ResultsCandidateFirstName
      , "candidate_id" .= inlineResponseDefault4ResultsCandidateId
      , "candidate_last_name" .= inlineResponseDefault4ResultsCandidateLastName
      , "candidate_office" .= inlineResponseDefault4ResultsCandidateOffice
      , "candidate_office_district" .= inlineResponseDefault4ResultsCandidateOfficeDistrict
      , "candidate_office_state" .= inlineResponseDefault4ResultsCandidateOfficeState
      , "candidate_office_state_full" .= inlineResponseDefault4ResultsCandidateOfficeStateFull
      , "canidate_name" .= inlineResponseDefault4ResultsCanidateName
      , "committee" .= inlineResponseDefault4ResultsCommittee
      , "committee_id" .= inlineResponseDefault4ResultsCommitteeId
      , "committee_name" .= inlineResponseDefault4ResultsCommitteeName
      , "conduit_committee_city" .= inlineResponseDefault4ResultsConduitCommitteeCity
      , "conduit_committee_id" .= inlineResponseDefault4ResultsConduitCommitteeId
      , "conduit_committee_name" .= inlineResponseDefault4ResultsConduitCommitteeName
      , "conduit_committee_state" .= inlineResponseDefault4ResultsConduitCommitteeState
      , "conduit_committee_street1" .= inlineResponseDefault4ResultsConduitCommitteeStreet1
      , "conduit_committee_street2" .= inlineResponseDefault4ResultsConduitCommitteeStreet2
      , "conduit_committee_zip" .= inlineResponseDefault4ResultsConduitCommitteeZip
      , "creditor_debtor_city" .= inlineResponseDefault4ResultsCreditorDebtorCity
      , "creditor_debtor_first_name" .= inlineResponseDefault4ResultsCreditorDebtorFirstName
      , "creditor_debtor_id" .= inlineResponseDefault4ResultsCreditorDebtorId
      , "creditor_debtor_last_name" .= inlineResponseDefault4ResultsCreditorDebtorLastName
      , "creditor_debtor_middle_name" .= inlineResponseDefault4ResultsCreditorDebtorMiddleName
      , "creditor_debtor_name" .= inlineResponseDefault4ResultsCreditorDebtorName
      , "creditor_debtor_prefix" .= inlineResponseDefault4ResultsCreditorDebtorPrefix
      , "creditor_debtor_state" .= inlineResponseDefault4ResultsCreditorDebtorState
      , "creditor_debtor_street1" .= inlineResponseDefault4ResultsCreditorDebtorStreet1
      , "creditor_debtor_street2" .= inlineResponseDefault4ResultsCreditorDebtorStreet2
      , "creditor_debtor_suffix" .= inlineResponseDefault4ResultsCreditorDebtorSuffix
      , "election_cycle" .= inlineResponseDefault4ResultsElectionCycle
      , "entity_type" .= inlineResponseDefault4ResultsEntityType
      , "file_number" .= inlineResponseDefault4ResultsFileNumber
      , "filing_form" .= inlineResponseDefault4ResultsFilingForm
      , "image_number" .= inlineResponseDefault4ResultsImageNumber
      , "line_number" .= inlineResponseDefault4ResultsLineNumber
      , "link_id" .= inlineResponseDefault4ResultsLinkId
      , "load_date" .= inlineResponseDefault4ResultsLoadDate
      , "nature_of_debt" .= inlineResponseDefault4ResultsNatureOfDebt
      , "original_sub_id" .= inlineResponseDefault4ResultsOriginalSubId
      , "outstanding_balance_beginning_of_period" .= inlineResponseDefault4ResultsOutstandingBalanceBeginningOfPeriod
      , "outstanding_balance_close_of_period" .= inlineResponseDefault4ResultsOutstandingBalanceCloseOfPeriod
      , "payment_period" .= inlineResponseDefault4ResultsPaymentPeriod
      , "pdf_url" .= inlineResponseDefault4ResultsPdfUrl
      , "report_type" .= inlineResponseDefault4ResultsReportType
      , "report_year" .= inlineResponseDefault4ResultsReportYear
      , "schedule_type" .= inlineResponseDefault4ResultsScheduleType
      , "schedule_type_full" .= inlineResponseDefault4ResultsScheduleTypeFull
      , "sub_id" .= inlineResponseDefault4ResultsSubId
      , "transaction_id" .= inlineResponseDefault4ResultsTransactionId
      ]


-- | Construct a value of type 'InlineResponseDefault4Results' (by applying it's required fields, if any)
mkInlineResponseDefault4Results
  :: InlineResponseDefault4Results
mkInlineResponseDefault4Results =
  InlineResponseDefault4Results
  { inlineResponseDefault4ResultsActionCode = Nothing
  , inlineResponseDefault4ResultsActionCodeFull = Nothing
  , inlineResponseDefault4ResultsAmountIncurredPeriod = Nothing
  , inlineResponseDefault4ResultsCandidateFirstName = Nothing
  , inlineResponseDefault4ResultsCandidateId = Nothing
  , inlineResponseDefault4ResultsCandidateLastName = Nothing
  , inlineResponseDefault4ResultsCandidateOffice = Nothing
  , inlineResponseDefault4ResultsCandidateOfficeDistrict = Nothing
  , inlineResponseDefault4ResultsCandidateOfficeState = Nothing
  , inlineResponseDefault4ResultsCandidateOfficeStateFull = Nothing
  , inlineResponseDefault4ResultsCanidateName = Nothing
  , inlineResponseDefault4ResultsCommittee = Nothing
  , inlineResponseDefault4ResultsCommitteeId = Nothing
  , inlineResponseDefault4ResultsCommitteeName = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeCity = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeId = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeName = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeState = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeStreet1 = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeStreet2 = Nothing
  , inlineResponseDefault4ResultsConduitCommitteeZip = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorCity = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorFirstName = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorId = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorLastName = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorMiddleName = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorName = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorPrefix = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorState = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorStreet1 = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorStreet2 = Nothing
  , inlineResponseDefault4ResultsCreditorDebtorSuffix = Nothing
  , inlineResponseDefault4ResultsElectionCycle = Nothing
  , inlineResponseDefault4ResultsEntityType = Nothing
  , inlineResponseDefault4ResultsFileNumber = Nothing
  , inlineResponseDefault4ResultsFilingForm = Nothing
  , inlineResponseDefault4ResultsImageNumber = Nothing
  , inlineResponseDefault4ResultsLineNumber = Nothing
  , inlineResponseDefault4ResultsLinkId = Nothing
  , inlineResponseDefault4ResultsLoadDate = Nothing
  , inlineResponseDefault4ResultsNatureOfDebt = Nothing
  , inlineResponseDefault4ResultsOriginalSubId = Nothing
  , inlineResponseDefault4ResultsOutstandingBalanceBeginningOfPeriod = Nothing
  , inlineResponseDefault4ResultsOutstandingBalanceCloseOfPeriod = Nothing
  , inlineResponseDefault4ResultsPaymentPeriod = Nothing
  , inlineResponseDefault4ResultsPdfUrl = Nothing
  , inlineResponseDefault4ResultsReportType = Nothing
  , inlineResponseDefault4ResultsReportYear = Nothing
  , inlineResponseDefault4ResultsScheduleType = Nothing
  , inlineResponseDefault4ResultsScheduleTypeFull = Nothing
  , inlineResponseDefault4ResultsSubId = Nothing
  , inlineResponseDefault4ResultsTransactionId = Nothing
  }

-- ** InlineResponseDefault5
-- | InlineResponseDefault5
data InlineResponseDefault5 = InlineResponseDefault5
  { inlineResponseDefault5Pagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , inlineResponseDefault5Results    :: !(Maybe [InlineResponseDefault5Results]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault5
instance A.FromJSON InlineResponseDefault5 where
  parseJSON = A.withObject "InlineResponseDefault5" $ \o ->
    InlineResponseDefault5
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON InlineResponseDefault5
instance A.ToJSON InlineResponseDefault5 where
  toJSON InlineResponseDefault5 {..} =
   _omitNulls
      [ "pagination" .= inlineResponseDefault5Pagination
      , "results" .= inlineResponseDefault5Results
      ]


-- | Construct a value of type 'InlineResponseDefault5' (by applying it's required fields, if any)
mkInlineResponseDefault5
  :: InlineResponseDefault5
mkInlineResponseDefault5 =
  InlineResponseDefault5
  { inlineResponseDefault5Pagination = Nothing
  , inlineResponseDefault5Results = Nothing
  }

-- ** InlineResponseDefault5Results
-- | InlineResponseDefault5Results
data InlineResponseDefault5Results = InlineResponseDefault5Results
  { inlineResponseDefault5ResultsActionCode :: !(Maybe Text) -- ^ "action_code"
  , inlineResponseDefault5ResultsActionCodeFull :: !(Maybe Text) -- ^ "action_code_full"
  , inlineResponseDefault5ResultsAggregateGeneralElectionExpenditure :: !(Maybe Text) -- ^ "aggregate_general_election_expenditure"
  , inlineResponseDefault5ResultsBackReferenceScheduleName :: !(Maybe Text) -- ^ "back_reference_schedule_name"
  , inlineResponseDefault5ResultsBackReferenceTransactionId :: !(Maybe Int) -- ^ "back_reference_transaction_id"
  , inlineResponseDefault5ResultsCandidateFirstName :: !(Maybe Text) -- ^ "candidate_first_name"
  , inlineResponseDefault5ResultsCandidateId :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , inlineResponseDefault5ResultsCandidateLastName :: !(Maybe Text) -- ^ "candidate_last_name"
  , inlineResponseDefault5ResultsCandidateMiddleName :: !(Maybe Text) -- ^ "candidate_middle_name"
  , inlineResponseDefault5ResultsCandidateName :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , inlineResponseDefault5ResultsCandidateOffice :: !(Maybe Text) -- ^ "candidate_office"
  , inlineResponseDefault5ResultsCandidateOfficeDistrict :: !(Maybe Text) -- ^ "candidate_office_district"
  , inlineResponseDefault5ResultsCandidateOfficeFull :: !(Maybe Text) -- ^ "candidate_office_full"
  , inlineResponseDefault5ResultsCandidateOfficeState :: !(Maybe Text) -- ^ "candidate_office_state"
  , inlineResponseDefault5ResultsCandidateOfficeStateFull :: !(Maybe Text) -- ^ "candidate_office_state_full"
  , inlineResponseDefault5ResultsCandidatePrefix :: !(Maybe Text) -- ^ "candidate_prefix"
  , inlineResponseDefault5ResultsCandidateSuffix :: !(Maybe Text) -- ^ "candidate_suffix"
  , inlineResponseDefault5ResultsCatologCode :: !(Maybe Text) -- ^ "catolog_code"
  , inlineResponseDefault5ResultsCatologCodeFull :: !(Maybe Text) -- ^ "catolog_code_full"
  , inlineResponseDefault5ResultsCommittee :: !(Maybe CommitteeHistory) -- ^ "committee"
  , inlineResponseDefault5ResultsCommitteeDesignatedCoordinatedExpenditureIndicator :: !(Maybe Text) -- ^ "committee_designated_coordinated_expenditure_indicator"
  , inlineResponseDefault5ResultsCommitteeId :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , inlineResponseDefault5ResultsCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , inlineResponseDefault5ResultsConduitCommitteeCity :: !(Maybe Text) -- ^ "conduit_committee_city"
  , inlineResponseDefault5ResultsConduitCommitteeId :: !(Maybe Text) -- ^ "conduit_committee_id"
  , inlineResponseDefault5ResultsConduitCommitteeName :: !(Maybe Text) -- ^ "conduit_committee_name"
  , inlineResponseDefault5ResultsConduitCommitteeState :: !(Maybe Text) -- ^ "conduit_committee_state"
  , inlineResponseDefault5ResultsConduitCommitteeStreet1 :: !(Maybe Text) -- ^ "conduit_committee_street1"
  , inlineResponseDefault5ResultsConduitCommitteeStreet2 :: !(Maybe Text) -- ^ "conduit_committee_street2"
  , inlineResponseDefault5ResultsConduitCommitteeZip :: !(Maybe Int) -- ^ "conduit_committee_zip"
  , inlineResponseDefault5ResultsDesignatedCommitteeId :: !(Maybe Text) -- ^ "designated_committee_id"
  , inlineResponseDefault5ResultsDesignatedCommitteeName :: !(Maybe Text) -- ^ "designated_committee_name"
  , inlineResponseDefault5ResultsElectionCycle :: !(Maybe Int) -- ^ "election_cycle"
  , inlineResponseDefault5ResultsEntityType :: !(Maybe Text) -- ^ "entity_type"
  , inlineResponseDefault5ResultsEntityTypeDesc :: !(Maybe Text) -- ^ "entity_type_desc"
  , inlineResponseDefault5ResultsExpenditureAmount :: !(Maybe Int) -- ^ "expenditure_amount"
  , inlineResponseDefault5ResultsExpenditureDate :: !(Maybe DateTime) -- ^ "expenditure_date"
  , inlineResponseDefault5ResultsExpenditurePurposeFull :: !(Maybe Text) -- ^ "expenditure_purpose_full"
  , inlineResponseDefault5ResultsExpenditureType :: !(Maybe Text) -- ^ "expenditure_type"
  , inlineResponseDefault5ResultsExpenditureTypeFull :: !(Maybe Text) -- ^ "expenditure_type_full"
  , inlineResponseDefault5ResultsFileNumber :: !(Maybe Int) -- ^ "file_number"
  , inlineResponseDefault5ResultsFilingForm :: !(Maybe Text) -- ^ "filing_form"
  , inlineResponseDefault5ResultsImageNumber :: !(Maybe Text) -- ^ "image_number" - An unique identifier for each page the electronic or paper report.
  , inlineResponseDefault5ResultsLineNumber :: !(Maybe Text) -- ^ "line_number"
  , inlineResponseDefault5ResultsLinkId :: !(Maybe Int) -- ^ "link_id"
  , inlineResponseDefault5ResultsLoadDate :: !(Maybe DateTime) -- ^ "load_date"
  , inlineResponseDefault5ResultsMemoCode :: !(Maybe Text) -- ^ "memo_code"
  , inlineResponseDefault5ResultsMemoCodeFull :: !(Maybe Text) -- ^ "memo_code_full"
  , inlineResponseDefault5ResultsMemoText :: !(Maybe Text) -- ^ "memo_text"
  , inlineResponseDefault5ResultsOriginalSubId :: !(Maybe Int) -- ^ "original_sub_id"
  , inlineResponseDefault5ResultsPayeeFirstName :: !(Maybe Text) -- ^ "payee_first_name"
  , inlineResponseDefault5ResultsPayeeLastName :: !(Maybe Text) -- ^ "payee_last_name"
  , inlineResponseDefault5ResultsPayeeMiddleName :: !(Maybe Text) -- ^ "payee_middle_name"
  , inlineResponseDefault5ResultsPayeeName :: !(Maybe Text) -- ^ "payee_name"
  , inlineResponseDefault5ResultsPdfUrl :: !(Maybe Text) -- ^ "pdf_url"
  , inlineResponseDefault5ResultsReportType :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , inlineResponseDefault5ResultsReportYear :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , inlineResponseDefault5ResultsScheduleType :: !(Maybe Text) -- ^ "schedule_type"
  , inlineResponseDefault5ResultsScheduleTypeFull :: !(Maybe Text) -- ^ "schedule_type_full"
  , inlineResponseDefault5ResultsSubId :: !(Maybe Text) -- ^ "sub_id"
  , inlineResponseDefault5ResultsSubordinateCommittee :: !(Maybe CommitteeHistory) -- ^ "subordinate_committee"
  , inlineResponseDefault5ResultsSubordinateCommitteeId :: !(Maybe Text) -- ^ "subordinate_committee_id"
  , inlineResponseDefault5ResultsTransactionId :: !(Maybe Text) -- ^ "transaction_id"
  , inlineResponseDefault5ResultsUnlimitedSpendingFlag :: !(Maybe Text) -- ^ "unlimited_spending_flag"
  , inlineResponseDefault5ResultsUnlimitedSpendingFlagFull :: !(Maybe Text) -- ^ "unlimited_spending_flag_full"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON InlineResponseDefault5Results
instance A.FromJSON InlineResponseDefault5Results where
  parseJSON = A.withObject "InlineResponseDefault5Results" $ \o ->
    InlineResponseDefault5Results
      <$> (o .:? "action_code")
      <*> (o .:? "action_code_full")
      <*> (o .:? "aggregate_general_election_expenditure")
      <*> (o .:? "back_reference_schedule_name")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_full")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "candidate_office_state_full")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "catolog_code")
      <*> (o .:? "catolog_code_full")
      <*> (o .:? "committee")
      <*> (o .:? "committee_designated_coordinated_expenditure_indicator")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "conduit_committee_city")
      <*> (o .:? "conduit_committee_id")
      <*> (o .:? "conduit_committee_name")
      <*> (o .:? "conduit_committee_state")
      <*> (o .:? "conduit_committee_street1")
      <*> (o .:? "conduit_committee_street2")
      <*> (o .:? "conduit_committee_zip")
      <*> (o .:? "designated_committee_id")
      <*> (o .:? "designated_committee_name")
      <*> (o .:? "election_cycle")
      <*> (o .:? "entity_type")
      <*> (o .:? "entity_type_desc")
      <*> (o .:? "expenditure_amount")
      <*> (o .:? "expenditure_date")
      <*> (o .:? "expenditure_purpose_full")
      <*> (o .:? "expenditure_type")
      <*> (o .:? "expenditure_type_full")
      <*> (o .:? "file_number")
      <*> (o .:? "filing_form")
      <*> (o .:? "image_number")
      <*> (o .:? "line_number")
      <*> (o .:? "link_id")
      <*> (o .:? "load_date")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_code_full")
      <*> (o .:? "memo_text")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "payee_first_name")
      <*> (o .:? "payee_last_name")
      <*> (o .:? "payee_middle_name")
      <*> (o .:? "payee_name")
      <*> (o .:? "pdf_url")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "sub_id")
      <*> (o .:? "subordinate_committee")
      <*> (o .:? "subordinate_committee_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "unlimited_spending_flag")
      <*> (o .:? "unlimited_spending_flag_full")

-- | ToJSON InlineResponseDefault5Results
instance A.ToJSON InlineResponseDefault5Results where
  toJSON InlineResponseDefault5Results {..} =
   _omitNulls
      [ "action_code" .= inlineResponseDefault5ResultsActionCode
      , "action_code_full" .= inlineResponseDefault5ResultsActionCodeFull
      , "aggregate_general_election_expenditure" .= inlineResponseDefault5ResultsAggregateGeneralElectionExpenditure
      , "back_reference_schedule_name" .= inlineResponseDefault5ResultsBackReferenceScheduleName
      , "back_reference_transaction_id" .= inlineResponseDefault5ResultsBackReferenceTransactionId
      , "candidate_first_name" .= inlineResponseDefault5ResultsCandidateFirstName
      , "candidate_id" .= inlineResponseDefault5ResultsCandidateId
      , "candidate_last_name" .= inlineResponseDefault5ResultsCandidateLastName
      , "candidate_middle_name" .= inlineResponseDefault5ResultsCandidateMiddleName
      , "candidate_name" .= inlineResponseDefault5ResultsCandidateName
      , "candidate_office" .= inlineResponseDefault5ResultsCandidateOffice
      , "candidate_office_district" .= inlineResponseDefault5ResultsCandidateOfficeDistrict
      , "candidate_office_full" .= inlineResponseDefault5ResultsCandidateOfficeFull
      , "candidate_office_state" .= inlineResponseDefault5ResultsCandidateOfficeState
      , "candidate_office_state_full" .= inlineResponseDefault5ResultsCandidateOfficeStateFull
      , "candidate_prefix" .= inlineResponseDefault5ResultsCandidatePrefix
      , "candidate_suffix" .= inlineResponseDefault5ResultsCandidateSuffix
      , "catolog_code" .= inlineResponseDefault5ResultsCatologCode
      , "catolog_code_full" .= inlineResponseDefault5ResultsCatologCodeFull
      , "committee" .= inlineResponseDefault5ResultsCommittee
      , "committee_designated_coordinated_expenditure_indicator" .= inlineResponseDefault5ResultsCommitteeDesignatedCoordinatedExpenditureIndicator
      , "committee_id" .= inlineResponseDefault5ResultsCommitteeId
      , "committee_name" .= inlineResponseDefault5ResultsCommitteeName
      , "conduit_committee_city" .= inlineResponseDefault5ResultsConduitCommitteeCity
      , "conduit_committee_id" .= inlineResponseDefault5ResultsConduitCommitteeId
      , "conduit_committee_name" .= inlineResponseDefault5ResultsConduitCommitteeName
      , "conduit_committee_state" .= inlineResponseDefault5ResultsConduitCommitteeState
      , "conduit_committee_street1" .= inlineResponseDefault5ResultsConduitCommitteeStreet1
      , "conduit_committee_street2" .= inlineResponseDefault5ResultsConduitCommitteeStreet2
      , "conduit_committee_zip" .= inlineResponseDefault5ResultsConduitCommitteeZip
      , "designated_committee_id" .= inlineResponseDefault5ResultsDesignatedCommitteeId
      , "designated_committee_name" .= inlineResponseDefault5ResultsDesignatedCommitteeName
      , "election_cycle" .= inlineResponseDefault5ResultsElectionCycle
      , "entity_type" .= inlineResponseDefault5ResultsEntityType
      , "entity_type_desc" .= inlineResponseDefault5ResultsEntityTypeDesc
      , "expenditure_amount" .= inlineResponseDefault5ResultsExpenditureAmount
      , "expenditure_date" .= inlineResponseDefault5ResultsExpenditureDate
      , "expenditure_purpose_full" .= inlineResponseDefault5ResultsExpenditurePurposeFull
      , "expenditure_type" .= inlineResponseDefault5ResultsExpenditureType
      , "expenditure_type_full" .= inlineResponseDefault5ResultsExpenditureTypeFull
      , "file_number" .= inlineResponseDefault5ResultsFileNumber
      , "filing_form" .= inlineResponseDefault5ResultsFilingForm
      , "image_number" .= inlineResponseDefault5ResultsImageNumber
      , "line_number" .= inlineResponseDefault5ResultsLineNumber
      , "link_id" .= inlineResponseDefault5ResultsLinkId
      , "load_date" .= inlineResponseDefault5ResultsLoadDate
      , "memo_code" .= inlineResponseDefault5ResultsMemoCode
      , "memo_code_full" .= inlineResponseDefault5ResultsMemoCodeFull
      , "memo_text" .= inlineResponseDefault5ResultsMemoText
      , "original_sub_id" .= inlineResponseDefault5ResultsOriginalSubId
      , "payee_first_name" .= inlineResponseDefault5ResultsPayeeFirstName
      , "payee_last_name" .= inlineResponseDefault5ResultsPayeeLastName
      , "payee_middle_name" .= inlineResponseDefault5ResultsPayeeMiddleName
      , "payee_name" .= inlineResponseDefault5ResultsPayeeName
      , "pdf_url" .= inlineResponseDefault5ResultsPdfUrl
      , "report_type" .= inlineResponseDefault5ResultsReportType
      , "report_year" .= inlineResponseDefault5ResultsReportYear
      , "schedule_type" .= inlineResponseDefault5ResultsScheduleType
      , "schedule_type_full" .= inlineResponseDefault5ResultsScheduleTypeFull
      , "sub_id" .= inlineResponseDefault5ResultsSubId
      , "subordinate_committee" .= inlineResponseDefault5ResultsSubordinateCommittee
      , "subordinate_committee_id" .= inlineResponseDefault5ResultsSubordinateCommitteeId
      , "transaction_id" .= inlineResponseDefault5ResultsTransactionId
      , "unlimited_spending_flag" .= inlineResponseDefault5ResultsUnlimitedSpendingFlag
      , "unlimited_spending_flag_full" .= inlineResponseDefault5ResultsUnlimitedSpendingFlagFull
      ]


-- | Construct a value of type 'InlineResponseDefault5Results' (by applying it's required fields, if any)
mkInlineResponseDefault5Results
  :: InlineResponseDefault5Results
mkInlineResponseDefault5Results =
  InlineResponseDefault5Results
  { inlineResponseDefault5ResultsActionCode = Nothing
  , inlineResponseDefault5ResultsActionCodeFull = Nothing
  , inlineResponseDefault5ResultsAggregateGeneralElectionExpenditure = Nothing
  , inlineResponseDefault5ResultsBackReferenceScheduleName = Nothing
  , inlineResponseDefault5ResultsBackReferenceTransactionId = Nothing
  , inlineResponseDefault5ResultsCandidateFirstName = Nothing
  , inlineResponseDefault5ResultsCandidateId = Nothing
  , inlineResponseDefault5ResultsCandidateLastName = Nothing
  , inlineResponseDefault5ResultsCandidateMiddleName = Nothing
  , inlineResponseDefault5ResultsCandidateName = Nothing
  , inlineResponseDefault5ResultsCandidateOffice = Nothing
  , inlineResponseDefault5ResultsCandidateOfficeDistrict = Nothing
  , inlineResponseDefault5ResultsCandidateOfficeFull = Nothing
  , inlineResponseDefault5ResultsCandidateOfficeState = Nothing
  , inlineResponseDefault5ResultsCandidateOfficeStateFull = Nothing
  , inlineResponseDefault5ResultsCandidatePrefix = Nothing
  , inlineResponseDefault5ResultsCandidateSuffix = Nothing
  , inlineResponseDefault5ResultsCatologCode = Nothing
  , inlineResponseDefault5ResultsCatologCodeFull = Nothing
  , inlineResponseDefault5ResultsCommittee = Nothing
  , inlineResponseDefault5ResultsCommitteeDesignatedCoordinatedExpenditureIndicator = Nothing
  , inlineResponseDefault5ResultsCommitteeId = Nothing
  , inlineResponseDefault5ResultsCommitteeName = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeCity = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeId = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeName = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeState = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeStreet1 = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeStreet2 = Nothing
  , inlineResponseDefault5ResultsConduitCommitteeZip = Nothing
  , inlineResponseDefault5ResultsDesignatedCommitteeId = Nothing
  , inlineResponseDefault5ResultsDesignatedCommitteeName = Nothing
  , inlineResponseDefault5ResultsElectionCycle = Nothing
  , inlineResponseDefault5ResultsEntityType = Nothing
  , inlineResponseDefault5ResultsEntityTypeDesc = Nothing
  , inlineResponseDefault5ResultsExpenditureAmount = Nothing
  , inlineResponseDefault5ResultsExpenditureDate = Nothing
  , inlineResponseDefault5ResultsExpenditurePurposeFull = Nothing
  , inlineResponseDefault5ResultsExpenditureType = Nothing
  , inlineResponseDefault5ResultsExpenditureTypeFull = Nothing
  , inlineResponseDefault5ResultsFileNumber = Nothing
  , inlineResponseDefault5ResultsFilingForm = Nothing
  , inlineResponseDefault5ResultsImageNumber = Nothing
  , inlineResponseDefault5ResultsLineNumber = Nothing
  , inlineResponseDefault5ResultsLinkId = Nothing
  , inlineResponseDefault5ResultsLoadDate = Nothing
  , inlineResponseDefault5ResultsMemoCode = Nothing
  , inlineResponseDefault5ResultsMemoCodeFull = Nothing
  , inlineResponseDefault5ResultsMemoText = Nothing
  , inlineResponseDefault5ResultsOriginalSubId = Nothing
  , inlineResponseDefault5ResultsPayeeFirstName = Nothing
  , inlineResponseDefault5ResultsPayeeLastName = Nothing
  , inlineResponseDefault5ResultsPayeeMiddleName = Nothing
  , inlineResponseDefault5ResultsPayeeName = Nothing
  , inlineResponseDefault5ResultsPdfUrl = Nothing
  , inlineResponseDefault5ResultsReportType = Nothing
  , inlineResponseDefault5ResultsReportYear = Nothing
  , inlineResponseDefault5ResultsScheduleType = Nothing
  , inlineResponseDefault5ResultsScheduleTypeFull = Nothing
  , inlineResponseDefault5ResultsSubId = Nothing
  , inlineResponseDefault5ResultsSubordinateCommittee = Nothing
  , inlineResponseDefault5ResultsSubordinateCommitteeId = Nothing
  , inlineResponseDefault5ResultsTransactionId = Nothing
  , inlineResponseDefault5ResultsUnlimitedSpendingFlag = Nothing
  , inlineResponseDefault5ResultsUnlimitedSpendingFlagFull = Nothing
  }

-- ** OffsetInfo
-- | OffsetInfo
data OffsetInfo = OffsetInfo
  { offsetInfoCount   :: !(Maybe Int) -- ^ "count"
  , offsetInfoPage    :: !(Maybe Int) -- ^ "page"
  , offsetInfoPages   :: !(Maybe Int) -- ^ "pages"
  , offsetInfoPerPage :: !(Maybe Int) -- ^ "per_page"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON OffsetInfo
instance A.FromJSON OffsetInfo where
  parseJSON = A.withObject "OffsetInfo" $ \o ->
    OffsetInfo
      <$> (o .:? "count")
      <*> (o .:? "page")
      <*> (o .:? "pages")
      <*> (o .:? "per_page")

-- | ToJSON OffsetInfo
instance A.ToJSON OffsetInfo where
  toJSON OffsetInfo {..} =
   _omitNulls
      [ "count" .= offsetInfoCount
      , "page" .= offsetInfoPage
      , "pages" .= offsetInfoPages
      , "per_page" .= offsetInfoPerPage
      ]


-- | Construct a value of type 'OffsetInfo' (by applying it's required fields, if any)
mkOffsetInfo
  :: OffsetInfo
mkOffsetInfo =
  OffsetInfo
  { offsetInfoCount = Nothing
  , offsetInfoPage = Nothing
  , offsetInfoPages = Nothing
  , offsetInfoPerPage = Nothing
  }

-- ** OperationsLog
-- | OperationsLog
data OperationsLog = OperationsLog
  { operationsLogAmendmentIndicator          :: !(Maybe Text) -- ^ "amendment_indicator" - Type of the report.N(new), A(amended) or T(cancel)
  , operationsLogBeginningImageNumber        :: !(Maybe Text) -- ^ "beginning_image_number" -  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document.
  , operationsLogCandidateCommitteeId        :: !(Maybe Text) -- ^ "candidate_committee_id" -  A unique identifier of the registered filer.
  , operationsLogCoverageEndDate             :: !(Maybe DateTime) -- ^ "coverage_end_date" - Ending date of the reporting period
  , operationsLogCoverageStartDate           :: !(Maybe DateTime) -- ^ "coverage_start_date" - Beginning date of the reporting period
  , operationsLogEndingImageNumber           :: !(Maybe Text) -- ^ "ending_image_number" - Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.
  , operationsLogFormType                    :: !(Maybe Text) -- ^ "form_type" -  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc...
  , operationsLogReceiptDate                 :: !(Maybe DateTime) -- ^ "receipt_date" - Date the FEC received the electronic or paper record
  , operationsLogReportType                  :: !(Maybe Text) -- ^ "report_type" - Monthly, quarterly or other period covered reports
  , operationsLogReportYear                  :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , operationsLogStatusNum                   :: !(Maybe Int) -- ^ "status_num" -  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified.
  , operationsLogSubId                       :: !(Maybe Int) -- ^ "sub_id" -  A unique identifier of the transactional report.
  , operationsLogSummaryDataCompleteDate     :: !(Maybe DateTime) -- ^ "summary_data_complete_date" - Date when the report is entered into the database
  , operationsLogSummaryDataVerificationDate :: !(Maybe DateTime) -- ^ "summary_data_verification_date" - Same day or a day after the report is loaded in the database
  , operationsLogTransactionDataCompleteDate :: !(Maybe Date) -- ^ "transaction_data_complete_date" - Date when the report is processed completely
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON OperationsLog
instance A.FromJSON OperationsLog where
  parseJSON = A.withObject "OperationsLog" $ \o ->
    OperationsLog
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "candidate_committee_id")
      <*> (o .:? "coverage_end_date")
      <*> (o .:? "coverage_start_date")
      <*> (o .:? "ending_image_number")
      <*> (o .:? "form_type")
      <*> (o .:? "receipt_date")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "status_num")
      <*> (o .:? "sub_id")
      <*> (o .:? "summary_data_complete_date")
      <*> (o .:? "summary_data_verification_date")
      <*> (o .:? "transaction_data_complete_date")

-- | ToJSON OperationsLog
instance A.ToJSON OperationsLog where
  toJSON OperationsLog {..} =
   _omitNulls
      [ "amendment_indicator" .= operationsLogAmendmentIndicator
      , "beginning_image_number" .= operationsLogBeginningImageNumber
      , "candidate_committee_id" .= operationsLogCandidateCommitteeId
      , "coverage_end_date" .= operationsLogCoverageEndDate
      , "coverage_start_date" .= operationsLogCoverageStartDate
      , "ending_image_number" .= operationsLogEndingImageNumber
      , "form_type" .= operationsLogFormType
      , "receipt_date" .= operationsLogReceiptDate
      , "report_type" .= operationsLogReportType
      , "report_year" .= operationsLogReportYear
      , "status_num" .= operationsLogStatusNum
      , "sub_id" .= operationsLogSubId
      , "summary_data_complete_date" .= operationsLogSummaryDataCompleteDate
      , "summary_data_verification_date" .= operationsLogSummaryDataVerificationDate
      , "transaction_data_complete_date" .= operationsLogTransactionDataCompleteDate
      ]


-- | Construct a value of type 'OperationsLog' (by applying it's required fields, if any)
mkOperationsLog
  :: OperationsLog
mkOperationsLog =
  OperationsLog
  { operationsLogAmendmentIndicator = Nothing
  , operationsLogBeginningImageNumber = Nothing
  , operationsLogCandidateCommitteeId = Nothing
  , operationsLogCoverageEndDate = Nothing
  , operationsLogCoverageStartDate = Nothing
  , operationsLogEndingImageNumber = Nothing
  , operationsLogFormType = Nothing
  , operationsLogReceiptDate = Nothing
  , operationsLogReportType = Nothing
  , operationsLogReportYear = Nothing
  , operationsLogStatusNum = Nothing
  , operationsLogSubId = Nothing
  , operationsLogSummaryDataCompleteDate = Nothing
  , operationsLogSummaryDataVerificationDate = Nothing
  , operationsLogTransactionDataCompleteDate = Nothing
  }

-- ** OperationsLogPage
-- | OperationsLogPage
data OperationsLogPage = OperationsLogPage
  { operationsLogPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , operationsLogPageResults    :: !(Maybe [OperationsLog]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON OperationsLogPage
instance A.FromJSON OperationsLogPage where
  parseJSON = A.withObject "OperationsLogPage" $ \o ->
    OperationsLogPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON OperationsLogPage
instance A.ToJSON OperationsLogPage where
  toJSON OperationsLogPage {..} =
   _omitNulls
      [ "pagination" .= operationsLogPagePagination
      , "results" .= operationsLogPageResults
      ]


-- | Construct a value of type 'OperationsLogPage' (by applying it's required fields, if any)
mkOperationsLogPage
  :: OperationsLogPage
mkOperationsLogPage =
  OperationsLogPage
  { operationsLogPagePagination = Nothing
  , operationsLogPageResults = Nothing
  }

-- ** RadAnalyst
-- | RadAnalyst
data RadAnalyst = RadAnalyst
  { radAnalystAnalystEmail         :: !(Maybe Text) -- ^ "analyst_email" - Email of RAD analyst
  , radAnalystAnalystId            :: !(Maybe Double) -- ^ "analyst_id" - ID of RAD analyst.
  , radAnalystAnalystShortId       :: !(Maybe Double) -- ^ "analyst_short_id" - Short ID of RAD analyst.
  , radAnalystAnalystTitle         :: !(Maybe Text) -- ^ "analyst_title" - Title of RAD analyst
  , radAnalystAssignmentUpdateDate :: !(Maybe Date) -- ^ "assignment_update_date" - Date of most recent RAD analyst assignment change
  , radAnalystCommitteeId          :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , radAnalystCommitteeName        :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , radAnalystFirstName            :: !(Maybe Text) -- ^ "first_name" - Fist name of RAD analyst
  , radAnalystLastName             :: !(Maybe Text) -- ^ "last_name" - Last name of RAD analyst
  , radAnalystRadBranch            :: !(Maybe Text) -- ^ "rad_branch" - Branch of RAD analyst
  , radAnalystTelephoneExt         :: !(Maybe Double) -- ^ "telephone_ext" - Telephone extension of RAD analyst
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RadAnalyst
instance A.FromJSON RadAnalyst where
  parseJSON = A.withObject "RadAnalyst" $ \o ->
    RadAnalyst
      <$> (o .:? "analyst_email")
      <*> (o .:? "analyst_id")
      <*> (o .:? "analyst_short_id")
      <*> (o .:? "analyst_title")
      <*> (o .:? "assignment_update_date")
      <*> (o .:  "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "first_name")
      <*> (o .:? "last_name")
      <*> (o .:? "rad_branch")
      <*> (o .:? "telephone_ext")

-- | ToJSON RadAnalyst
instance A.ToJSON RadAnalyst where
  toJSON RadAnalyst {..} =
   _omitNulls
      [ "analyst_email" .= radAnalystAnalystEmail
      , "analyst_id" .= radAnalystAnalystId
      , "analyst_short_id" .= radAnalystAnalystShortId
      , "analyst_title" .= radAnalystAnalystTitle
      , "assignment_update_date" .= radAnalystAssignmentUpdateDate
      , "committee_id" .= radAnalystCommitteeId
      , "committee_name" .= radAnalystCommitteeName
      , "first_name" .= radAnalystFirstName
      , "last_name" .= radAnalystLastName
      , "rad_branch" .= radAnalystRadBranch
      , "telephone_ext" .= radAnalystTelephoneExt
      ]


-- | Construct a value of type 'RadAnalyst' (by applying it's required fields, if any)
mkRadAnalyst
  :: Text -- ^ 'radAnalystCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> RadAnalyst
mkRadAnalyst radAnalystCommitteeId =
  RadAnalyst
  { radAnalystAnalystEmail = Nothing
  , radAnalystAnalystId = Nothing
  , radAnalystAnalystShortId = Nothing
  , radAnalystAnalystTitle = Nothing
  , radAnalystAssignmentUpdateDate = Nothing
  , radAnalystCommitteeId
  , radAnalystCommitteeName = Nothing
  , radAnalystFirstName = Nothing
  , radAnalystLastName = Nothing
  , radAnalystRadBranch = Nothing
  , radAnalystTelephoneExt = Nothing
  }

-- ** RadAnalystPage
-- | RadAnalystPage
data RadAnalystPage = RadAnalystPage
  { radAnalystPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , radAnalystPageResults    :: !(Maybe [RadAnalyst]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RadAnalystPage
instance A.FromJSON RadAnalystPage where
  parseJSON = A.withObject "RadAnalystPage" $ \o ->
    RadAnalystPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON RadAnalystPage
instance A.ToJSON RadAnalystPage where
  toJSON RadAnalystPage {..} =
   _omitNulls
      [ "pagination" .= radAnalystPagePagination
      , "results" .= radAnalystPageResults
      ]


-- | Construct a value of type 'RadAnalystPage' (by applying it's required fields, if any)
mkRadAnalystPage
  :: RadAnalystPage
mkRadAnalystPage =
  RadAnalystPage
  { radAnalystPagePagination = Nothing
  , radAnalystPageResults = Nothing
  }

-- ** ReportDate
-- | ReportDate
data ReportDate = ReportDate
  { reportDateCreateDate     :: !(Maybe Date) -- ^ "create_date" - Date the record was created
  , reportDateDueDate        :: !(Maybe Date) -- ^ "due_date" - Date the report is due
  , reportDateReportType     :: !(Maybe Text) -- ^ "report_type"
  , reportDateReportTypeFull :: !(Maybe Text) -- ^ "report_type_full"
  , reportDateReportYear     :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , reportDateUpdateDate     :: !(Maybe Date) -- ^ "update_date" - Date the record was updated
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ReportDate
instance A.FromJSON ReportDate where
  parseJSON = A.withObject "ReportDate" $ \o ->
    ReportDate
      <$> (o .:? "create_date")
      <*> (o .:? "due_date")
      <*> (o .:? "report_type")
      <*> (o .:? "report_type_full")
      <*> (o .:? "report_year")
      <*> (o .:? "update_date")

-- | ToJSON ReportDate
instance A.ToJSON ReportDate where
  toJSON ReportDate {..} =
   _omitNulls
      [ "create_date" .= reportDateCreateDate
      , "due_date" .= reportDateDueDate
      , "report_type" .= reportDateReportType
      , "report_type_full" .= reportDateReportTypeFull
      , "report_year" .= reportDateReportYear
      , "update_date" .= reportDateUpdateDate
      ]


-- | Construct a value of type 'ReportDate' (by applying it's required fields, if any)
mkReportDate
  :: ReportDate
mkReportDate =
  ReportDate
  { reportDateCreateDate = Nothing
  , reportDateDueDate = Nothing
  , reportDateReportType = Nothing
  , reportDateReportTypeFull = Nothing
  , reportDateReportYear = Nothing
  , reportDateUpdateDate = Nothing
  }

-- ** ReportDatePage
-- | ReportDatePage
data ReportDatePage = ReportDatePage
  { reportDatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , reportDatePageResults    :: !(Maybe [ReportDate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ReportDatePage
instance A.FromJSON ReportDatePage where
  parseJSON = A.withObject "ReportDatePage" $ \o ->
    ReportDatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ReportDatePage
instance A.ToJSON ReportDatePage where
  toJSON ReportDatePage {..} =
   _omitNulls
      [ "pagination" .= reportDatePagePagination
      , "results" .= reportDatePageResults
      ]


-- | Construct a value of type 'ReportDatePage' (by applying it's required fields, if any)
mkReportDatePage
  :: ReportDatePage
mkReportDatePage =
  ReportDatePage
  { reportDatePagePagination = Nothing
  , reportDatePageResults = Nothing
  }

-- ** ReportType
-- | ReportType
data ReportType = ReportType
  { reportTypeReportType     :: !(Text) -- ^ /Required/ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , reportTypeReportTypeFull :: !(Maybe Text) -- ^ "report_type_full" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ReportType
instance A.FromJSON ReportType where
  parseJSON = A.withObject "ReportType" $ \o ->
    ReportType
      <$> (o .:  "report_type")
      <*> (o .:? "report_type_full")

-- | ToJSON ReportType
instance A.ToJSON ReportType where
  toJSON ReportType {..} =
   _omitNulls
      [ "report_type" .= reportTypeReportType
      , "report_type_full" .= reportTypeReportTypeFull
      ]


-- | Construct a value of type 'ReportType' (by applying it's required fields, if any)
mkReportType
  :: Text -- ^ 'reportTypeReportType': Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  -> ReportType
mkReportType reportTypeReportType =
  ReportType
  { reportTypeReportType
  , reportTypeReportTypeFull = Nothing
  }

-- ** ScheduleA
-- | ScheduleA
data ScheduleA = ScheduleA
  { scheduleAAmendmentIndicator                 :: !(Maybe Text) -- ^ "amendment_indicator"
  , scheduleAAmendmentIndicatorDesc             :: !(Maybe Text) -- ^ "amendment_indicator_desc"
  , scheduleABackReferenceScheduleName          :: !(Maybe Text) -- ^ "back_reference_schedule_name"
  , scheduleABackReferenceTransactionId         :: !(Maybe Text) -- ^ "back_reference_transaction_id"
  , scheduleACandidateFirstName                 :: !(Maybe Text) -- ^ "candidate_first_name"
  , scheduleACandidateId                        :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , scheduleACandidateLastName                  :: !(Maybe Text) -- ^ "candidate_last_name"
  , scheduleACandidateMiddleName                :: !(Maybe Text) -- ^ "candidate_middle_name"
  , scheduleACandidateName                      :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , scheduleACandidateOffice                    :: !(Maybe Text) -- ^ "candidate_office"
  , scheduleACandidateOfficeDistrict            :: !(Maybe Text) -- ^ "candidate_office_district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , scheduleACandidateOfficeFull                :: !(Maybe Text) -- ^ "candidate_office_full"
  , scheduleACandidateOfficeState               :: !(Maybe Text) -- ^ "candidate_office_state"
  , scheduleACandidateOfficeStateFull           :: !(Maybe Text) -- ^ "candidate_office_state_full"
  , scheduleACandidatePrefix                    :: !(Maybe Text) -- ^ "candidate_prefix"
  , scheduleACandidateSuffix                    :: !(Maybe Text) -- ^ "candidate_suffix"
  , scheduleACommittee                          :: !(Maybe CommitteeHistory) -- ^ "committee"
  , scheduleACommitteeId                        :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleACommitteeName                      :: !(Maybe Text) -- ^ "committee_name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , scheduleAConduitCommitteeCity               :: !(Maybe Text) -- ^ "conduit_committee_city"
  , scheduleAConduitCommitteeId                 :: !(Maybe Text) -- ^ "conduit_committee_id"
  , scheduleAConduitCommitteeName               :: !(Maybe Text) -- ^ "conduit_committee_name"
  , scheduleAConduitCommitteeState              :: !(Maybe Text) -- ^ "conduit_committee_state"
  , scheduleAConduitCommitteeStreet1            :: !(Maybe Text) -- ^ "conduit_committee_street1"
  , scheduleAConduitCommitteeStreet2            :: !(Maybe Text) -- ^ "conduit_committee_street2"
  , scheduleAConduitCommitteeZip                :: !(Maybe Int) -- ^ "conduit_committee_zip"
  , scheduleAContributionReceiptAmount          :: !(Maybe Double) -- ^ "contribution_receipt_amount"
  , scheduleAContributionReceiptDate            :: !(Maybe Date) -- ^ "contribution_receipt_date"
  , scheduleAContributor                        :: !(Maybe CommitteeHistory) -- ^ "contributor"
  , scheduleAContributorAggregateYtd            :: !(Maybe Double) -- ^ "contributor_aggregate_ytd"
  , scheduleAContributorCity                    :: !(Maybe Text) -- ^ "contributor_city" - City of contributor
  , scheduleAContributorEmployer                :: !(Maybe Text) -- ^ "contributor_employer" - Employer of contributor, filers need to make an effort to gather this information
  , scheduleAContributorFirstName               :: !(Maybe Text) -- ^ "contributor_first_name"
  , scheduleAContributorId                      :: !(Maybe Text) -- ^ "contributor_id" - The FEC identifier should be represented here if the contributor is registered with the FEC.
  , scheduleAContributorLastName                :: !(Maybe Text) -- ^ "contributor_last_name"
  , scheduleAContributorMiddleName              :: !(Maybe Text) -- ^ "contributor_middle_name"
  , scheduleAContributorName                    :: !(Maybe Text) -- ^ "contributor_name" - Name of contributor
  , scheduleAContributorOccupation              :: !(Maybe Text) -- ^ "contributor_occupation" - Occupation of contributor, filers need to make an effort to gather this information
  , scheduleAContributorPrefix                  :: !(Maybe Text) -- ^ "contributor_prefix"
  , scheduleAContributorState                   :: !(Maybe Text) -- ^ "contributor_state" - State of contributor
  , scheduleAContributorStreet1                 :: !(Maybe Text) -- ^ "contributor_street_1"
  , scheduleAContributorStreet2                 :: !(Maybe Text) -- ^ "contributor_street_2"
  , scheduleAContributorSuffix                  :: !(Maybe Text) -- ^ "contributor_suffix"
  , scheduleAContributorZip                     :: !(Maybe Text) -- ^ "contributor_zip" - Zip code of contributor
  , scheduleADonorCommitteeName                 :: !(Maybe Text) -- ^ "donor_committee_name"
  , scheduleAElectionType                       :: !(Maybe Text) -- ^ "election_type"
  , scheduleAElectionTypeFull                   :: !(Maybe Text) -- ^ "election_type_full"
  , scheduleAEntityType                         :: !(Maybe Text) -- ^ "entity_type"
  , scheduleAEntityTypeDesc                     :: !(Maybe Text) -- ^ "entity_type_desc"
  , scheduleAFecElectionTypeDesc                :: !(Maybe Text) -- ^ "fec_election_type_desc"
  , scheduleAFecElectionYear                    :: !(Maybe Text) -- ^ "fec_election_year"
  , scheduleAFileNumber                         :: !(Maybe Int) -- ^ "file_number"
  , scheduleAFilingForm                         :: !(Maybe Text) -- ^ "filing_form"
  , scheduleAImageNumber                        :: !(Maybe Text) -- ^ "image_number"
  , scheduleAIncreasedLimit                     :: !(Maybe Text) -- ^ "increased_limit"
  , scheduleAIsIndividual                       :: !(Maybe Bool) -- ^ "is_individual"
  , scheduleALineNumber                         :: !(Maybe Text) -- ^ "line_number"
  , scheduleALineNumberLabel                    :: !(Maybe Text) -- ^ "line_number_label"
  , scheduleALinkId                             :: !(Maybe Int) -- ^ "link_id"
  , scheduleALoadDate                           :: !(Maybe DateTime) -- ^ "load_date"
  , scheduleAMemoCode                           :: !(Maybe Text) -- ^ "memo_code"
  , scheduleAMemoCodeFull                       :: !(Maybe Text) -- ^ "memo_code_full"
  , scheduleAMemoText                           :: !(Maybe Text) -- ^ "memo_text"
  , scheduleAMemoedSubtotal                     :: !(Maybe Bool) -- ^ "memoed_subtotal"
  , scheduleANationalCommitteeNonfederalAccount :: !(Maybe Text) -- ^ "national_committee_nonfederal_account"
  , scheduleAOriginalSubId                      :: !(Maybe Text) -- ^ "original_sub_id"
  , scheduleAPdfUrl                             :: !(Maybe Text) -- ^ "pdf_url"
  , scheduleAReceiptType                        :: !(Maybe Text) -- ^ "receipt_type"
  , scheduleAReceiptTypeDesc                    :: !(Maybe Text) -- ^ "receipt_type_desc"
  , scheduleAReceiptTypeFull                    :: !(Maybe Text) -- ^ "receipt_type_full"
  , scheduleAReportType                         :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , scheduleAReportYear                         :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , scheduleAScheduleType                       :: !(Maybe Text) -- ^ "schedule_type"
  , scheduleAScheduleTypeFull                   :: !(Maybe Text) -- ^ "schedule_type_full"
  , scheduleASubId                              :: !(Maybe Text) -- ^ "sub_id"
  , scheduleATransactionId                      :: !(Maybe Text) -- ^ "transaction_id"
  , scheduleATwoYearTransactionPeriod           :: !(Maybe Int) -- ^ "two_year_transaction_period" -  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.
  , scheduleAUnusedContbrId                     :: !(Maybe Text) -- ^ "unused_contbr_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleA
instance A.FromJSON ScheduleA where
  parseJSON = A.withObject "ScheduleA" $ \o ->
    ScheduleA
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_indicator_desc")
      <*> (o .:? "back_reference_schedule_name")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_full")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "candidate_office_state_full")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "conduit_committee_city")
      <*> (o .:? "conduit_committee_id")
      <*> (o .:? "conduit_committee_name")
      <*> (o .:? "conduit_committee_state")
      <*> (o .:? "conduit_committee_street1")
      <*> (o .:? "conduit_committee_street2")
      <*> (o .:? "conduit_committee_zip")
      <*> (o .:? "contribution_receipt_amount")
      <*> (o .:? "contribution_receipt_date")
      <*> (o .:? "contributor")
      <*> (o .:? "contributor_aggregate_ytd")
      <*> (o .:? "contributor_city")
      <*> (o .:? "contributor_employer")
      <*> (o .:? "contributor_first_name")
      <*> (o .:? "contributor_id")
      <*> (o .:? "contributor_last_name")
      <*> (o .:? "contributor_middle_name")
      <*> (o .:? "contributor_name")
      <*> (o .:? "contributor_occupation")
      <*> (o .:? "contributor_prefix")
      <*> (o .:? "contributor_state")
      <*> (o .:? "contributor_street_1")
      <*> (o .:? "contributor_street_2")
      <*> (o .:? "contributor_suffix")
      <*> (o .:? "contributor_zip")
      <*> (o .:? "donor_committee_name")
      <*> (o .:? "election_type")
      <*> (o .:? "election_type_full")
      <*> (o .:? "entity_type")
      <*> (o .:? "entity_type_desc")
      <*> (o .:? "fec_election_type_desc")
      <*> (o .:? "fec_election_year")
      <*> (o .:? "file_number")
      <*> (o .:? "filing_form")
      <*> (o .:? "image_number")
      <*> (o .:? "increased_limit")
      <*> (o .:? "is_individual")
      <*> (o .:? "line_number")
      <*> (o .:? "line_number_label")
      <*> (o .:? "link_id")
      <*> (o .:? "load_date")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_code_full")
      <*> (o .:? "memo_text")
      <*> (o .:? "memoed_subtotal")
      <*> (o .:? "national_committee_nonfederal_account")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "pdf_url")
      <*> (o .:? "receipt_type")
      <*> (o .:? "receipt_type_desc")
      <*> (o .:? "receipt_type_full")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "sub_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "two_year_transaction_period")
      <*> (o .:? "unused_contbr_id")

-- | ToJSON ScheduleA
instance A.ToJSON ScheduleA where
  toJSON ScheduleA {..} =
   _omitNulls
      [ "amendment_indicator" .= scheduleAAmendmentIndicator
      , "amendment_indicator_desc" .= scheduleAAmendmentIndicatorDesc
      , "back_reference_schedule_name" .= scheduleABackReferenceScheduleName
      , "back_reference_transaction_id" .= scheduleABackReferenceTransactionId
      , "candidate_first_name" .= scheduleACandidateFirstName
      , "candidate_id" .= scheduleACandidateId
      , "candidate_last_name" .= scheduleACandidateLastName
      , "candidate_middle_name" .= scheduleACandidateMiddleName
      , "candidate_name" .= scheduleACandidateName
      , "candidate_office" .= scheduleACandidateOffice
      , "candidate_office_district" .= scheduleACandidateOfficeDistrict
      , "candidate_office_full" .= scheduleACandidateOfficeFull
      , "candidate_office_state" .= scheduleACandidateOfficeState
      , "candidate_office_state_full" .= scheduleACandidateOfficeStateFull
      , "candidate_prefix" .= scheduleACandidatePrefix
      , "candidate_suffix" .= scheduleACandidateSuffix
      , "committee" .= scheduleACommittee
      , "committee_id" .= scheduleACommitteeId
      , "committee_name" .= scheduleACommitteeName
      , "conduit_committee_city" .= scheduleAConduitCommitteeCity
      , "conduit_committee_id" .= scheduleAConduitCommitteeId
      , "conduit_committee_name" .= scheduleAConduitCommitteeName
      , "conduit_committee_state" .= scheduleAConduitCommitteeState
      , "conduit_committee_street1" .= scheduleAConduitCommitteeStreet1
      , "conduit_committee_street2" .= scheduleAConduitCommitteeStreet2
      , "conduit_committee_zip" .= scheduleAConduitCommitteeZip
      , "contribution_receipt_amount" .= scheduleAContributionReceiptAmount
      , "contribution_receipt_date" .= scheduleAContributionReceiptDate
      , "contributor" .= scheduleAContributor
      , "contributor_aggregate_ytd" .= scheduleAContributorAggregateYtd
      , "contributor_city" .= scheduleAContributorCity
      , "contributor_employer" .= scheduleAContributorEmployer
      , "contributor_first_name" .= scheduleAContributorFirstName
      , "contributor_id" .= scheduleAContributorId
      , "contributor_last_name" .= scheduleAContributorLastName
      , "contributor_middle_name" .= scheduleAContributorMiddleName
      , "contributor_name" .= scheduleAContributorName
      , "contributor_occupation" .= scheduleAContributorOccupation
      , "contributor_prefix" .= scheduleAContributorPrefix
      , "contributor_state" .= scheduleAContributorState
      , "contributor_street_1" .= scheduleAContributorStreet1
      , "contributor_street_2" .= scheduleAContributorStreet2
      , "contributor_suffix" .= scheduleAContributorSuffix
      , "contributor_zip" .= scheduleAContributorZip
      , "donor_committee_name" .= scheduleADonorCommitteeName
      , "election_type" .= scheduleAElectionType
      , "election_type_full" .= scheduleAElectionTypeFull
      , "entity_type" .= scheduleAEntityType
      , "entity_type_desc" .= scheduleAEntityTypeDesc
      , "fec_election_type_desc" .= scheduleAFecElectionTypeDesc
      , "fec_election_year" .= scheduleAFecElectionYear
      , "file_number" .= scheduleAFileNumber
      , "filing_form" .= scheduleAFilingForm
      , "image_number" .= scheduleAImageNumber
      , "increased_limit" .= scheduleAIncreasedLimit
      , "is_individual" .= scheduleAIsIndividual
      , "line_number" .= scheduleALineNumber
      , "line_number_label" .= scheduleALineNumberLabel
      , "link_id" .= scheduleALinkId
      , "load_date" .= scheduleALoadDate
      , "memo_code" .= scheduleAMemoCode
      , "memo_code_full" .= scheduleAMemoCodeFull
      , "memo_text" .= scheduleAMemoText
      , "memoed_subtotal" .= scheduleAMemoedSubtotal
      , "national_committee_nonfederal_account" .= scheduleANationalCommitteeNonfederalAccount
      , "original_sub_id" .= scheduleAOriginalSubId
      , "pdf_url" .= scheduleAPdfUrl
      , "receipt_type" .= scheduleAReceiptType
      , "receipt_type_desc" .= scheduleAReceiptTypeDesc
      , "receipt_type_full" .= scheduleAReceiptTypeFull
      , "report_type" .= scheduleAReportType
      , "report_year" .= scheduleAReportYear
      , "schedule_type" .= scheduleAScheduleType
      , "schedule_type_full" .= scheduleAScheduleTypeFull
      , "sub_id" .= scheduleASubId
      , "transaction_id" .= scheduleATransactionId
      , "two_year_transaction_period" .= scheduleATwoYearTransactionPeriod
      , "unused_contbr_id" .= scheduleAUnusedContbrId
      ]


-- | Construct a value of type 'ScheduleA' (by applying it's required fields, if any)
mkScheduleA
  :: ScheduleA
mkScheduleA =
  ScheduleA
  { scheduleAAmendmentIndicator = Nothing
  , scheduleAAmendmentIndicatorDesc = Nothing
  , scheduleABackReferenceScheduleName = Nothing
  , scheduleABackReferenceTransactionId = Nothing
  , scheduleACandidateFirstName = Nothing
  , scheduleACandidateId = Nothing
  , scheduleACandidateLastName = Nothing
  , scheduleACandidateMiddleName = Nothing
  , scheduleACandidateName = Nothing
  , scheduleACandidateOffice = Nothing
  , scheduleACandidateOfficeDistrict = Nothing
  , scheduleACandidateOfficeFull = Nothing
  , scheduleACandidateOfficeState = Nothing
  , scheduleACandidateOfficeStateFull = Nothing
  , scheduleACandidatePrefix = Nothing
  , scheduleACandidateSuffix = Nothing
  , scheduleACommittee = Nothing
  , scheduleACommitteeId = Nothing
  , scheduleACommitteeName = Nothing
  , scheduleAConduitCommitteeCity = Nothing
  , scheduleAConduitCommitteeId = Nothing
  , scheduleAConduitCommitteeName = Nothing
  , scheduleAConduitCommitteeState = Nothing
  , scheduleAConduitCommitteeStreet1 = Nothing
  , scheduleAConduitCommitteeStreet2 = Nothing
  , scheduleAConduitCommitteeZip = Nothing
  , scheduleAContributionReceiptAmount = Nothing
  , scheduleAContributionReceiptDate = Nothing
  , scheduleAContributor = Nothing
  , scheduleAContributorAggregateYtd = Nothing
  , scheduleAContributorCity = Nothing
  , scheduleAContributorEmployer = Nothing
  , scheduleAContributorFirstName = Nothing
  , scheduleAContributorId = Nothing
  , scheduleAContributorLastName = Nothing
  , scheduleAContributorMiddleName = Nothing
  , scheduleAContributorName = Nothing
  , scheduleAContributorOccupation = Nothing
  , scheduleAContributorPrefix = Nothing
  , scheduleAContributorState = Nothing
  , scheduleAContributorStreet1 = Nothing
  , scheduleAContributorStreet2 = Nothing
  , scheduleAContributorSuffix = Nothing
  , scheduleAContributorZip = Nothing
  , scheduleADonorCommitteeName = Nothing
  , scheduleAElectionType = Nothing
  , scheduleAElectionTypeFull = Nothing
  , scheduleAEntityType = Nothing
  , scheduleAEntityTypeDesc = Nothing
  , scheduleAFecElectionTypeDesc = Nothing
  , scheduleAFecElectionYear = Nothing
  , scheduleAFileNumber = Nothing
  , scheduleAFilingForm = Nothing
  , scheduleAImageNumber = Nothing
  , scheduleAIncreasedLimit = Nothing
  , scheduleAIsIndividual = Nothing
  , scheduleALineNumber = Nothing
  , scheduleALineNumberLabel = Nothing
  , scheduleALinkId = Nothing
  , scheduleALoadDate = Nothing
  , scheduleAMemoCode = Nothing
  , scheduleAMemoCodeFull = Nothing
  , scheduleAMemoText = Nothing
  , scheduleAMemoedSubtotal = Nothing
  , scheduleANationalCommitteeNonfederalAccount = Nothing
  , scheduleAOriginalSubId = Nothing
  , scheduleAPdfUrl = Nothing
  , scheduleAReceiptType = Nothing
  , scheduleAReceiptTypeDesc = Nothing
  , scheduleAReceiptTypeFull = Nothing
  , scheduleAReportType = Nothing
  , scheduleAReportYear = Nothing
  , scheduleAScheduleType = Nothing
  , scheduleAScheduleTypeFull = Nothing
  , scheduleASubId = Nothing
  , scheduleATransactionId = Nothing
  , scheduleATwoYearTransactionPeriod = Nothing
  , scheduleAUnusedContbrId = Nothing
  }

-- ** ScheduleAByEmployer
-- | ScheduleAByEmployer
data ScheduleAByEmployer = ScheduleAByEmployer
  { scheduleAByEmployerCommitteeId :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleAByEmployerCount       :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleAByEmployerCycle       :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleAByEmployerEmployer    :: !(Text) -- ^ /Required/ "employer" - Employer of contributor as reported on the committee&#39;s filing
  , scheduleAByEmployerTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByEmployer
instance A.FromJSON ScheduleAByEmployer where
  parseJSON = A.withObject "ScheduleAByEmployer" $ \o ->
    ScheduleAByEmployer
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "employer")
      <*> (o .:? "total")

-- | ToJSON ScheduleAByEmployer
instance A.ToJSON ScheduleAByEmployer where
  toJSON ScheduleAByEmployer {..} =
   _omitNulls
      [ "committee_id" .= scheduleAByEmployerCommitteeId
      , "count" .= scheduleAByEmployerCount
      , "cycle" .= scheduleAByEmployerCycle
      , "employer" .= scheduleAByEmployerEmployer
      , "total" .= scheduleAByEmployerTotal
      ]


-- | Construct a value of type 'ScheduleAByEmployer' (by applying it's required fields, if any)
mkScheduleAByEmployer
  :: Text -- ^ 'scheduleAByEmployerCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleAByEmployerCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleAByEmployerEmployer': Employer of contributor as reported on the committee's filing
  -> ScheduleAByEmployer
mkScheduleAByEmployer scheduleAByEmployerCommitteeId scheduleAByEmployerCycle scheduleAByEmployerEmployer =
  ScheduleAByEmployer
  { scheduleAByEmployerCommitteeId
  , scheduleAByEmployerCount = Nothing
  , scheduleAByEmployerCycle
  , scheduleAByEmployerEmployer
  , scheduleAByEmployerTotal = Nothing
  }

-- ** ScheduleAByEmployerPage
-- | ScheduleAByEmployerPage
data ScheduleAByEmployerPage = ScheduleAByEmployerPage
  { scheduleAByEmployerPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAByEmployerPageResults    :: !(Maybe [ScheduleAByEmployer]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByEmployerPage
instance A.FromJSON ScheduleAByEmployerPage where
  parseJSON = A.withObject "ScheduleAByEmployerPage" $ \o ->
    ScheduleAByEmployerPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAByEmployerPage
instance A.ToJSON ScheduleAByEmployerPage where
  toJSON ScheduleAByEmployerPage {..} =
   _omitNulls
      [ "pagination" .= scheduleAByEmployerPagePagination
      , "results" .= scheduleAByEmployerPageResults
      ]


-- | Construct a value of type 'ScheduleAByEmployerPage' (by applying it's required fields, if any)
mkScheduleAByEmployerPage
  :: ScheduleAByEmployerPage
mkScheduleAByEmployerPage =
  ScheduleAByEmployerPage
  { scheduleAByEmployerPagePagination = Nothing
  , scheduleAByEmployerPageResults = Nothing
  }

-- ** ScheduleAByOccupation
-- | ScheduleAByOccupation
data ScheduleAByOccupation = ScheduleAByOccupation
  { scheduleAByOccupationCommitteeId :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleAByOccupationCount       :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleAByOccupationCycle       :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleAByOccupationOccupation  :: !(Text) -- ^ /Required/ "occupation" - Occupation of contributor as reported on the committee&#39;s filing
  , scheduleAByOccupationTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByOccupation
instance A.FromJSON ScheduleAByOccupation where
  parseJSON = A.withObject "ScheduleAByOccupation" $ \o ->
    ScheduleAByOccupation
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "occupation")
      <*> (o .:? "total")

-- | ToJSON ScheduleAByOccupation
instance A.ToJSON ScheduleAByOccupation where
  toJSON ScheduleAByOccupation {..} =
   _omitNulls
      [ "committee_id" .= scheduleAByOccupationCommitteeId
      , "count" .= scheduleAByOccupationCount
      , "cycle" .= scheduleAByOccupationCycle
      , "occupation" .= scheduleAByOccupationOccupation
      , "total" .= scheduleAByOccupationTotal
      ]


-- | Construct a value of type 'ScheduleAByOccupation' (by applying it's required fields, if any)
mkScheduleAByOccupation
  :: Text -- ^ 'scheduleAByOccupationCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleAByOccupationCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleAByOccupationOccupation': Occupation of contributor as reported on the committee's filing
  -> ScheduleAByOccupation
mkScheduleAByOccupation scheduleAByOccupationCommitteeId scheduleAByOccupationCycle scheduleAByOccupationOccupation =
  ScheduleAByOccupation
  { scheduleAByOccupationCommitteeId
  , scheduleAByOccupationCount = Nothing
  , scheduleAByOccupationCycle
  , scheduleAByOccupationOccupation
  , scheduleAByOccupationTotal = Nothing
  }

-- ** ScheduleAByOccupationPage
-- | ScheduleAByOccupationPage
data ScheduleAByOccupationPage = ScheduleAByOccupationPage
  { scheduleAByOccupationPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAByOccupationPageResults    :: !(Maybe [ScheduleAByOccupation]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByOccupationPage
instance A.FromJSON ScheduleAByOccupationPage where
  parseJSON = A.withObject "ScheduleAByOccupationPage" $ \o ->
    ScheduleAByOccupationPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAByOccupationPage
instance A.ToJSON ScheduleAByOccupationPage where
  toJSON ScheduleAByOccupationPage {..} =
   _omitNulls
      [ "pagination" .= scheduleAByOccupationPagePagination
      , "results" .= scheduleAByOccupationPageResults
      ]


-- | Construct a value of type 'ScheduleAByOccupationPage' (by applying it's required fields, if any)
mkScheduleAByOccupationPage
  :: ScheduleAByOccupationPage
mkScheduleAByOccupationPage =
  ScheduleAByOccupationPage
  { scheduleAByOccupationPagePagination = Nothing
  , scheduleAByOccupationPageResults = Nothing
  }

-- ** ScheduleABySize
-- | ScheduleABySize
data ScheduleABySize = ScheduleABySize
  { scheduleABySizeCommitteeId :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleABySizeCount       :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleABySizeCycle       :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleABySizeSize        :: !(Int) -- ^ /Required/ "size"
  , scheduleABySizeTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleABySize
instance A.FromJSON ScheduleABySize where
  parseJSON = A.withObject "ScheduleABySize" $ \o ->
    ScheduleABySize
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "size")
      <*> (o .:? "total")

-- | ToJSON ScheduleABySize
instance A.ToJSON ScheduleABySize where
  toJSON ScheduleABySize {..} =
   _omitNulls
      [ "committee_id" .= scheduleABySizeCommitteeId
      , "count" .= scheduleABySizeCount
      , "cycle" .= scheduleABySizeCycle
      , "size" .= scheduleABySizeSize
      , "total" .= scheduleABySizeTotal
      ]


-- | Construct a value of type 'ScheduleABySize' (by applying it's required fields, if any)
mkScheduleABySize
  :: Text -- ^ 'scheduleABySizeCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleABySizeCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Int -- ^ 'scheduleABySizeSize'
  -> ScheduleABySize
mkScheduleABySize scheduleABySizeCommitteeId scheduleABySizeCycle scheduleABySizeSize =
  ScheduleABySize
  { scheduleABySizeCommitteeId
  , scheduleABySizeCount = Nothing
  , scheduleABySizeCycle
  , scheduleABySizeSize
  , scheduleABySizeTotal = Nothing
  }

-- ** ScheduleABySizeCandidate
-- | ScheduleABySizeCandidate
data ScheduleABySizeCandidate = ScheduleABySizeCandidate
  { scheduleABySizeCandidateCandidateId :: !(Maybe Text) -- ^ "candidate_id"
  , scheduleABySizeCandidateCycle       :: !(Maybe Int) -- ^ "cycle"
  , scheduleABySizeCandidateSize        :: !(Maybe Int) -- ^ "size"
  , scheduleABySizeCandidateTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleABySizeCandidate
instance A.FromJSON ScheduleABySizeCandidate where
  parseJSON = A.withObject "ScheduleABySizeCandidate" $ \o ->
    ScheduleABySizeCandidate
      <$> (o .:? "candidate_id")
      <*> (o .:? "cycle")
      <*> (o .:? "size")
      <*> (o .:? "total")

-- | ToJSON ScheduleABySizeCandidate
instance A.ToJSON ScheduleABySizeCandidate where
  toJSON ScheduleABySizeCandidate {..} =
   _omitNulls
      [ "candidate_id" .= scheduleABySizeCandidateCandidateId
      , "cycle" .= scheduleABySizeCandidateCycle
      , "size" .= scheduleABySizeCandidateSize
      , "total" .= scheduleABySizeCandidateTotal
      ]


-- | Construct a value of type 'ScheduleABySizeCandidate' (by applying it's required fields, if any)
mkScheduleABySizeCandidate
  :: ScheduleABySizeCandidate
mkScheduleABySizeCandidate =
  ScheduleABySizeCandidate
  { scheduleABySizeCandidateCandidateId = Nothing
  , scheduleABySizeCandidateCycle = Nothing
  , scheduleABySizeCandidateSize = Nothing
  , scheduleABySizeCandidateTotal = Nothing
  }

-- ** ScheduleABySizeCandidatePage
-- | ScheduleABySizeCandidatePage
data ScheduleABySizeCandidatePage = ScheduleABySizeCandidatePage
  { scheduleABySizeCandidatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleABySizeCandidatePageResults :: !(Maybe [ScheduleABySizeCandidate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleABySizeCandidatePage
instance A.FromJSON ScheduleABySizeCandidatePage where
  parseJSON = A.withObject "ScheduleABySizeCandidatePage" $ \o ->
    ScheduleABySizeCandidatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleABySizeCandidatePage
instance A.ToJSON ScheduleABySizeCandidatePage where
  toJSON ScheduleABySizeCandidatePage {..} =
   _omitNulls
      [ "pagination" .= scheduleABySizeCandidatePagePagination
      , "results" .= scheduleABySizeCandidatePageResults
      ]


-- | Construct a value of type 'ScheduleABySizeCandidatePage' (by applying it's required fields, if any)
mkScheduleABySizeCandidatePage
  :: ScheduleABySizeCandidatePage
mkScheduleABySizeCandidatePage =
  ScheduleABySizeCandidatePage
  { scheduleABySizeCandidatePagePagination = Nothing
  , scheduleABySizeCandidatePageResults = Nothing
  }

-- ** ScheduleABySizePage
-- | ScheduleABySizePage
data ScheduleABySizePage = ScheduleABySizePage
  { scheduleABySizePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleABySizePageResults    :: !(Maybe [ScheduleABySize]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleABySizePage
instance A.FromJSON ScheduleABySizePage where
  parseJSON = A.withObject "ScheduleABySizePage" $ \o ->
    ScheduleABySizePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleABySizePage
instance A.ToJSON ScheduleABySizePage where
  toJSON ScheduleABySizePage {..} =
   _omitNulls
      [ "pagination" .= scheduleABySizePagePagination
      , "results" .= scheduleABySizePageResults
      ]


-- | Construct a value of type 'ScheduleABySizePage' (by applying it's required fields, if any)
mkScheduleABySizePage
  :: ScheduleABySizePage
mkScheduleABySizePage =
  ScheduleABySizePage
  { scheduleABySizePagePagination = Nothing
  , scheduleABySizePageResults = Nothing
  }

-- ** ScheduleAByState
-- | ScheduleAByState
data ScheduleAByState = ScheduleAByState
  { scheduleAByStateCommitteeId :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleAByStateCount       :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleAByStateCycle       :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleAByStateState       :: !(Text) -- ^ /Required/ "state" - US state or territory
  , scheduleAByStateStateFull   :: !(Text) -- ^ /Required/ "state_full" - US state or territory
  , scheduleAByStateTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByState
instance A.FromJSON ScheduleAByState where
  parseJSON = A.withObject "ScheduleAByState" $ \o ->
    ScheduleAByState
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "state")
      <*> (o .:  "state_full")
      <*> (o .:? "total")

-- | ToJSON ScheduleAByState
instance A.ToJSON ScheduleAByState where
  toJSON ScheduleAByState {..} =
   _omitNulls
      [ "committee_id" .= scheduleAByStateCommitteeId
      , "count" .= scheduleAByStateCount
      , "cycle" .= scheduleAByStateCycle
      , "state" .= scheduleAByStateState
      , "state_full" .= scheduleAByStateStateFull
      , "total" .= scheduleAByStateTotal
      ]


-- | Construct a value of type 'ScheduleAByState' (by applying it's required fields, if any)
mkScheduleAByState
  :: Text -- ^ 'scheduleAByStateCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleAByStateCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleAByStateState': US state or territory
  -> Text -- ^ 'scheduleAByStateStateFull': US state or territory
  -> ScheduleAByState
mkScheduleAByState scheduleAByStateCommitteeId scheduleAByStateCycle scheduleAByStateState scheduleAByStateStateFull =
  ScheduleAByState
  { scheduleAByStateCommitteeId
  , scheduleAByStateCount = Nothing
  , scheduleAByStateCycle
  , scheduleAByStateState
  , scheduleAByStateStateFull
  , scheduleAByStateTotal = Nothing
  }

-- ** ScheduleAByStateCandidate
-- | ScheduleAByStateCandidate
data ScheduleAByStateCandidate = ScheduleAByStateCandidate
  { scheduleAByStateCandidateCandidateId :: !(Maybe Text) -- ^ "candidate_id"
  , scheduleAByStateCandidateCycle       :: !(Maybe Int) -- ^ "cycle"
  , scheduleAByStateCandidateState       :: !(Maybe Text) -- ^ "state"
  , scheduleAByStateCandidateStateFull   :: !(Maybe Text) -- ^ "state_full"
  , scheduleAByStateCandidateTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByStateCandidate
instance A.FromJSON ScheduleAByStateCandidate where
  parseJSON = A.withObject "ScheduleAByStateCandidate" $ \o ->
    ScheduleAByStateCandidate
      <$> (o .:? "candidate_id")
      <*> (o .:? "cycle")
      <*> (o .:? "state")
      <*> (o .:? "state_full")
      <*> (o .:? "total")

-- | ToJSON ScheduleAByStateCandidate
instance A.ToJSON ScheduleAByStateCandidate where
  toJSON ScheduleAByStateCandidate {..} =
   _omitNulls
      [ "candidate_id" .= scheduleAByStateCandidateCandidateId
      , "cycle" .= scheduleAByStateCandidateCycle
      , "state" .= scheduleAByStateCandidateState
      , "state_full" .= scheduleAByStateCandidateStateFull
      , "total" .= scheduleAByStateCandidateTotal
      ]


-- | Construct a value of type 'ScheduleAByStateCandidate' (by applying it's required fields, if any)
mkScheduleAByStateCandidate
  :: ScheduleAByStateCandidate
mkScheduleAByStateCandidate =
  ScheduleAByStateCandidate
  { scheduleAByStateCandidateCandidateId = Nothing
  , scheduleAByStateCandidateCycle = Nothing
  , scheduleAByStateCandidateState = Nothing
  , scheduleAByStateCandidateStateFull = Nothing
  , scheduleAByStateCandidateTotal = Nothing
  }

-- ** ScheduleAByStateCandidatePage
-- | ScheduleAByStateCandidatePage
data ScheduleAByStateCandidatePage = ScheduleAByStateCandidatePage
  { scheduleAByStateCandidatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAByStateCandidatePageResults :: !(Maybe [ScheduleAByStateCandidate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByStateCandidatePage
instance A.FromJSON ScheduleAByStateCandidatePage where
  parseJSON = A.withObject "ScheduleAByStateCandidatePage" $ \o ->
    ScheduleAByStateCandidatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAByStateCandidatePage
instance A.ToJSON ScheduleAByStateCandidatePage where
  toJSON ScheduleAByStateCandidatePage {..} =
   _omitNulls
      [ "pagination" .= scheduleAByStateCandidatePagePagination
      , "results" .= scheduleAByStateCandidatePageResults
      ]


-- | Construct a value of type 'ScheduleAByStateCandidatePage' (by applying it's required fields, if any)
mkScheduleAByStateCandidatePage
  :: ScheduleAByStateCandidatePage
mkScheduleAByStateCandidatePage =
  ScheduleAByStateCandidatePage
  { scheduleAByStateCandidatePagePagination = Nothing
  , scheduleAByStateCandidatePageResults = Nothing
  }

-- ** ScheduleAByStatePage
-- | ScheduleAByStatePage
data ScheduleAByStatePage = ScheduleAByStatePage
  { scheduleAByStatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAByStatePageResults    :: !(Maybe [ScheduleAByState]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByStatePage
instance A.FromJSON ScheduleAByStatePage where
  parseJSON = A.withObject "ScheduleAByStatePage" $ \o ->
    ScheduleAByStatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAByStatePage
instance A.ToJSON ScheduleAByStatePage where
  toJSON ScheduleAByStatePage {..} =
   _omitNulls
      [ "pagination" .= scheduleAByStatePagePagination
      , "results" .= scheduleAByStatePageResults
      ]


-- | Construct a value of type 'ScheduleAByStatePage' (by applying it's required fields, if any)
mkScheduleAByStatePage
  :: ScheduleAByStatePage
mkScheduleAByStatePage =
  ScheduleAByStatePage
  { scheduleAByStatePagePagination = Nothing
  , scheduleAByStatePageResults = Nothing
  }

-- ** ScheduleAByStateRecipientTotals
-- | ScheduleAByStateRecipientTotals
data ScheduleAByStateRecipientTotals = ScheduleAByStateRecipientTotals
  { scheduleAByStateRecipientTotalsCommitteeType     :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , scheduleAByStateRecipientTotalsCommitteeTypeFull :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , scheduleAByStateRecipientTotalsCount             :: !(Maybe Int) -- ^ "count" - Number of records making up the total.
  , scheduleAByStateRecipientTotalsCycle             :: !(Maybe Int) -- ^ "cycle" -  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year.
  , scheduleAByStateRecipientTotalsState             :: !(Maybe Text) -- ^ "state" - US state or territory
  , scheduleAByStateRecipientTotalsStateFull         :: !(Maybe Text) -- ^ "state_full" - US state or territory
  , scheduleAByStateRecipientTotalsTotal             :: !(Maybe Double) -- ^ "total" - The calculated total.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByStateRecipientTotals
instance A.FromJSON ScheduleAByStateRecipientTotals where
  parseJSON = A.withObject "ScheduleAByStateRecipientTotals" $ \o ->
    ScheduleAByStateRecipientTotals
      <$> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:? "count")
      <*> (o .:? "cycle")
      <*> (o .:? "state")
      <*> (o .:? "state_full")
      <*> (o .:? "total")

-- | ToJSON ScheduleAByStateRecipientTotals
instance A.ToJSON ScheduleAByStateRecipientTotals where
  toJSON ScheduleAByStateRecipientTotals {..} =
   _omitNulls
      [ "committee_type" .= scheduleAByStateRecipientTotalsCommitteeType
      , "committee_type_full" .= scheduleAByStateRecipientTotalsCommitteeTypeFull
      , "count" .= scheduleAByStateRecipientTotalsCount
      , "cycle" .= scheduleAByStateRecipientTotalsCycle
      , "state" .= scheduleAByStateRecipientTotalsState
      , "state_full" .= scheduleAByStateRecipientTotalsStateFull
      , "total" .= scheduleAByStateRecipientTotalsTotal
      ]


-- | Construct a value of type 'ScheduleAByStateRecipientTotals' (by applying it's required fields, if any)
mkScheduleAByStateRecipientTotals
  :: ScheduleAByStateRecipientTotals
mkScheduleAByStateRecipientTotals =
  ScheduleAByStateRecipientTotals
  { scheduleAByStateRecipientTotalsCommitteeType = Nothing
  , scheduleAByStateRecipientTotalsCommitteeTypeFull = Nothing
  , scheduleAByStateRecipientTotalsCount = Nothing
  , scheduleAByStateRecipientTotalsCycle = Nothing
  , scheduleAByStateRecipientTotalsState = Nothing
  , scheduleAByStateRecipientTotalsStateFull = Nothing
  , scheduleAByStateRecipientTotalsTotal = Nothing
  }

-- ** ScheduleAByStateRecipientTotalsPage
-- | ScheduleAByStateRecipientTotalsPage
data ScheduleAByStateRecipientTotalsPage = ScheduleAByStateRecipientTotalsPage
  { scheduleAByStateRecipientTotalsPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAByStateRecipientTotalsPageResults :: !(Maybe [ScheduleAByStateRecipientTotals]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByStateRecipientTotalsPage
instance A.FromJSON ScheduleAByStateRecipientTotalsPage where
  parseJSON = A.withObject "ScheduleAByStateRecipientTotalsPage" $ \o ->
    ScheduleAByStateRecipientTotalsPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAByStateRecipientTotalsPage
instance A.ToJSON ScheduleAByStateRecipientTotalsPage where
  toJSON ScheduleAByStateRecipientTotalsPage {..} =
   _omitNulls
      [ "pagination" .= scheduleAByStateRecipientTotalsPagePagination
      , "results" .= scheduleAByStateRecipientTotalsPageResults
      ]


-- | Construct a value of type 'ScheduleAByStateRecipientTotalsPage' (by applying it's required fields, if any)
mkScheduleAByStateRecipientTotalsPage
  :: ScheduleAByStateRecipientTotalsPage
mkScheduleAByStateRecipientTotalsPage =
  ScheduleAByStateRecipientTotalsPage
  { scheduleAByStateRecipientTotalsPagePagination = Nothing
  , scheduleAByStateRecipientTotalsPageResults = Nothing
  }

-- ** ScheduleAByZip
-- | ScheduleAByZip
data ScheduleAByZip = ScheduleAByZip
  { scheduleAByZipCommitteeId :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleAByZipCount       :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleAByZipCycle       :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleAByZipState       :: !(Maybe Text) -- ^ "state" - US state or territory
  , scheduleAByZipStateFull   :: !(Maybe Text) -- ^ "state_full" - US state or territory
  , scheduleAByZipTotal       :: !(Maybe Double) -- ^ "total"
  , scheduleAByZipZip         :: !(Text) -- ^ /Required/ "zip"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByZip
instance A.FromJSON ScheduleAByZip where
  parseJSON = A.withObject "ScheduleAByZip" $ \o ->
    ScheduleAByZip
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:? "state")
      <*> (o .:? "state_full")
      <*> (o .:? "total")
      <*> (o .:  "zip")

-- | ToJSON ScheduleAByZip
instance A.ToJSON ScheduleAByZip where
  toJSON ScheduleAByZip {..} =
   _omitNulls
      [ "committee_id" .= scheduleAByZipCommitteeId
      , "count" .= scheduleAByZipCount
      , "cycle" .= scheduleAByZipCycle
      , "state" .= scheduleAByZipState
      , "state_full" .= scheduleAByZipStateFull
      , "total" .= scheduleAByZipTotal
      , "zip" .= scheduleAByZipZip
      ]


-- | Construct a value of type 'ScheduleAByZip' (by applying it's required fields, if any)
mkScheduleAByZip
  :: Text -- ^ 'scheduleAByZipCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleAByZipCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleAByZipZip'
  -> ScheduleAByZip
mkScheduleAByZip scheduleAByZipCommitteeId scheduleAByZipCycle scheduleAByZipZip =
  ScheduleAByZip
  { scheduleAByZipCommitteeId
  , scheduleAByZipCount = Nothing
  , scheduleAByZipCycle
  , scheduleAByZipState = Nothing
  , scheduleAByZipStateFull = Nothing
  , scheduleAByZipTotal = Nothing
  , scheduleAByZipZip
  }

-- ** ScheduleAByZipPage
-- | ScheduleAByZipPage
data ScheduleAByZipPage = ScheduleAByZipPage
  { scheduleAByZipPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAByZipPageResults    :: !(Maybe [ScheduleAByZip]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAByZipPage
instance A.FromJSON ScheduleAByZipPage where
  parseJSON = A.withObject "ScheduleAByZipPage" $ \o ->
    ScheduleAByZipPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAByZipPage
instance A.ToJSON ScheduleAByZipPage where
  toJSON ScheduleAByZipPage {..} =
   _omitNulls
      [ "pagination" .= scheduleAByZipPagePagination
      , "results" .= scheduleAByZipPageResults
      ]


-- | Construct a value of type 'ScheduleAByZipPage' (by applying it's required fields, if any)
mkScheduleAByZipPage
  :: ScheduleAByZipPage
mkScheduleAByZipPage =
  ScheduleAByZipPage
  { scheduleAByZipPagePagination = Nothing
  , scheduleAByZipPageResults = Nothing
  }

-- ** ScheduleAEfile
-- | ScheduleAEfile
data ScheduleAEfile = ScheduleAEfile
  { scheduleAEfileAmendmentIndicator         :: !(Maybe Text) -- ^ "amendment_indicator"
  , scheduleAEfileBackReferenceScheduleName  :: !(Maybe Text) -- ^ "back_reference_schedule_name"
  , scheduleAEfileBackReferenceTransactionId :: !(Maybe Text) -- ^ "back_reference_transaction_id"
  , scheduleAEfileBeginningImageNumber       :: !(Maybe Text) -- ^ "beginning_image_number"
  , scheduleAEfileCommittee                  :: !(Maybe CommitteeHistory) -- ^ "committee"
  , scheduleAEfileCommitteeId                :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleAEfileConduitCommitteeCity       :: !(Maybe Text) -- ^ "conduit_committee_city"
  , scheduleAEfileConduitCommitteeId         :: !(Maybe Text) -- ^ "conduit_committee_id"
  , scheduleAEfileConduitCommitteeName       :: !(Maybe Text) -- ^ "conduit_committee_name"
  , scheduleAEfileConduitCommitteeState      :: !(Maybe Text) -- ^ "conduit_committee_state"
  , scheduleAEfileConduitCommitteeStreet1    :: !(Maybe Text) -- ^ "conduit_committee_street1"
  , scheduleAEfileConduitCommitteeStreet2    :: !(Maybe Text) -- ^ "conduit_committee_street2"
  , scheduleAEfileConduitCommitteeZip        :: !(Maybe Int) -- ^ "conduit_committee_zip"
  , scheduleAEfileContributionReceiptAmount  :: !(Maybe Double) -- ^ "contribution_receipt_amount"
  , scheduleAEfileContributionReceiptDate    :: !(Maybe Date) -- ^ "contribution_receipt_date"
  , scheduleAEfileContributorAggregateYtd    :: !(Maybe Double) -- ^ "contributor_aggregate_ytd"
  , scheduleAEfileContributorCity            :: !(Maybe Text) -- ^ "contributor_city" - City of contributor
  , scheduleAEfileContributorEmployer        :: !(Maybe Text) -- ^ "contributor_employer" - Employer of contributor, filers need to make an effort to gather this information
  , scheduleAEfileContributorFirstName       :: !(Maybe Text) -- ^ "contributor_first_name"
  , scheduleAEfileContributorLastName        :: !(Maybe Text) -- ^ "contributor_last_name"
  , scheduleAEfileContributorMiddleName      :: !(Maybe Text) -- ^ "contributor_middle_name"
  , scheduleAEfileContributorName            :: !(Maybe Text) -- ^ "contributor_name"
  , scheduleAEfileContributorOccupation      :: !(Maybe Text) -- ^ "contributor_occupation" - Occupation of contributor, filers need to make an effort to gather this information
  , scheduleAEfileContributorPrefix          :: !(Maybe Text) -- ^ "contributor_prefix"
  , scheduleAEfileContributorState           :: !(Maybe Text) -- ^ "contributor_state" - State of contributor
  , scheduleAEfileContributorSuffix          :: !(Maybe Text) -- ^ "contributor_suffix"
  , scheduleAEfileContributorZip             :: !(Maybe Text) -- ^ "contributor_zip" - Zip code of contributor
  , scheduleAEfileCsvUrl                     :: !(Maybe Text) -- ^ "csv_url"
  , scheduleAEfileCycle                      :: !(Maybe Int) -- ^ "cycle"
  , scheduleAEfileEntityType                 :: !(Maybe Text) -- ^ "entity_type"
  , scheduleAEfileFecElectionTypeDesc        :: !(Maybe Text) -- ^ "fec_election_type_desc"
  , scheduleAEfileFecUrl                     :: !(Maybe Text) -- ^ "fec_url"
  , scheduleAEfileFileNumber                 :: !(Int) -- ^ /Required/ "file_number"
  , scheduleAEfileFiling                     :: !(Maybe EFilings) -- ^ "filing"
  , scheduleAEfileImageNumber                :: !(Maybe Text) -- ^ "image_number" - An unique identifier for each page the electronic or paper report.
  , scheduleAEfileLineNumber                 :: !(Maybe Text) -- ^ "line_number"
  , scheduleAEfileLoadTimestamp              :: !(Maybe DateTime) -- ^ "load_timestamp"
  , scheduleAEfileMemoCode                   :: !(Maybe Text) -- ^ "memo_code"
  , scheduleAEfileMemoText                   :: !(Maybe Text) -- ^ "memo_text"
  , scheduleAEfilePdfUrl                     :: !(Maybe Text) -- ^ "pdf_url"
  , scheduleAEfilePgo                        :: !(Maybe Text) -- ^ "pgo"
  , scheduleAEfileRelatedLineNumber          :: !(Int) -- ^ /Required/ "related_line_number"
  , scheduleAEfileReportType                 :: !(Maybe Text) -- ^ "report_type"
  , scheduleAEfileTransactionId              :: !(Maybe Text) -- ^ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAEfile
instance A.FromJSON ScheduleAEfile where
  parseJSON = A.withObject "ScheduleAEfile" $ \o ->
    ScheduleAEfile
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "back_reference_schedule_name")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "conduit_committee_city")
      <*> (o .:? "conduit_committee_id")
      <*> (o .:? "conduit_committee_name")
      <*> (o .:? "conduit_committee_state")
      <*> (o .:? "conduit_committee_street1")
      <*> (o .:? "conduit_committee_street2")
      <*> (o .:? "conduit_committee_zip")
      <*> (o .:? "contribution_receipt_amount")
      <*> (o .:? "contribution_receipt_date")
      <*> (o .:? "contributor_aggregate_ytd")
      <*> (o .:? "contributor_city")
      <*> (o .:? "contributor_employer")
      <*> (o .:? "contributor_first_name")
      <*> (o .:? "contributor_last_name")
      <*> (o .:? "contributor_middle_name")
      <*> (o .:? "contributor_name")
      <*> (o .:? "contributor_occupation")
      <*> (o .:? "contributor_prefix")
      <*> (o .:? "contributor_state")
      <*> (o .:? "contributor_suffix")
      <*> (o .:? "contributor_zip")
      <*> (o .:? "csv_url")
      <*> (o .:? "cycle")
      <*> (o .:? "entity_type")
      <*> (o .:? "fec_election_type_desc")
      <*> (o .:? "fec_url")
      <*> (o .:  "file_number")
      <*> (o .:? "filing")
      <*> (o .:? "image_number")
      <*> (o .:? "line_number")
      <*> (o .:? "load_timestamp")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_text")
      <*> (o .:? "pdf_url")
      <*> (o .:? "pgo")
      <*> (o .:  "related_line_number")
      <*> (o .:? "report_type")
      <*> (o .:? "transaction_id")

-- | ToJSON ScheduleAEfile
instance A.ToJSON ScheduleAEfile where
  toJSON ScheduleAEfile {..} =
   _omitNulls
      [ "amendment_indicator" .= scheduleAEfileAmendmentIndicator
      , "back_reference_schedule_name" .= scheduleAEfileBackReferenceScheduleName
      , "back_reference_transaction_id" .= scheduleAEfileBackReferenceTransactionId
      , "beginning_image_number" .= scheduleAEfileBeginningImageNumber
      , "committee" .= scheduleAEfileCommittee
      , "committee_id" .= scheduleAEfileCommitteeId
      , "conduit_committee_city" .= scheduleAEfileConduitCommitteeCity
      , "conduit_committee_id" .= scheduleAEfileConduitCommitteeId
      , "conduit_committee_name" .= scheduleAEfileConduitCommitteeName
      , "conduit_committee_state" .= scheduleAEfileConduitCommitteeState
      , "conduit_committee_street1" .= scheduleAEfileConduitCommitteeStreet1
      , "conduit_committee_street2" .= scheduleAEfileConduitCommitteeStreet2
      , "conduit_committee_zip" .= scheduleAEfileConduitCommitteeZip
      , "contribution_receipt_amount" .= scheduleAEfileContributionReceiptAmount
      , "contribution_receipt_date" .= scheduleAEfileContributionReceiptDate
      , "contributor_aggregate_ytd" .= scheduleAEfileContributorAggregateYtd
      , "contributor_city" .= scheduleAEfileContributorCity
      , "contributor_employer" .= scheduleAEfileContributorEmployer
      , "contributor_first_name" .= scheduleAEfileContributorFirstName
      , "contributor_last_name" .= scheduleAEfileContributorLastName
      , "contributor_middle_name" .= scheduleAEfileContributorMiddleName
      , "contributor_name" .= scheduleAEfileContributorName
      , "contributor_occupation" .= scheduleAEfileContributorOccupation
      , "contributor_prefix" .= scheduleAEfileContributorPrefix
      , "contributor_state" .= scheduleAEfileContributorState
      , "contributor_suffix" .= scheduleAEfileContributorSuffix
      , "contributor_zip" .= scheduleAEfileContributorZip
      , "csv_url" .= scheduleAEfileCsvUrl
      , "cycle" .= scheduleAEfileCycle
      , "entity_type" .= scheduleAEfileEntityType
      , "fec_election_type_desc" .= scheduleAEfileFecElectionTypeDesc
      , "fec_url" .= scheduleAEfileFecUrl
      , "file_number" .= scheduleAEfileFileNumber
      , "filing" .= scheduleAEfileFiling
      , "image_number" .= scheduleAEfileImageNumber
      , "line_number" .= scheduleAEfileLineNumber
      , "load_timestamp" .= scheduleAEfileLoadTimestamp
      , "memo_code" .= scheduleAEfileMemoCode
      , "memo_text" .= scheduleAEfileMemoText
      , "pdf_url" .= scheduleAEfilePdfUrl
      , "pgo" .= scheduleAEfilePgo
      , "related_line_number" .= scheduleAEfileRelatedLineNumber
      , "report_type" .= scheduleAEfileReportType
      , "transaction_id" .= scheduleAEfileTransactionId
      ]


-- | Construct a value of type 'ScheduleAEfile' (by applying it's required fields, if any)
mkScheduleAEfile
  :: Int -- ^ 'scheduleAEfileFileNumber'
  -> Int -- ^ 'scheduleAEfileRelatedLineNumber'
  -> ScheduleAEfile
mkScheduleAEfile scheduleAEfileFileNumber scheduleAEfileRelatedLineNumber =
  ScheduleAEfile
  { scheduleAEfileAmendmentIndicator = Nothing
  , scheduleAEfileBackReferenceScheduleName = Nothing
  , scheduleAEfileBackReferenceTransactionId = Nothing
  , scheduleAEfileBeginningImageNumber = Nothing
  , scheduleAEfileCommittee = Nothing
  , scheduleAEfileCommitteeId = Nothing
  , scheduleAEfileConduitCommitteeCity = Nothing
  , scheduleAEfileConduitCommitteeId = Nothing
  , scheduleAEfileConduitCommitteeName = Nothing
  , scheduleAEfileConduitCommitteeState = Nothing
  , scheduleAEfileConduitCommitteeStreet1 = Nothing
  , scheduleAEfileConduitCommitteeStreet2 = Nothing
  , scheduleAEfileConduitCommitteeZip = Nothing
  , scheduleAEfileContributionReceiptAmount = Nothing
  , scheduleAEfileContributionReceiptDate = Nothing
  , scheduleAEfileContributorAggregateYtd = Nothing
  , scheduleAEfileContributorCity = Nothing
  , scheduleAEfileContributorEmployer = Nothing
  , scheduleAEfileContributorFirstName = Nothing
  , scheduleAEfileContributorLastName = Nothing
  , scheduleAEfileContributorMiddleName = Nothing
  , scheduleAEfileContributorName = Nothing
  , scheduleAEfileContributorOccupation = Nothing
  , scheduleAEfileContributorPrefix = Nothing
  , scheduleAEfileContributorState = Nothing
  , scheduleAEfileContributorSuffix = Nothing
  , scheduleAEfileContributorZip = Nothing
  , scheduleAEfileCsvUrl = Nothing
  , scheduleAEfileCycle = Nothing
  , scheduleAEfileEntityType = Nothing
  , scheduleAEfileFecElectionTypeDesc = Nothing
  , scheduleAEfileFecUrl = Nothing
  , scheduleAEfileFileNumber
  , scheduleAEfileFiling = Nothing
  , scheduleAEfileImageNumber = Nothing
  , scheduleAEfileLineNumber = Nothing
  , scheduleAEfileLoadTimestamp = Nothing
  , scheduleAEfileMemoCode = Nothing
  , scheduleAEfileMemoText = Nothing
  , scheduleAEfilePdfUrl = Nothing
  , scheduleAEfilePgo = Nothing
  , scheduleAEfileRelatedLineNumber
  , scheduleAEfileReportType = Nothing
  , scheduleAEfileTransactionId = Nothing
  }

-- ** ScheduleAEfilePage
-- | ScheduleAEfilePage
data ScheduleAEfilePage = ScheduleAEfilePage
  { scheduleAEfilePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleAEfilePageResults    :: !(Maybe [ScheduleAEfile]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAEfilePage
instance A.FromJSON ScheduleAEfilePage where
  parseJSON = A.withObject "ScheduleAEfilePage" $ \o ->
    ScheduleAEfilePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAEfilePage
instance A.ToJSON ScheduleAEfilePage where
  toJSON ScheduleAEfilePage {..} =
   _omitNulls
      [ "pagination" .= scheduleAEfilePagePagination
      , "results" .= scheduleAEfilePageResults
      ]


-- | Construct a value of type 'ScheduleAEfilePage' (by applying it's required fields, if any)
mkScheduleAEfilePage
  :: ScheduleAEfilePage
mkScheduleAEfilePage =
  ScheduleAEfilePage
  { scheduleAEfilePagePagination = Nothing
  , scheduleAEfilePageResults = Nothing
  }

-- ** ScheduleAPage
-- | ScheduleAPage
data ScheduleAPage = ScheduleAPage
  { scheduleAPagePagination :: !(Maybe SeekInfo) -- ^ "pagination"
  , scheduleAPageResults    :: !(Maybe [ScheduleA]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleAPage
instance A.FromJSON ScheduleAPage where
  parseJSON = A.withObject "ScheduleAPage" $ \o ->
    ScheduleAPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleAPage
instance A.ToJSON ScheduleAPage where
  toJSON ScheduleAPage {..} =
   _omitNulls
      [ "pagination" .= scheduleAPagePagination
      , "results" .= scheduleAPageResults
      ]


-- | Construct a value of type 'ScheduleAPage' (by applying it's required fields, if any)
mkScheduleAPage
  :: ScheduleAPage
mkScheduleAPage =
  ScheduleAPage
  { scheduleAPagePagination = Nothing
  , scheduleAPageResults = Nothing
  }

-- ** ScheduleB
-- | ScheduleB
data ScheduleB = ScheduleB
  { scheduleBAmendmentIndicator                 :: !(Maybe Text) -- ^ "amendment_indicator"
  , scheduleBAmendmentIndicatorDesc             :: !(Maybe Text) -- ^ "amendment_indicator_desc"
  , scheduleBBackReferenceScheduleId            :: !(Maybe Text) -- ^ "back_reference_schedule_id"
  , scheduleBBackReferenceTransactionId         :: !(Maybe Text) -- ^ "back_reference_transaction_id"
  , scheduleBBeneficiaryCommitteeName           :: !(Maybe Text) -- ^ "beneficiary_committee_name"
  , scheduleBCandidateFirstName                 :: !(Maybe Text) -- ^ "candidate_first_name"
  , scheduleBCandidateId                        :: !(Maybe Text) -- ^ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , scheduleBCandidateLastName                  :: !(Maybe Text) -- ^ "candidate_last_name"
  , scheduleBCandidateMiddleName                :: !(Maybe Text) -- ^ "candidate_middle_name"
  , scheduleBCandidateName                      :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , scheduleBCandidateOffice                    :: !(Maybe Text) -- ^ "candidate_office"
  , scheduleBCandidateOfficeDescription         :: !(Maybe Text) -- ^ "candidate_office_description"
  , scheduleBCandidateOfficeDistrict            :: !(Maybe Text) -- ^ "candidate_office_district"
  , scheduleBCandidateOfficeState               :: !(Maybe Text) -- ^ "candidate_office_state"
  , scheduleBCandidateOfficeStateFull           :: !(Maybe Text) -- ^ "candidate_office_state_full"
  , scheduleBCandidatePrefix                    :: !(Maybe Text) -- ^ "candidate_prefix"
  , scheduleBCandidateSuffix                    :: !(Maybe Text) -- ^ "candidate_suffix"
  , scheduleBCategoryCode                       :: !(Maybe Text) -- ^ "category_code"
  , scheduleBCategoryCodeFull                   :: !(Maybe Text) -- ^ "category_code_full"
  , scheduleBCommDt                             :: !(Maybe Date) -- ^ "comm_dt"
  , scheduleBCommittee                          :: !(Maybe CommitteeHistory) -- ^ "committee"
  , scheduleBCommitteeId                        :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleBConduitCommitteeCity               :: !(Maybe Text) -- ^ "conduit_committee_city"
  , scheduleBConduitCommitteeName               :: !(Maybe Text) -- ^ "conduit_committee_name"
  , scheduleBConduitCommitteeState              :: !(Maybe Text) -- ^ "conduit_committee_state"
  , scheduleBConduitCommitteeStreet1            :: !(Maybe Text) -- ^ "conduit_committee_street1"
  , scheduleBConduitCommitteeStreet2            :: !(Maybe Text) -- ^ "conduit_committee_street2"
  , scheduleBConduitCommitteeZip                :: !(Maybe Int) -- ^ "conduit_committee_zip"
  , scheduleBDisbursementAmount                 :: !(Maybe Double) -- ^ "disbursement_amount"
  , scheduleBDisbursementDate                   :: !(Maybe Date) -- ^ "disbursement_date"
  , scheduleBDisbursementDescription            :: !(Maybe Text) -- ^ "disbursement_description"
  , scheduleBDisbursementPurposeCategory        :: !(Maybe Text) -- ^ "disbursement_purpose_category"
  , scheduleBDisbursementType                   :: !(Maybe Text) -- ^ "disbursement_type"
  , scheduleBDisbursementTypeDescription        :: !(Maybe Text) -- ^ "disbursement_type_description"
  , scheduleBElectionType                       :: !(Maybe Text) -- ^ "election_type"
  , scheduleBElectionTypeFull                   :: !(Maybe Text) -- ^ "election_type_full"
  , scheduleBEntityType                         :: !(Maybe Text) -- ^ "entity_type"
  , scheduleBEntityTypeDesc                     :: !(Maybe Text) -- ^ "entity_type_desc"
  , scheduleBFecElectionTypeDesc                :: !(Maybe Text) -- ^ "fec_election_type_desc"
  , scheduleBFecElectionYear                    :: !(Maybe Text) -- ^ "fec_election_year"
  , scheduleBFileNumber                         :: !(Maybe Int) -- ^ "file_number"
  , scheduleBFilingForm                         :: !(Maybe Text) -- ^ "filing_form"
  , scheduleBImageNumber                        :: !(Maybe Text) -- ^ "image_number"
  , scheduleBLineNumber                         :: !(Maybe Text) -- ^ "line_number"
  , scheduleBLineNumberLabel                    :: !(Maybe Text) -- ^ "line_number_label"
  , scheduleBLinkId                             :: !(Maybe Int) -- ^ "link_id"
  , scheduleBLoadDate                           :: !(Maybe DateTime) -- ^ "load_date"
  , scheduleBMemoCode                           :: !(Maybe Text) -- ^ "memo_code"
  , scheduleBMemoCodeFull                       :: !(Maybe Text) -- ^ "memo_code_full"
  , scheduleBMemoText                           :: !(Maybe Text) -- ^ "memo_text"
  , scheduleBMemoedSubtotal                     :: !(Maybe Bool) -- ^ "memoed_subtotal"
  , scheduleBNationalCommitteeNonfederalAccount :: !(Maybe Text) -- ^ "national_committee_nonfederal_account"
  , scheduleBOriginalSubId                      :: !(Maybe Text) -- ^ "original_sub_id"
  , scheduleBPayeeEmployer                      :: !(Maybe Text) -- ^ "payee_employer"
  , scheduleBPayeeFirstName                     :: !(Maybe Text) -- ^ "payee_first_name"
  , scheduleBPayeeLastName                      :: !(Maybe Text) -- ^ "payee_last_name"
  , scheduleBPayeeMiddleName                    :: !(Maybe Text) -- ^ "payee_middle_name"
  , scheduleBPayeeOccupation                    :: !(Maybe Text) -- ^ "payee_occupation"
  , scheduleBPayeePrefix                        :: !(Maybe Text) -- ^ "payee_prefix"
  , scheduleBPayeeSuffix                        :: !(Maybe Text) -- ^ "payee_suffix"
  , scheduleBPdfUrl                             :: !(Maybe Text) -- ^ "pdf_url"
  , scheduleBRecipientCity                      :: !(Maybe Text) -- ^ "recipient_city"
  , scheduleBRecipientCommittee                 :: !(Maybe CommitteeHistory) -- ^ "recipient_committee"
  , scheduleBRecipientCommitteeId               :: !(Maybe Text) -- ^ "recipient_committee_id"
  , scheduleBRecipientName                      :: !(Maybe Text) -- ^ "recipient_name"
  , scheduleBRecipientState                     :: !(Maybe Text) -- ^ "recipient_state"
  , scheduleBRecipientZip                       :: !(Maybe Text) -- ^ "recipient_zip"
  , scheduleBRefDispExcessFlg                   :: !(Maybe Text) -- ^ "ref_disp_excess_flg"
  , scheduleBReportType                         :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , scheduleBReportYear                         :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , scheduleBScheduleType                       :: !(Maybe Text) -- ^ "schedule_type"
  , scheduleBScheduleTypeFull                   :: !(Maybe Text) -- ^ "schedule_type_full"
  , scheduleBSemiAnnualBundledRefund            :: !(Maybe Double) -- ^ "semi_annual_bundled_refund"
  , scheduleBSpenderCommitteeType               :: !(Maybe Text) -- ^ "spender_committee_type"
  , scheduleBSubId                              :: !(Maybe Text) -- ^ "sub_id"
  , scheduleBTransactionId                      :: !(Maybe Text) -- ^ "transaction_id"
  , scheduleBTwoYearTransactionPeriod           :: !(Maybe Int) -- ^ "two_year_transaction_period" -  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle.
  , scheduleBUnusedRecipientCommitteeId         :: !(Maybe Text) -- ^ "unused_recipient_committee_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleB
instance A.FromJSON ScheduleB where
  parseJSON = A.withObject "ScheduleB" $ \o ->
    ScheduleB
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_indicator_desc")
      <*> (o .:? "back_reference_schedule_id")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "beneficiary_committee_name")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_description")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "candidate_office_state_full")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "category_code")
      <*> (o .:? "category_code_full")
      <*> (o .:? "comm_dt")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "conduit_committee_city")
      <*> (o .:? "conduit_committee_name")
      <*> (o .:? "conduit_committee_state")
      <*> (o .:? "conduit_committee_street1")
      <*> (o .:? "conduit_committee_street2")
      <*> (o .:? "conduit_committee_zip")
      <*> (o .:? "disbursement_amount")
      <*> (o .:? "disbursement_date")
      <*> (o .:? "disbursement_description")
      <*> (o .:? "disbursement_purpose_category")
      <*> (o .:? "disbursement_type")
      <*> (o .:? "disbursement_type_description")
      <*> (o .:? "election_type")
      <*> (o .:? "election_type_full")
      <*> (o .:? "entity_type")
      <*> (o .:? "entity_type_desc")
      <*> (o .:? "fec_election_type_desc")
      <*> (o .:? "fec_election_year")
      <*> (o .:? "file_number")
      <*> (o .:? "filing_form")
      <*> (o .:? "image_number")
      <*> (o .:? "line_number")
      <*> (o .:? "line_number_label")
      <*> (o .:? "link_id")
      <*> (o .:? "load_date")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_code_full")
      <*> (o .:? "memo_text")
      <*> (o .:? "memoed_subtotal")
      <*> (o .:? "national_committee_nonfederal_account")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "payee_employer")
      <*> (o .:? "payee_first_name")
      <*> (o .:? "payee_last_name")
      <*> (o .:? "payee_middle_name")
      <*> (o .:? "payee_occupation")
      <*> (o .:? "payee_prefix")
      <*> (o .:? "payee_suffix")
      <*> (o .:? "pdf_url")
      <*> (o .:? "recipient_city")
      <*> (o .:? "recipient_committee")
      <*> (o .:? "recipient_committee_id")
      <*> (o .:? "recipient_name")
      <*> (o .:? "recipient_state")
      <*> (o .:? "recipient_zip")
      <*> (o .:? "ref_disp_excess_flg")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "semi_annual_bundled_refund")
      <*> (o .:? "spender_committee_type")
      <*> (o .:? "sub_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "two_year_transaction_period")
      <*> (o .:? "unused_recipient_committee_id")

-- | ToJSON ScheduleB
instance A.ToJSON ScheduleB where
  toJSON ScheduleB {..} =
   _omitNulls
      [ "amendment_indicator" .= scheduleBAmendmentIndicator
      , "amendment_indicator_desc" .= scheduleBAmendmentIndicatorDesc
      , "back_reference_schedule_id" .= scheduleBBackReferenceScheduleId
      , "back_reference_transaction_id" .= scheduleBBackReferenceTransactionId
      , "beneficiary_committee_name" .= scheduleBBeneficiaryCommitteeName
      , "candidate_first_name" .= scheduleBCandidateFirstName
      , "candidate_id" .= scheduleBCandidateId
      , "candidate_last_name" .= scheduleBCandidateLastName
      , "candidate_middle_name" .= scheduleBCandidateMiddleName
      , "candidate_name" .= scheduleBCandidateName
      , "candidate_office" .= scheduleBCandidateOffice
      , "candidate_office_description" .= scheduleBCandidateOfficeDescription
      , "candidate_office_district" .= scheduleBCandidateOfficeDistrict
      , "candidate_office_state" .= scheduleBCandidateOfficeState
      , "candidate_office_state_full" .= scheduleBCandidateOfficeStateFull
      , "candidate_prefix" .= scheduleBCandidatePrefix
      , "candidate_suffix" .= scheduleBCandidateSuffix
      , "category_code" .= scheduleBCategoryCode
      , "category_code_full" .= scheduleBCategoryCodeFull
      , "comm_dt" .= scheduleBCommDt
      , "committee" .= scheduleBCommittee
      , "committee_id" .= scheduleBCommitteeId
      , "conduit_committee_city" .= scheduleBConduitCommitteeCity
      , "conduit_committee_name" .= scheduleBConduitCommitteeName
      , "conduit_committee_state" .= scheduleBConduitCommitteeState
      , "conduit_committee_street1" .= scheduleBConduitCommitteeStreet1
      , "conduit_committee_street2" .= scheduleBConduitCommitteeStreet2
      , "conduit_committee_zip" .= scheduleBConduitCommitteeZip
      , "disbursement_amount" .= scheduleBDisbursementAmount
      , "disbursement_date" .= scheduleBDisbursementDate
      , "disbursement_description" .= scheduleBDisbursementDescription
      , "disbursement_purpose_category" .= scheduleBDisbursementPurposeCategory
      , "disbursement_type" .= scheduleBDisbursementType
      , "disbursement_type_description" .= scheduleBDisbursementTypeDescription
      , "election_type" .= scheduleBElectionType
      , "election_type_full" .= scheduleBElectionTypeFull
      , "entity_type" .= scheduleBEntityType
      , "entity_type_desc" .= scheduleBEntityTypeDesc
      , "fec_election_type_desc" .= scheduleBFecElectionTypeDesc
      , "fec_election_year" .= scheduleBFecElectionYear
      , "file_number" .= scheduleBFileNumber
      , "filing_form" .= scheduleBFilingForm
      , "image_number" .= scheduleBImageNumber
      , "line_number" .= scheduleBLineNumber
      , "line_number_label" .= scheduleBLineNumberLabel
      , "link_id" .= scheduleBLinkId
      , "load_date" .= scheduleBLoadDate
      , "memo_code" .= scheduleBMemoCode
      , "memo_code_full" .= scheduleBMemoCodeFull
      , "memo_text" .= scheduleBMemoText
      , "memoed_subtotal" .= scheduleBMemoedSubtotal
      , "national_committee_nonfederal_account" .= scheduleBNationalCommitteeNonfederalAccount
      , "original_sub_id" .= scheduleBOriginalSubId
      , "payee_employer" .= scheduleBPayeeEmployer
      , "payee_first_name" .= scheduleBPayeeFirstName
      , "payee_last_name" .= scheduleBPayeeLastName
      , "payee_middle_name" .= scheduleBPayeeMiddleName
      , "payee_occupation" .= scheduleBPayeeOccupation
      , "payee_prefix" .= scheduleBPayeePrefix
      , "payee_suffix" .= scheduleBPayeeSuffix
      , "pdf_url" .= scheduleBPdfUrl
      , "recipient_city" .= scheduleBRecipientCity
      , "recipient_committee" .= scheduleBRecipientCommittee
      , "recipient_committee_id" .= scheduleBRecipientCommitteeId
      , "recipient_name" .= scheduleBRecipientName
      , "recipient_state" .= scheduleBRecipientState
      , "recipient_zip" .= scheduleBRecipientZip
      , "ref_disp_excess_flg" .= scheduleBRefDispExcessFlg
      , "report_type" .= scheduleBReportType
      , "report_year" .= scheduleBReportYear
      , "schedule_type" .= scheduleBScheduleType
      , "schedule_type_full" .= scheduleBScheduleTypeFull
      , "semi_annual_bundled_refund" .= scheduleBSemiAnnualBundledRefund
      , "spender_committee_type" .= scheduleBSpenderCommitteeType
      , "sub_id" .= scheduleBSubId
      , "transaction_id" .= scheduleBTransactionId
      , "two_year_transaction_period" .= scheduleBTwoYearTransactionPeriod
      , "unused_recipient_committee_id" .= scheduleBUnusedRecipientCommitteeId
      ]


-- | Construct a value of type 'ScheduleB' (by applying it's required fields, if any)
mkScheduleB
  :: ScheduleB
mkScheduleB =
  ScheduleB
  { scheduleBAmendmentIndicator = Nothing
  , scheduleBAmendmentIndicatorDesc = Nothing
  , scheduleBBackReferenceScheduleId = Nothing
  , scheduleBBackReferenceTransactionId = Nothing
  , scheduleBBeneficiaryCommitteeName = Nothing
  , scheduleBCandidateFirstName = Nothing
  , scheduleBCandidateId = Nothing
  , scheduleBCandidateLastName = Nothing
  , scheduleBCandidateMiddleName = Nothing
  , scheduleBCandidateName = Nothing
  , scheduleBCandidateOffice = Nothing
  , scheduleBCandidateOfficeDescription = Nothing
  , scheduleBCandidateOfficeDistrict = Nothing
  , scheduleBCandidateOfficeState = Nothing
  , scheduleBCandidateOfficeStateFull = Nothing
  , scheduleBCandidatePrefix = Nothing
  , scheduleBCandidateSuffix = Nothing
  , scheduleBCategoryCode = Nothing
  , scheduleBCategoryCodeFull = Nothing
  , scheduleBCommDt = Nothing
  , scheduleBCommittee = Nothing
  , scheduleBCommitteeId = Nothing
  , scheduleBConduitCommitteeCity = Nothing
  , scheduleBConduitCommitteeName = Nothing
  , scheduleBConduitCommitteeState = Nothing
  , scheduleBConduitCommitteeStreet1 = Nothing
  , scheduleBConduitCommitteeStreet2 = Nothing
  , scheduleBConduitCommitteeZip = Nothing
  , scheduleBDisbursementAmount = Nothing
  , scheduleBDisbursementDate = Nothing
  , scheduleBDisbursementDescription = Nothing
  , scheduleBDisbursementPurposeCategory = Nothing
  , scheduleBDisbursementType = Nothing
  , scheduleBDisbursementTypeDescription = Nothing
  , scheduleBElectionType = Nothing
  , scheduleBElectionTypeFull = Nothing
  , scheduleBEntityType = Nothing
  , scheduleBEntityTypeDesc = Nothing
  , scheduleBFecElectionTypeDesc = Nothing
  , scheduleBFecElectionYear = Nothing
  , scheduleBFileNumber = Nothing
  , scheduleBFilingForm = Nothing
  , scheduleBImageNumber = Nothing
  , scheduleBLineNumber = Nothing
  , scheduleBLineNumberLabel = Nothing
  , scheduleBLinkId = Nothing
  , scheduleBLoadDate = Nothing
  , scheduleBMemoCode = Nothing
  , scheduleBMemoCodeFull = Nothing
  , scheduleBMemoText = Nothing
  , scheduleBMemoedSubtotal = Nothing
  , scheduleBNationalCommitteeNonfederalAccount = Nothing
  , scheduleBOriginalSubId = Nothing
  , scheduleBPayeeEmployer = Nothing
  , scheduleBPayeeFirstName = Nothing
  , scheduleBPayeeLastName = Nothing
  , scheduleBPayeeMiddleName = Nothing
  , scheduleBPayeeOccupation = Nothing
  , scheduleBPayeePrefix = Nothing
  , scheduleBPayeeSuffix = Nothing
  , scheduleBPdfUrl = Nothing
  , scheduleBRecipientCity = Nothing
  , scheduleBRecipientCommittee = Nothing
  , scheduleBRecipientCommitteeId = Nothing
  , scheduleBRecipientName = Nothing
  , scheduleBRecipientState = Nothing
  , scheduleBRecipientZip = Nothing
  , scheduleBRefDispExcessFlg = Nothing
  , scheduleBReportType = Nothing
  , scheduleBReportYear = Nothing
  , scheduleBScheduleType = Nothing
  , scheduleBScheduleTypeFull = Nothing
  , scheduleBSemiAnnualBundledRefund = Nothing
  , scheduleBSpenderCommitteeType = Nothing
  , scheduleBSubId = Nothing
  , scheduleBTransactionId = Nothing
  , scheduleBTwoYearTransactionPeriod = Nothing
  , scheduleBUnusedRecipientCommitteeId = Nothing
  }

-- ** ScheduleBByPurpose
-- | ScheduleBByPurpose
data ScheduleBByPurpose = ScheduleBByPurpose
  { scheduleBByPurposeCommitteeId :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleBByPurposeCount       :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleBByPurposeCycle       :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleBByPurposePurpose     :: !(Text) -- ^ /Required/ "purpose" - Purpose of the expenditure
  , scheduleBByPurposeTotal       :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBByPurpose
instance A.FromJSON ScheduleBByPurpose where
  parseJSON = A.withObject "ScheduleBByPurpose" $ \o ->
    ScheduleBByPurpose
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "purpose")
      <*> (o .:? "total")

-- | ToJSON ScheduleBByPurpose
instance A.ToJSON ScheduleBByPurpose where
  toJSON ScheduleBByPurpose {..} =
   _omitNulls
      [ "committee_id" .= scheduleBByPurposeCommitteeId
      , "count" .= scheduleBByPurposeCount
      , "cycle" .= scheduleBByPurposeCycle
      , "purpose" .= scheduleBByPurposePurpose
      , "total" .= scheduleBByPurposeTotal
      ]


-- | Construct a value of type 'ScheduleBByPurpose' (by applying it's required fields, if any)
mkScheduleBByPurpose
  :: Text -- ^ 'scheduleBByPurposeCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleBByPurposeCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleBByPurposePurpose': Purpose of the expenditure
  -> ScheduleBByPurpose
mkScheduleBByPurpose scheduleBByPurposeCommitteeId scheduleBByPurposeCycle scheduleBByPurposePurpose =
  ScheduleBByPurpose
  { scheduleBByPurposeCommitteeId
  , scheduleBByPurposeCount = Nothing
  , scheduleBByPurposeCycle
  , scheduleBByPurposePurpose
  , scheduleBByPurposeTotal = Nothing
  }

-- ** ScheduleBByPurposePage
-- | ScheduleBByPurposePage
data ScheduleBByPurposePage = ScheduleBByPurposePage
  { scheduleBByPurposePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleBByPurposePageResults    :: !(Maybe [ScheduleBByPurpose]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBByPurposePage
instance A.FromJSON ScheduleBByPurposePage where
  parseJSON = A.withObject "ScheduleBByPurposePage" $ \o ->
    ScheduleBByPurposePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleBByPurposePage
instance A.ToJSON ScheduleBByPurposePage where
  toJSON ScheduleBByPurposePage {..} =
   _omitNulls
      [ "pagination" .= scheduleBByPurposePagePagination
      , "results" .= scheduleBByPurposePageResults
      ]


-- | Construct a value of type 'ScheduleBByPurposePage' (by applying it's required fields, if any)
mkScheduleBByPurposePage
  :: ScheduleBByPurposePage
mkScheduleBByPurposePage =
  ScheduleBByPurposePage
  { scheduleBByPurposePagePagination = Nothing
  , scheduleBByPurposePageResults = Nothing
  }

-- ** ScheduleBByRecipient
-- | ScheduleBByRecipient
data ScheduleBByRecipient = ScheduleBByRecipient
  { scheduleBByRecipientCommitteeId   :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleBByRecipientCount         :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleBByRecipientCycle         :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleBByRecipientRecipientName :: !(Text) -- ^ /Required/ "recipient_name" - Name of the entity receiving the disbursement
  , scheduleBByRecipientTotal         :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBByRecipient
instance A.FromJSON ScheduleBByRecipient where
  parseJSON = A.withObject "ScheduleBByRecipient" $ \o ->
    ScheduleBByRecipient
      <$> (o .:  "committee_id")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "recipient_name")
      <*> (o .:? "total")

-- | ToJSON ScheduleBByRecipient
instance A.ToJSON ScheduleBByRecipient where
  toJSON ScheduleBByRecipient {..} =
   _omitNulls
      [ "committee_id" .= scheduleBByRecipientCommitteeId
      , "count" .= scheduleBByRecipientCount
      , "cycle" .= scheduleBByRecipientCycle
      , "recipient_name" .= scheduleBByRecipientRecipientName
      , "total" .= scheduleBByRecipientTotal
      ]


-- | Construct a value of type 'ScheduleBByRecipient' (by applying it's required fields, if any)
mkScheduleBByRecipient
  :: Text -- ^ 'scheduleBByRecipientCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleBByRecipientCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleBByRecipientRecipientName': Name of the entity receiving the disbursement
  -> ScheduleBByRecipient
mkScheduleBByRecipient scheduleBByRecipientCommitteeId scheduleBByRecipientCycle scheduleBByRecipientRecipientName =
  ScheduleBByRecipient
  { scheduleBByRecipientCommitteeId
  , scheduleBByRecipientCount = Nothing
  , scheduleBByRecipientCycle
  , scheduleBByRecipientRecipientName
  , scheduleBByRecipientTotal = Nothing
  }

-- ** ScheduleBByRecipientID
-- | ScheduleBByRecipientID
data ScheduleBByRecipientID = ScheduleBByRecipientID
  { scheduleBByRecipientIDCommitteeId   :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleBByRecipientIDCommitteeName :: !(Maybe Text) -- ^ "committee_name"
  , scheduleBByRecipientIDCount         :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleBByRecipientIDCycle         :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleBByRecipientIDIdx           :: !(Maybe Int) -- ^ "idx"
  , scheduleBByRecipientIDRecipientId   :: !(Text) -- ^ /Required/ "recipient_id" - The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
  , scheduleBByRecipientIDRecipientName :: !(Maybe Text) -- ^ "recipient_name"
  , scheduleBByRecipientIDTotal         :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBByRecipientID
instance A.FromJSON ScheduleBByRecipientID where
  parseJSON = A.withObject "ScheduleBByRecipientID" $ \o ->
    ScheduleBByRecipientID
      <$> (o .:  "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:? "idx")
      <*> (o .:  "recipient_id")
      <*> (o .:? "recipient_name")
      <*> (o .:? "total")

-- | ToJSON ScheduleBByRecipientID
instance A.ToJSON ScheduleBByRecipientID where
  toJSON ScheduleBByRecipientID {..} =
   _omitNulls
      [ "committee_id" .= scheduleBByRecipientIDCommitteeId
      , "committee_name" .= scheduleBByRecipientIDCommitteeName
      , "count" .= scheduleBByRecipientIDCount
      , "cycle" .= scheduleBByRecipientIDCycle
      , "idx" .= scheduleBByRecipientIDIdx
      , "recipient_id" .= scheduleBByRecipientIDRecipientId
      , "recipient_name" .= scheduleBByRecipientIDRecipientName
      , "total" .= scheduleBByRecipientIDTotal
      ]


-- | Construct a value of type 'ScheduleBByRecipientID' (by applying it's required fields, if any)
mkScheduleBByRecipientID
  :: Text -- ^ 'scheduleBByRecipientIDCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'scheduleBByRecipientIDCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleBByRecipientIDRecipientId': The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
  -> ScheduleBByRecipientID
mkScheduleBByRecipientID scheduleBByRecipientIDCommitteeId scheduleBByRecipientIDCycle scheduleBByRecipientIDRecipientId =
  ScheduleBByRecipientID
  { scheduleBByRecipientIDCommitteeId
  , scheduleBByRecipientIDCommitteeName = Nothing
  , scheduleBByRecipientIDCount = Nothing
  , scheduleBByRecipientIDCycle
  , scheduleBByRecipientIDIdx = Nothing
  , scheduleBByRecipientIDRecipientId
  , scheduleBByRecipientIDRecipientName = Nothing
  , scheduleBByRecipientIDTotal = Nothing
  }

-- ** ScheduleBByRecipientIDPage
-- | ScheduleBByRecipientIDPage
data ScheduleBByRecipientIDPage = ScheduleBByRecipientIDPage
  { scheduleBByRecipientIDPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleBByRecipientIDPageResults    :: !(Maybe [ScheduleBByRecipientID]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBByRecipientIDPage
instance A.FromJSON ScheduleBByRecipientIDPage where
  parseJSON = A.withObject "ScheduleBByRecipientIDPage" $ \o ->
    ScheduleBByRecipientIDPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleBByRecipientIDPage
instance A.ToJSON ScheduleBByRecipientIDPage where
  toJSON ScheduleBByRecipientIDPage {..} =
   _omitNulls
      [ "pagination" .= scheduleBByRecipientIDPagePagination
      , "results" .= scheduleBByRecipientIDPageResults
      ]


-- | Construct a value of type 'ScheduleBByRecipientIDPage' (by applying it's required fields, if any)
mkScheduleBByRecipientIDPage
  :: ScheduleBByRecipientIDPage
mkScheduleBByRecipientIDPage =
  ScheduleBByRecipientIDPage
  { scheduleBByRecipientIDPagePagination = Nothing
  , scheduleBByRecipientIDPageResults = Nothing
  }

-- ** ScheduleBByRecipientPage
-- | ScheduleBByRecipientPage
data ScheduleBByRecipientPage = ScheduleBByRecipientPage
  { scheduleBByRecipientPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleBByRecipientPageResults    :: !(Maybe [ScheduleBByRecipient]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBByRecipientPage
instance A.FromJSON ScheduleBByRecipientPage where
  parseJSON = A.withObject "ScheduleBByRecipientPage" $ \o ->
    ScheduleBByRecipientPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleBByRecipientPage
instance A.ToJSON ScheduleBByRecipientPage where
  toJSON ScheduleBByRecipientPage {..} =
   _omitNulls
      [ "pagination" .= scheduleBByRecipientPagePagination
      , "results" .= scheduleBByRecipientPageResults
      ]


-- | Construct a value of type 'ScheduleBByRecipientPage' (by applying it's required fields, if any)
mkScheduleBByRecipientPage
  :: ScheduleBByRecipientPage
mkScheduleBByRecipientPage =
  ScheduleBByRecipientPage
  { scheduleBByRecipientPagePagination = Nothing
  , scheduleBByRecipientPageResults = Nothing
  }

-- ** ScheduleBEfile
-- | ScheduleBEfile
data ScheduleBEfile = ScheduleBEfile
  { scheduleBEfileAmendmentIndicator         :: !(Maybe Text) -- ^ "amendment_indicator"
  , scheduleBEfileBackReferenceScheduleName  :: !(Maybe Text) -- ^ "back_reference_schedule_name"
  , scheduleBEfileBackReferenceTransactionId :: !(Maybe Text) -- ^ "back_reference_transaction_id"
  , scheduleBEfileBeginningImageNumber       :: !(Maybe Text) -- ^ "beginning_image_number"
  , scheduleBEfileBeneficiaryCommitteeName   :: !(Maybe Text) -- ^ "beneficiary_committee_name"
  , scheduleBEfileCandidateOffice            :: !(Maybe Text) -- ^ "candidate_office"
  , scheduleBEfileCandidateOfficeDistrict    :: !(Maybe Text) -- ^ "candidate_office_district"
  , scheduleBEfileCommittee                  :: !(Maybe CommitteeHistory) -- ^ "committee"
  , scheduleBEfileCommitteeId                :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleBEfileCsvUrl                     :: !(Maybe Text) -- ^ "csv_url"
  , scheduleBEfileDisbursementAmount         :: !(Maybe Double) -- ^ "disbursement_amount"
  , scheduleBEfileDisbursementDate           :: !(Maybe Date) -- ^ "disbursement_date"
  , scheduleBEfileDisbursementDescription    :: !(Maybe Text) -- ^ "disbursement_description"
  , scheduleBEfileDisbursementType           :: !(Maybe Text) -- ^ "disbursement_type"
  , scheduleBEfileEntityType                 :: !(Maybe Text) -- ^ "entity_type"
  , scheduleBEfileFecUrl                     :: !(Maybe Text) -- ^ "fec_url"
  , scheduleBEfileFileNumber                 :: !(Int) -- ^ /Required/ "file_number"
  , scheduleBEfileFiling                     :: !(Maybe EFilings) -- ^ "filing"
  , scheduleBEfileImageNumber                :: !(Maybe Text) -- ^ "image_number" - An unique identifier for each page the electronic or paper report.
  , scheduleBEfileIsNotice                   :: !(Maybe Bool) -- ^ "is_notice"
  , scheduleBEfileLineNumber                 :: !(Maybe Text) -- ^ "line_number"
  , scheduleBEfileLoadTimestamp              :: !(Maybe DateTime) -- ^ "load_timestamp"
  , scheduleBEfileMemoCode                   :: !(Maybe Text) -- ^ "memo_code"
  , scheduleBEfileMemoText                   :: !(Maybe Text) -- ^ "memo_text"
  , scheduleBEfilePayeeName                  :: !(Maybe Text) -- ^ "payee_name"
  , scheduleBEfilePdfUrl                     :: !(Maybe Text) -- ^ "pdf_url"
  , scheduleBEfileRecipientCity              :: !(Maybe Text) -- ^ "recipient_city"
  , scheduleBEfileRecipientName              :: !(Maybe Text) -- ^ "recipient_name"
  , scheduleBEfileRecipientPrefix            :: !(Maybe Text) -- ^ "recipient_prefix"
  , scheduleBEfileRecipientState             :: !(Maybe Text) -- ^ "recipient_state"
  , scheduleBEfileRecipientSuffix            :: !(Maybe Text) -- ^ "recipient_suffix"
  , scheduleBEfileRecipientZip               :: !(Maybe Text) -- ^ "recipient_zip"
  , scheduleBEfileRelatedLineNumber          :: !(Int) -- ^ /Required/ "related_line_number"
  , scheduleBEfileReportType                 :: !(Maybe Text) -- ^ "report_type"
  , scheduleBEfileSemiAnnualBundledRefund    :: !(Maybe Int) -- ^ "semi_annual_bundled_refund"
  , scheduleBEfileTransactionId              :: !(Maybe Text) -- ^ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBEfile
instance A.FromJSON ScheduleBEfile where
  parseJSON = A.withObject "ScheduleBEfile" $ \o ->
    ScheduleBEfile
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "back_reference_schedule_name")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "beneficiary_committee_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "csv_url")
      <*> (o .:? "disbursement_amount")
      <*> (o .:? "disbursement_date")
      <*> (o .:? "disbursement_description")
      <*> (o .:? "disbursement_type")
      <*> (o .:? "entity_type")
      <*> (o .:? "fec_url")
      <*> (o .:  "file_number")
      <*> (o .:? "filing")
      <*> (o .:? "image_number")
      <*> (o .:? "is_notice")
      <*> (o .:? "line_number")
      <*> (o .:? "load_timestamp")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_text")
      <*> (o .:? "payee_name")
      <*> (o .:? "pdf_url")
      <*> (o .:? "recipient_city")
      <*> (o .:? "recipient_name")
      <*> (o .:? "recipient_prefix")
      <*> (o .:? "recipient_state")
      <*> (o .:? "recipient_suffix")
      <*> (o .:? "recipient_zip")
      <*> (o .:  "related_line_number")
      <*> (o .:? "report_type")
      <*> (o .:? "semi_annual_bundled_refund")
      <*> (o .:? "transaction_id")

-- | ToJSON ScheduleBEfile
instance A.ToJSON ScheduleBEfile where
  toJSON ScheduleBEfile {..} =
   _omitNulls
      [ "amendment_indicator" .= scheduleBEfileAmendmentIndicator
      , "back_reference_schedule_name" .= scheduleBEfileBackReferenceScheduleName
      , "back_reference_transaction_id" .= scheduleBEfileBackReferenceTransactionId
      , "beginning_image_number" .= scheduleBEfileBeginningImageNumber
      , "beneficiary_committee_name" .= scheduleBEfileBeneficiaryCommitteeName
      , "candidate_office" .= scheduleBEfileCandidateOffice
      , "candidate_office_district" .= scheduleBEfileCandidateOfficeDistrict
      , "committee" .= scheduleBEfileCommittee
      , "committee_id" .= scheduleBEfileCommitteeId
      , "csv_url" .= scheduleBEfileCsvUrl
      , "disbursement_amount" .= scheduleBEfileDisbursementAmount
      , "disbursement_date" .= scheduleBEfileDisbursementDate
      , "disbursement_description" .= scheduleBEfileDisbursementDescription
      , "disbursement_type" .= scheduleBEfileDisbursementType
      , "entity_type" .= scheduleBEfileEntityType
      , "fec_url" .= scheduleBEfileFecUrl
      , "file_number" .= scheduleBEfileFileNumber
      , "filing" .= scheduleBEfileFiling
      , "image_number" .= scheduleBEfileImageNumber
      , "is_notice" .= scheduleBEfileIsNotice
      , "line_number" .= scheduleBEfileLineNumber
      , "load_timestamp" .= scheduleBEfileLoadTimestamp
      , "memo_code" .= scheduleBEfileMemoCode
      , "memo_text" .= scheduleBEfileMemoText
      , "payee_name" .= scheduleBEfilePayeeName
      , "pdf_url" .= scheduleBEfilePdfUrl
      , "recipient_city" .= scheduleBEfileRecipientCity
      , "recipient_name" .= scheduleBEfileRecipientName
      , "recipient_prefix" .= scheduleBEfileRecipientPrefix
      , "recipient_state" .= scheduleBEfileRecipientState
      , "recipient_suffix" .= scheduleBEfileRecipientSuffix
      , "recipient_zip" .= scheduleBEfileRecipientZip
      , "related_line_number" .= scheduleBEfileRelatedLineNumber
      , "report_type" .= scheduleBEfileReportType
      , "semi_annual_bundled_refund" .= scheduleBEfileSemiAnnualBundledRefund
      , "transaction_id" .= scheduleBEfileTransactionId
      ]


-- | Construct a value of type 'ScheduleBEfile' (by applying it's required fields, if any)
mkScheduleBEfile
  :: Int -- ^ 'scheduleBEfileFileNumber'
  -> Int -- ^ 'scheduleBEfileRelatedLineNumber'
  -> ScheduleBEfile
mkScheduleBEfile scheduleBEfileFileNumber scheduleBEfileRelatedLineNumber =
  ScheduleBEfile
  { scheduleBEfileAmendmentIndicator = Nothing
  , scheduleBEfileBackReferenceScheduleName = Nothing
  , scheduleBEfileBackReferenceTransactionId = Nothing
  , scheduleBEfileBeginningImageNumber = Nothing
  , scheduleBEfileBeneficiaryCommitteeName = Nothing
  , scheduleBEfileCandidateOffice = Nothing
  , scheduleBEfileCandidateOfficeDistrict = Nothing
  , scheduleBEfileCommittee = Nothing
  , scheduleBEfileCommitteeId = Nothing
  , scheduleBEfileCsvUrl = Nothing
  , scheduleBEfileDisbursementAmount = Nothing
  , scheduleBEfileDisbursementDate = Nothing
  , scheduleBEfileDisbursementDescription = Nothing
  , scheduleBEfileDisbursementType = Nothing
  , scheduleBEfileEntityType = Nothing
  , scheduleBEfileFecUrl = Nothing
  , scheduleBEfileFileNumber
  , scheduleBEfileFiling = Nothing
  , scheduleBEfileImageNumber = Nothing
  , scheduleBEfileIsNotice = Nothing
  , scheduleBEfileLineNumber = Nothing
  , scheduleBEfileLoadTimestamp = Nothing
  , scheduleBEfileMemoCode = Nothing
  , scheduleBEfileMemoText = Nothing
  , scheduleBEfilePayeeName = Nothing
  , scheduleBEfilePdfUrl = Nothing
  , scheduleBEfileRecipientCity = Nothing
  , scheduleBEfileRecipientName = Nothing
  , scheduleBEfileRecipientPrefix = Nothing
  , scheduleBEfileRecipientState = Nothing
  , scheduleBEfileRecipientSuffix = Nothing
  , scheduleBEfileRecipientZip = Nothing
  , scheduleBEfileRelatedLineNumber
  , scheduleBEfileReportType = Nothing
  , scheduleBEfileSemiAnnualBundledRefund = Nothing
  , scheduleBEfileTransactionId = Nothing
  }

-- ** ScheduleBEfilePage
-- | ScheduleBEfilePage
data ScheduleBEfilePage = ScheduleBEfilePage
  { scheduleBEfilePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleBEfilePageResults    :: !(Maybe [ScheduleBEfile]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBEfilePage
instance A.FromJSON ScheduleBEfilePage where
  parseJSON = A.withObject "ScheduleBEfilePage" $ \o ->
    ScheduleBEfilePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleBEfilePage
instance A.ToJSON ScheduleBEfilePage where
  toJSON ScheduleBEfilePage {..} =
   _omitNulls
      [ "pagination" .= scheduleBEfilePagePagination
      , "results" .= scheduleBEfilePageResults
      ]


-- | Construct a value of type 'ScheduleBEfilePage' (by applying it's required fields, if any)
mkScheduleBEfilePage
  :: ScheduleBEfilePage
mkScheduleBEfilePage =
  ScheduleBEfilePage
  { scheduleBEfilePagePagination = Nothing
  , scheduleBEfilePageResults = Nothing
  }

-- ** ScheduleBPage
-- | ScheduleBPage
data ScheduleBPage = ScheduleBPage
  { scheduleBPagePagination :: !(Maybe SeekInfo) -- ^ "pagination"
  , scheduleBPageResults    :: !(Maybe [ScheduleB]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleBPage
instance A.FromJSON ScheduleBPage where
  parseJSON = A.withObject "ScheduleBPage" $ \o ->
    ScheduleBPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleBPage
instance A.ToJSON ScheduleBPage where
  toJSON ScheduleBPage {..} =
   _omitNulls
      [ "pagination" .= scheduleBPagePagination
      , "results" .= scheduleBPageResults
      ]


-- | Construct a value of type 'ScheduleBPage' (by applying it's required fields, if any)
mkScheduleBPage
  :: ScheduleBPage
mkScheduleBPage =
  ScheduleBPage
  { scheduleBPagePagination = Nothing
  , scheduleBPageResults = Nothing
  }

-- ** ScheduleE
-- | ScheduleE
data ScheduleE = ScheduleE
  { scheduleEActionCode                     :: !(Maybe Text) -- ^ "action_code"
  , scheduleEActionCodeFull                 :: !(Maybe Text) -- ^ "action_code_full"
  , scheduleEAmendmentIndicator             :: !(Maybe Text) -- ^ "amendment_indicator" -      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
  , scheduleEAmendmentNumber                :: !(Maybe Int) -- ^ "amendment_number" -  Number of times the report has been amended.
  , scheduleEBackReferenceScheduleName      :: !(Maybe Text) -- ^ "back_reference_schedule_name"
  , scheduleEBackReferenceTransactionId     :: !(Maybe Text) -- ^ "back_reference_transaction_id"
  , scheduleECandidate                      :: !(Maybe Text) -- ^ "candidate"
  , scheduleECandidateFirstName             :: !(Maybe Text) -- ^ "candidate_first_name"
  , scheduleECandidateId                    :: !(Maybe Text) -- ^ "candidate_id"
  , scheduleECandidateLastName              :: !(Maybe Text) -- ^ "candidate_last_name"
  , scheduleECandidateMiddleName            :: !(Maybe Text) -- ^ "candidate_middle_name"
  , scheduleECandidateName                  :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , scheduleECandidateOffice                :: !(Maybe Text) -- ^ "candidate_office" - Federal office candidate runs for: H, S or P
  , scheduleECandidateOfficeDistrict        :: !(Maybe Text) -- ^ "candidate_office_district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , scheduleECandidateOfficeState           :: !(Maybe Text) -- ^ "candidate_office_state" - US state or territory
  , scheduleECandidateParty                 :: !(Maybe Text) -- ^ "candidate_party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , scheduleECandidatePrefix                :: !(Maybe Text) -- ^ "candidate_prefix"
  , scheduleECandidateSuffix                :: !(Maybe Text) -- ^ "candidate_suffix"
  , scheduleECategoryCode                   :: !(Maybe Text) -- ^ "category_code"
  , scheduleECategoryCodeFull               :: !(Maybe Text) -- ^ "category_code_full"
  , scheduleECommittee                      :: !(Maybe CommitteeHistory) -- ^ "committee"
  , scheduleECommitteeId                    :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleEConduitCommitteeCity           :: !(Maybe Text) -- ^ "conduit_committee_city"
  , scheduleEConduitCommitteeId             :: !(Maybe Text) -- ^ "conduit_committee_id"
  , scheduleEConduitCommitteeName           :: !(Maybe Text) -- ^ "conduit_committee_name"
  , scheduleEConduitCommitteeState          :: !(Maybe Text) -- ^ "conduit_committee_state"
  , scheduleEConduitCommitteeStreet1        :: !(Maybe Text) -- ^ "conduit_committee_street1"
  , scheduleEConduitCommitteeStreet2        :: !(Maybe Text) -- ^ "conduit_committee_street2"
  , scheduleEConduitCommitteeZip            :: !(Maybe Int) -- ^ "conduit_committee_zip"
  , scheduleEDisseminationDate              :: !(Maybe Date) -- ^ "dissemination_date"
  , scheduleEElectionType                   :: !(Maybe Text) -- ^ "election_type" - Election type  Convention, Primary, General, Special, Runoff etc.
  , scheduleEElectionTypeFull               :: !(Maybe Text) -- ^ "election_type_full" - Election type  Convention, Primary, General, Special, Runoff etc.
  , scheduleEExpenditureAmount              :: !(Maybe Double) -- ^ "expenditure_amount"
  , scheduleEExpenditureDate                :: !(Maybe Date) -- ^ "expenditure_date"
  , scheduleEExpenditureDescription         :: !(Maybe Text) -- ^ "expenditure_description"
  , scheduleEFileNumber                     :: !(Maybe Int) -- ^ "file_number"
  , scheduleEFilerFirstName                 :: !(Maybe Text) -- ^ "filer_first_name"
  , scheduleEFilerLastName                  :: !(Maybe Text) -- ^ "filer_last_name"
  , scheduleEFilerMiddleName                :: !(Maybe Text) -- ^ "filer_middle_name"
  , scheduleEFilerPrefix                    :: !(Maybe Text) -- ^ "filer_prefix"
  , scheduleEFilerSuffix                    :: !(Maybe Text) -- ^ "filer_suffix"
  , scheduleEFilingForm                     :: !(Maybe Text) -- ^ "filing_form"
  , scheduleEImageNumber                    :: !(Maybe Text) -- ^ "image_number"
  , scheduleEIndependentSignDate            :: !(Maybe Date) -- ^ "independent_sign_date"
  , scheduleEIndependentSignName            :: !(Maybe Text) -- ^ "independent_sign_name"
  , scheduleEIsNotice                       :: !(Maybe Bool) -- ^ "is_notice"
  , scheduleELineNumber                     :: !(Maybe Text) -- ^ "line_number"
  , scheduleELinkId                         :: !(Maybe Int) -- ^ "link_id"
  , scheduleEMemoCode                       :: !(Maybe Text) -- ^ "memo_code"
  , scheduleEMemoCodeFull                   :: !(Maybe Text) -- ^ "memo_code_full"
  , scheduleEMemoText                       :: !(Maybe Text) -- ^ "memo_text"
  , scheduleEMemoedSubtotal                 :: !(Maybe Bool) -- ^ "memoed_subtotal"
  , scheduleENotaryCommissionExpirationDate :: !(Maybe Date) -- ^ "notary_commission_expiration_date"
  , scheduleENotarySignDate                 :: !(Maybe Date) -- ^ "notary_sign_date"
  , scheduleENotarySignName                 :: !(Maybe Text) -- ^ "notary_sign_name"
  , scheduleEOfficeTotalYtd                 :: !(Maybe Double) -- ^ "office_total_ytd"
  , scheduleEOriginalSubId                  :: !(Maybe Text) -- ^ "original_sub_id"
  , scheduleEPayeeCity                      :: !(Maybe Text) -- ^ "payee_city"
  , scheduleEPayeeFirstName                 :: !(Maybe Text) -- ^ "payee_first_name"
  , scheduleEPayeeLastName                  :: !(Maybe Text) -- ^ "payee_last_name"
  , scheduleEPayeeMiddleName                :: !(Maybe Text) -- ^ "payee_middle_name"
  , scheduleEPayeeName                      :: !(Maybe Text) -- ^ "payee_name"
  , scheduleEPayeePrefix                    :: !(Maybe Text) -- ^ "payee_prefix"
  , scheduleEPayeeState                     :: !(Maybe Text) -- ^ "payee_state"
  , scheduleEPayeeStreet1                   :: !(Maybe Text) -- ^ "payee_street_1"
  , scheduleEPayeeStreet2                   :: !(Maybe Text) -- ^ "payee_street_2"
  , scheduleEPayeeSuffix                    :: !(Maybe Text) -- ^ "payee_suffix"
  , scheduleEPayeeZip                       :: !(Maybe Text) -- ^ "payee_zip"
  , scheduleEPdfUrl                         :: !(Maybe Text) -- ^ "pdf_url"
  , scheduleEPreviousFileNumber             :: !(Maybe Int) -- ^ "previous_file_number"
  , scheduleEReportType                     :: !(Maybe Text) -- ^ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE)
  , scheduleEReportYear                     :: !(Maybe Int) -- ^ "report_year" -  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date.
  , scheduleEScheduleType                   :: !(Maybe Text) -- ^ "schedule_type"
  , scheduleEScheduleTypeFull               :: !(Maybe Text) -- ^ "schedule_type_full"
  , scheduleESubId                          :: !(Maybe Text) -- ^ "sub_id"
  , scheduleESupportOpposeIndicator         :: !(Maybe Text) -- ^ "support_oppose_indicator"
  , scheduleETransactionId                  :: !(Maybe Int) -- ^ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleE
instance A.FromJSON ScheduleE where
  parseJSON = A.withObject "ScheduleE" $ \o ->
    ScheduleE
      <$> (o .:? "action_code")
      <*> (o .:? "action_code_full")
      <*> (o .:? "amendment_indicator")
      <*> (o .:? "amendment_number")
      <*> (o .:? "back_reference_schedule_name")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "candidate")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_last_name")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_office_district")
      <*> (o .:? "candidate_office_state")
      <*> (o .:? "candidate_party")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "category_code")
      <*> (o .:? "category_code_full")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "conduit_committee_city")
      <*> (o .:? "conduit_committee_id")
      <*> (o .:? "conduit_committee_name")
      <*> (o .:? "conduit_committee_state")
      <*> (o .:? "conduit_committee_street1")
      <*> (o .:? "conduit_committee_street2")
      <*> (o .:? "conduit_committee_zip")
      <*> (o .:? "dissemination_date")
      <*> (o .:? "election_type")
      <*> (o .:? "election_type_full")
      <*> (o .:? "expenditure_amount")
      <*> (o .:? "expenditure_date")
      <*> (o .:? "expenditure_description")
      <*> (o .:? "file_number")
      <*> (o .:? "filer_first_name")
      <*> (o .:? "filer_last_name")
      <*> (o .:? "filer_middle_name")
      <*> (o .:? "filer_prefix")
      <*> (o .:? "filer_suffix")
      <*> (o .:? "filing_form")
      <*> (o .:? "image_number")
      <*> (o .:? "independent_sign_date")
      <*> (o .:? "independent_sign_name")
      <*> (o .:? "is_notice")
      <*> (o .:? "line_number")
      <*> (o .:? "link_id")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_code_full")
      <*> (o .:? "memo_text")
      <*> (o .:? "memoed_subtotal")
      <*> (o .:? "notary_commission_expiration_date")
      <*> (o .:? "notary_sign_date")
      <*> (o .:? "notary_sign_name")
      <*> (o .:? "office_total_ytd")
      <*> (o .:? "original_sub_id")
      <*> (o .:? "payee_city")
      <*> (o .:? "payee_first_name")
      <*> (o .:? "payee_last_name")
      <*> (o .:? "payee_middle_name")
      <*> (o .:? "payee_name")
      <*> (o .:? "payee_prefix")
      <*> (o .:? "payee_state")
      <*> (o .:? "payee_street_1")
      <*> (o .:? "payee_street_2")
      <*> (o .:? "payee_suffix")
      <*> (o .:? "payee_zip")
      <*> (o .:? "pdf_url")
      <*> (o .:? "previous_file_number")
      <*> (o .:? "report_type")
      <*> (o .:? "report_year")
      <*> (o .:? "schedule_type")
      <*> (o .:? "schedule_type_full")
      <*> (o .:? "sub_id")
      <*> (o .:? "support_oppose_indicator")
      <*> (o .:? "transaction_id")

-- | ToJSON ScheduleE
instance A.ToJSON ScheduleE where
  toJSON ScheduleE {..} =
   _omitNulls
      [ "action_code" .= scheduleEActionCode
      , "action_code_full" .= scheduleEActionCodeFull
      , "amendment_indicator" .= scheduleEAmendmentIndicator
      , "amendment_number" .= scheduleEAmendmentNumber
      , "back_reference_schedule_name" .= scheduleEBackReferenceScheduleName
      , "back_reference_transaction_id" .= scheduleEBackReferenceTransactionId
      , "candidate" .= scheduleECandidate
      , "candidate_first_name" .= scheduleECandidateFirstName
      , "candidate_id" .= scheduleECandidateId
      , "candidate_last_name" .= scheduleECandidateLastName
      , "candidate_middle_name" .= scheduleECandidateMiddleName
      , "candidate_name" .= scheduleECandidateName
      , "candidate_office" .= scheduleECandidateOffice
      , "candidate_office_district" .= scheduleECandidateOfficeDistrict
      , "candidate_office_state" .= scheduleECandidateOfficeState
      , "candidate_party" .= scheduleECandidateParty
      , "candidate_prefix" .= scheduleECandidatePrefix
      , "candidate_suffix" .= scheduleECandidateSuffix
      , "category_code" .= scheduleECategoryCode
      , "category_code_full" .= scheduleECategoryCodeFull
      , "committee" .= scheduleECommittee
      , "committee_id" .= scheduleECommitteeId
      , "conduit_committee_city" .= scheduleEConduitCommitteeCity
      , "conduit_committee_id" .= scheduleEConduitCommitteeId
      , "conduit_committee_name" .= scheduleEConduitCommitteeName
      , "conduit_committee_state" .= scheduleEConduitCommitteeState
      , "conduit_committee_street1" .= scheduleEConduitCommitteeStreet1
      , "conduit_committee_street2" .= scheduleEConduitCommitteeStreet2
      , "conduit_committee_zip" .= scheduleEConduitCommitteeZip
      , "dissemination_date" .= scheduleEDisseminationDate
      , "election_type" .= scheduleEElectionType
      , "election_type_full" .= scheduleEElectionTypeFull
      , "expenditure_amount" .= scheduleEExpenditureAmount
      , "expenditure_date" .= scheduleEExpenditureDate
      , "expenditure_description" .= scheduleEExpenditureDescription
      , "file_number" .= scheduleEFileNumber
      , "filer_first_name" .= scheduleEFilerFirstName
      , "filer_last_name" .= scheduleEFilerLastName
      , "filer_middle_name" .= scheduleEFilerMiddleName
      , "filer_prefix" .= scheduleEFilerPrefix
      , "filer_suffix" .= scheduleEFilerSuffix
      , "filing_form" .= scheduleEFilingForm
      , "image_number" .= scheduleEImageNumber
      , "independent_sign_date" .= scheduleEIndependentSignDate
      , "independent_sign_name" .= scheduleEIndependentSignName
      , "is_notice" .= scheduleEIsNotice
      , "line_number" .= scheduleELineNumber
      , "link_id" .= scheduleELinkId
      , "memo_code" .= scheduleEMemoCode
      , "memo_code_full" .= scheduleEMemoCodeFull
      , "memo_text" .= scheduleEMemoText
      , "memoed_subtotal" .= scheduleEMemoedSubtotal
      , "notary_commission_expiration_date" .= scheduleENotaryCommissionExpirationDate
      , "notary_sign_date" .= scheduleENotarySignDate
      , "notary_sign_name" .= scheduleENotarySignName
      , "office_total_ytd" .= scheduleEOfficeTotalYtd
      , "original_sub_id" .= scheduleEOriginalSubId
      , "payee_city" .= scheduleEPayeeCity
      , "payee_first_name" .= scheduleEPayeeFirstName
      , "payee_last_name" .= scheduleEPayeeLastName
      , "payee_middle_name" .= scheduleEPayeeMiddleName
      , "payee_name" .= scheduleEPayeeName
      , "payee_prefix" .= scheduleEPayeePrefix
      , "payee_state" .= scheduleEPayeeState
      , "payee_street_1" .= scheduleEPayeeStreet1
      , "payee_street_2" .= scheduleEPayeeStreet2
      , "payee_suffix" .= scheduleEPayeeSuffix
      , "payee_zip" .= scheduleEPayeeZip
      , "pdf_url" .= scheduleEPdfUrl
      , "previous_file_number" .= scheduleEPreviousFileNumber
      , "report_type" .= scheduleEReportType
      , "report_year" .= scheduleEReportYear
      , "schedule_type" .= scheduleEScheduleType
      , "schedule_type_full" .= scheduleEScheduleTypeFull
      , "sub_id" .= scheduleESubId
      , "support_oppose_indicator" .= scheduleESupportOpposeIndicator
      , "transaction_id" .= scheduleETransactionId
      ]


-- | Construct a value of type 'ScheduleE' (by applying it's required fields, if any)
mkScheduleE
  :: ScheduleE
mkScheduleE =
  ScheduleE
  { scheduleEActionCode = Nothing
  , scheduleEActionCodeFull = Nothing
  , scheduleEAmendmentIndicator = Nothing
  , scheduleEAmendmentNumber = Nothing
  , scheduleEBackReferenceScheduleName = Nothing
  , scheduleEBackReferenceTransactionId = Nothing
  , scheduleECandidate = Nothing
  , scheduleECandidateFirstName = Nothing
  , scheduleECandidateId = Nothing
  , scheduleECandidateLastName = Nothing
  , scheduleECandidateMiddleName = Nothing
  , scheduleECandidateName = Nothing
  , scheduleECandidateOffice = Nothing
  , scheduleECandidateOfficeDistrict = Nothing
  , scheduleECandidateOfficeState = Nothing
  , scheduleECandidateParty = Nothing
  , scheduleECandidatePrefix = Nothing
  , scheduleECandidateSuffix = Nothing
  , scheduleECategoryCode = Nothing
  , scheduleECategoryCodeFull = Nothing
  , scheduleECommittee = Nothing
  , scheduleECommitteeId = Nothing
  , scheduleEConduitCommitteeCity = Nothing
  , scheduleEConduitCommitteeId = Nothing
  , scheduleEConduitCommitteeName = Nothing
  , scheduleEConduitCommitteeState = Nothing
  , scheduleEConduitCommitteeStreet1 = Nothing
  , scheduleEConduitCommitteeStreet2 = Nothing
  , scheduleEConduitCommitteeZip = Nothing
  , scheduleEDisseminationDate = Nothing
  , scheduleEElectionType = Nothing
  , scheduleEElectionTypeFull = Nothing
  , scheduleEExpenditureAmount = Nothing
  , scheduleEExpenditureDate = Nothing
  , scheduleEExpenditureDescription = Nothing
  , scheduleEFileNumber = Nothing
  , scheduleEFilerFirstName = Nothing
  , scheduleEFilerLastName = Nothing
  , scheduleEFilerMiddleName = Nothing
  , scheduleEFilerPrefix = Nothing
  , scheduleEFilerSuffix = Nothing
  , scheduleEFilingForm = Nothing
  , scheduleEImageNumber = Nothing
  , scheduleEIndependentSignDate = Nothing
  , scheduleEIndependentSignName = Nothing
  , scheduleEIsNotice = Nothing
  , scheduleELineNumber = Nothing
  , scheduleELinkId = Nothing
  , scheduleEMemoCode = Nothing
  , scheduleEMemoCodeFull = Nothing
  , scheduleEMemoText = Nothing
  , scheduleEMemoedSubtotal = Nothing
  , scheduleENotaryCommissionExpirationDate = Nothing
  , scheduleENotarySignDate = Nothing
  , scheduleENotarySignName = Nothing
  , scheduleEOfficeTotalYtd = Nothing
  , scheduleEOriginalSubId = Nothing
  , scheduleEPayeeCity = Nothing
  , scheduleEPayeeFirstName = Nothing
  , scheduleEPayeeLastName = Nothing
  , scheduleEPayeeMiddleName = Nothing
  , scheduleEPayeeName = Nothing
  , scheduleEPayeePrefix = Nothing
  , scheduleEPayeeState = Nothing
  , scheduleEPayeeStreet1 = Nothing
  , scheduleEPayeeStreet2 = Nothing
  , scheduleEPayeeSuffix = Nothing
  , scheduleEPayeeZip = Nothing
  , scheduleEPdfUrl = Nothing
  , scheduleEPreviousFileNumber = Nothing
  , scheduleEReportType = Nothing
  , scheduleEReportYear = Nothing
  , scheduleEScheduleType = Nothing
  , scheduleEScheduleTypeFull = Nothing
  , scheduleESubId = Nothing
  , scheduleESupportOpposeIndicator = Nothing
  , scheduleETransactionId = Nothing
  }

-- ** ScheduleEByCandidate
-- | ScheduleEByCandidate
data ScheduleEByCandidate = ScheduleEByCandidate
  { scheduleEByCandidateCandidateId            :: !(Maybe Text) -- ^ "candidate_id"
  , scheduleEByCandidateCandidateName          :: !(Maybe Text) -- ^ "candidate_name"
  , scheduleEByCandidateCommitteeId            :: !(Maybe Text) -- ^ "committee_id"
  , scheduleEByCandidateCommitteeName          :: !(Maybe Text) -- ^ "committee_name"
  , scheduleEByCandidateCount                  :: !(Maybe Int) -- ^ "count" - Number of records making up the total
  , scheduleEByCandidateCycle                  :: !(Int) -- ^ /Required/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  , scheduleEByCandidateSupportOpposeIndicator :: !(Text) -- ^ /Required/ "support_oppose_indicator" - Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
  , scheduleEByCandidateTotal                  :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleEByCandidate
instance A.FromJSON ScheduleEByCandidate where
  parseJSON = A.withObject "ScheduleEByCandidate" $ \o ->
    ScheduleEByCandidate
      <$> (o .:? "candidate_id")
      <*> (o .:? "candidate_name")
      <*> (o .:? "committee_id")
      <*> (o .:? "committee_name")
      <*> (o .:? "count")
      <*> (o .:  "cycle")
      <*> (o .:  "support_oppose_indicator")
      <*> (o .:? "total")

-- | ToJSON ScheduleEByCandidate
instance A.ToJSON ScheduleEByCandidate where
  toJSON ScheduleEByCandidate {..} =
   _omitNulls
      [ "candidate_id" .= scheduleEByCandidateCandidateId
      , "candidate_name" .= scheduleEByCandidateCandidateName
      , "committee_id" .= scheduleEByCandidateCommitteeId
      , "committee_name" .= scheduleEByCandidateCommitteeName
      , "count" .= scheduleEByCandidateCount
      , "cycle" .= scheduleEByCandidateCycle
      , "support_oppose_indicator" .= scheduleEByCandidateSupportOpposeIndicator
      , "total" .= scheduleEByCandidateTotal
      ]


-- | Construct a value of type 'ScheduleEByCandidate' (by applying it's required fields, if any)
mkScheduleEByCandidate
  :: Int -- ^ 'scheduleEByCandidateCycle':  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
  -> Text -- ^ 'scheduleEByCandidateSupportOpposeIndicator': Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
  -> ScheduleEByCandidate
mkScheduleEByCandidate scheduleEByCandidateCycle scheduleEByCandidateSupportOpposeIndicator =
  ScheduleEByCandidate
  { scheduleEByCandidateCandidateId = Nothing
  , scheduleEByCandidateCandidateName = Nothing
  , scheduleEByCandidateCommitteeId = Nothing
  , scheduleEByCandidateCommitteeName = Nothing
  , scheduleEByCandidateCount = Nothing
  , scheduleEByCandidateCycle
  , scheduleEByCandidateSupportOpposeIndicator
  , scheduleEByCandidateTotal = Nothing
  }

-- ** ScheduleEByCandidatePage
-- | ScheduleEByCandidatePage
data ScheduleEByCandidatePage = ScheduleEByCandidatePage
  { scheduleEByCandidatePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleEByCandidatePageResults    :: !(Maybe [ScheduleEByCandidate]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleEByCandidatePage
instance A.FromJSON ScheduleEByCandidatePage where
  parseJSON = A.withObject "ScheduleEByCandidatePage" $ \o ->
    ScheduleEByCandidatePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleEByCandidatePage
instance A.ToJSON ScheduleEByCandidatePage where
  toJSON ScheduleEByCandidatePage {..} =
   _omitNulls
      [ "pagination" .= scheduleEByCandidatePagePagination
      , "results" .= scheduleEByCandidatePageResults
      ]


-- | Construct a value of type 'ScheduleEByCandidatePage' (by applying it's required fields, if any)
mkScheduleEByCandidatePage
  :: ScheduleEByCandidatePage
mkScheduleEByCandidatePage =
  ScheduleEByCandidatePage
  { scheduleEByCandidatePagePagination = Nothing
  , scheduleEByCandidatePageResults = Nothing
  }

-- ** ScheduleEEfile
-- | ScheduleEEfile
data ScheduleEEfile = ScheduleEEfile
  { scheduleEEfileAmendmentIndicator         :: !(Maybe Text) -- ^ "amendment_indicator"
  , scheduleEEfileBackReferenceScheduleName  :: !(Maybe Text) -- ^ "back_reference_schedule_name"
  , scheduleEEfileBackReferenceTransactionId :: !(Maybe Text) -- ^ "back_reference_transaction_id"
  , scheduleEEfileBeginningImageNumber       :: !(Maybe Text) -- ^ "beginning_image_number"
  , scheduleEEfileCandOfficeDistrict         :: !(Maybe Text) -- ^ "cand_office_district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
  , scheduleEEfileCandOfficeState            :: !(Maybe Text) -- ^ "cand_office_state" - US state or territory
  , scheduleEEfileCandidateFirstName         :: !(Maybe Text) -- ^ "candidate_first_name"
  , scheduleEEfileCandidateId                :: !(Maybe Text) -- ^ "candidate_id"
  , scheduleEEfileCandidateMiddleName        :: !(Maybe Text) -- ^ "candidate_middle_name"
  , scheduleEEfileCandidateName              :: !(Maybe Text) -- ^ "candidate_name" - Name of candidate running for office
  , scheduleEEfileCandidateOffice            :: !(Maybe Text) -- ^ "candidate_office" - Federal office candidate runs for: H, S or P
  , scheduleEEfileCandidatePrefix            :: !(Maybe Text) -- ^ "candidate_prefix"
  , scheduleEEfileCandidateSuffix            :: !(Maybe Text) -- ^ "candidate_suffix"
  , scheduleEEfileCategoryCode               :: !(Maybe Text) -- ^ "category_code"
  , scheduleEEfileCommittee                  :: !(Maybe CommitteeHistory) -- ^ "committee"
  , scheduleEEfileCommitteeId                :: !(Maybe Text) -- ^ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , scheduleEEfileCsvUrl                     :: !(Maybe Text) -- ^ "csv_url"
  , scheduleEEfileDisseminationDate          :: !(Maybe Date) -- ^ "dissemination_date"
  , scheduleEEfileEntityType                 :: !(Maybe Text) -- ^ "entity_type"
  , scheduleEEfileExpenditureAmount          :: !(Maybe Int) -- ^ "expenditure_amount"
  , scheduleEEfileExpenditureDate            :: !(Maybe Date) -- ^ "expenditure_date"
  , scheduleEEfileExpenditureDescription     :: !(Maybe Text) -- ^ "expenditure_description"
  , scheduleEEfileFecUrl                     :: !(Maybe Text) -- ^ "fec_url"
  , scheduleEEfileFileNumber                 :: !(Int) -- ^ /Required/ "file_number"
  , scheduleEEfileFilerFirstName             :: !(Maybe Text) -- ^ "filer_first_name"
  , scheduleEEfileFilerLastName              :: !(Maybe Text) -- ^ "filer_last_name"
  , scheduleEEfileFilerMiddleName            :: !(Maybe Text) -- ^ "filer_middle_name"
  , scheduleEEfileFilerPrefix                :: !(Maybe Text) -- ^ "filer_prefix"
  , scheduleEEfileFilerSuffix                :: !(Maybe Text) -- ^ "filer_suffix"
  , scheduleEEfileFiling                     :: !(Maybe EFilings) -- ^ "filing"
  , scheduleEEfileImageNumber                :: !(Maybe Text) -- ^ "image_number" - An unique identifier for each page the electronic or paper report.
  , scheduleEEfileIsNotice                   :: !(Maybe Bool) -- ^ "is_notice"
  , scheduleEEfileLineNumber                 :: !(Maybe Text) -- ^ "line_number"
  , scheduleEEfileLoadTimestamp              :: !(Maybe DateTime) -- ^ "load_timestamp"
  , scheduleEEfileMemoCode                   :: !(Maybe Text) -- ^ "memo_code"
  , scheduleEEfileMemoText                   :: !(Maybe Text) -- ^ "memo_text"
  , scheduleEEfileNotarySignDate             :: !(Maybe Date) -- ^ "notary_sign_date"
  , scheduleEEfileOfficeTotalYtd             :: !(Maybe Float) -- ^ "office_total_ytd"
  , scheduleEEfilePayeeCity                  :: !(Maybe Text) -- ^ "payee_city"
  , scheduleEEfilePayeeFirstName             :: !(Maybe Text) -- ^ "payee_first_name"
  , scheduleEEfilePayeeLastName              :: !(Maybe Text) -- ^ "payee_last_name"
  , scheduleEEfilePayeeMiddleName            :: !(Maybe Text) -- ^ "payee_middle_name"
  , scheduleEEfilePayeeName                  :: !(Maybe Text) -- ^ "payee_name"
  , scheduleEEfilePayeePrefix                :: !(Maybe Text) -- ^ "payee_prefix"
  , scheduleEEfilePayeeState                 :: !(Maybe Text) -- ^ "payee_state"
  , scheduleEEfilePayeeStreet1               :: !(Maybe Text) -- ^ "payee_street_1"
  , scheduleEEfilePayeeStreet2               :: !(Maybe Text) -- ^ "payee_street_2"
  , scheduleEEfilePayeeSuffix                :: !(Maybe Text) -- ^ "payee_suffix"
  , scheduleEEfilePayeeZip                   :: !(Maybe Text) -- ^ "payee_zip"
  , scheduleEEfilePdfUrl                     :: !(Maybe Text) -- ^ "pdf_url"
  , scheduleEEfileRelatedLineNumber          :: !(Int) -- ^ /Required/ "related_line_number"
  , scheduleEEfileReportType                 :: !(Maybe Text) -- ^ "report_type"
  , scheduleEEfileSupportOpposeIndicator     :: !(Maybe Text) -- ^ "support_oppose_indicator"
  , scheduleEEfileTransactionId              :: !(Maybe Text) -- ^ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleEEfile
instance A.FromJSON ScheduleEEfile where
  parseJSON = A.withObject "ScheduleEEfile" $ \o ->
    ScheduleEEfile
      <$> (o .:? "amendment_indicator")
      <*> (o .:? "back_reference_schedule_name")
      <*> (o .:? "back_reference_transaction_id")
      <*> (o .:? "beginning_image_number")
      <*> (o .:? "cand_office_district")
      <*> (o .:? "cand_office_state")
      <*> (o .:? "candidate_first_name")
      <*> (o .:? "candidate_id")
      <*> (o .:? "candidate_middle_name")
      <*> (o .:? "candidate_name")
      <*> (o .:? "candidate_office")
      <*> (o .:? "candidate_prefix")
      <*> (o .:? "candidate_suffix")
      <*> (o .:? "category_code")
      <*> (o .:? "committee")
      <*> (o .:? "committee_id")
      <*> (o .:? "csv_url")
      <*> (o .:? "dissemination_date")
      <*> (o .:? "entity_type")
      <*> (o .:? "expenditure_amount")
      <*> (o .:? "expenditure_date")
      <*> (o .:? "expenditure_description")
      <*> (o .:? "fec_url")
      <*> (o .:  "file_number")
      <*> (o .:? "filer_first_name")
      <*> (o .:? "filer_last_name")
      <*> (o .:? "filer_middle_name")
      <*> (o .:? "filer_prefix")
      <*> (o .:? "filer_suffix")
      <*> (o .:? "filing")
      <*> (o .:? "image_number")
      <*> (o .:? "is_notice")
      <*> (o .:? "line_number")
      <*> (o .:? "load_timestamp")
      <*> (o .:? "memo_code")
      <*> (o .:? "memo_text")
      <*> (o .:? "notary_sign_date")
      <*> (o .:? "office_total_ytd")
      <*> (o .:? "payee_city")
      <*> (o .:? "payee_first_name")
      <*> (o .:? "payee_last_name")
      <*> (o .:? "payee_middle_name")
      <*> (o .:? "payee_name")
      <*> (o .:? "payee_prefix")
      <*> (o .:? "payee_state")
      <*> (o .:? "payee_street_1")
      <*> (o .:? "payee_street_2")
      <*> (o .:? "payee_suffix")
      <*> (o .:? "payee_zip")
      <*> (o .:? "pdf_url")
      <*> (o .:  "related_line_number")
      <*> (o .:? "report_type")
      <*> (o .:? "support_oppose_indicator")
      <*> (o .:? "transaction_id")

-- | ToJSON ScheduleEEfile
instance A.ToJSON ScheduleEEfile where
  toJSON ScheduleEEfile {..} =
   _omitNulls
      [ "amendment_indicator" .= scheduleEEfileAmendmentIndicator
      , "back_reference_schedule_name" .= scheduleEEfileBackReferenceScheduleName
      , "back_reference_transaction_id" .= scheduleEEfileBackReferenceTransactionId
      , "beginning_image_number" .= scheduleEEfileBeginningImageNumber
      , "cand_office_district" .= scheduleEEfileCandOfficeDistrict
      , "cand_office_state" .= scheduleEEfileCandOfficeState
      , "candidate_first_name" .= scheduleEEfileCandidateFirstName
      , "candidate_id" .= scheduleEEfileCandidateId
      , "candidate_middle_name" .= scheduleEEfileCandidateMiddleName
      , "candidate_name" .= scheduleEEfileCandidateName
      , "candidate_office" .= scheduleEEfileCandidateOffice
      , "candidate_prefix" .= scheduleEEfileCandidatePrefix
      , "candidate_suffix" .= scheduleEEfileCandidateSuffix
      , "category_code" .= scheduleEEfileCategoryCode
      , "committee" .= scheduleEEfileCommittee
      , "committee_id" .= scheduleEEfileCommitteeId
      , "csv_url" .= scheduleEEfileCsvUrl
      , "dissemination_date" .= scheduleEEfileDisseminationDate
      , "entity_type" .= scheduleEEfileEntityType
      , "expenditure_amount" .= scheduleEEfileExpenditureAmount
      , "expenditure_date" .= scheduleEEfileExpenditureDate
      , "expenditure_description" .= scheduleEEfileExpenditureDescription
      , "fec_url" .= scheduleEEfileFecUrl
      , "file_number" .= scheduleEEfileFileNumber
      , "filer_first_name" .= scheduleEEfileFilerFirstName
      , "filer_last_name" .= scheduleEEfileFilerLastName
      , "filer_middle_name" .= scheduleEEfileFilerMiddleName
      , "filer_prefix" .= scheduleEEfileFilerPrefix
      , "filer_suffix" .= scheduleEEfileFilerSuffix
      , "filing" .= scheduleEEfileFiling
      , "image_number" .= scheduleEEfileImageNumber
      , "is_notice" .= scheduleEEfileIsNotice
      , "line_number" .= scheduleEEfileLineNumber
      , "load_timestamp" .= scheduleEEfileLoadTimestamp
      , "memo_code" .= scheduleEEfileMemoCode
      , "memo_text" .= scheduleEEfileMemoText
      , "notary_sign_date" .= scheduleEEfileNotarySignDate
      , "office_total_ytd" .= scheduleEEfileOfficeTotalYtd
      , "payee_city" .= scheduleEEfilePayeeCity
      , "payee_first_name" .= scheduleEEfilePayeeFirstName
      , "payee_last_name" .= scheduleEEfilePayeeLastName
      , "payee_middle_name" .= scheduleEEfilePayeeMiddleName
      , "payee_name" .= scheduleEEfilePayeeName
      , "payee_prefix" .= scheduleEEfilePayeePrefix
      , "payee_state" .= scheduleEEfilePayeeState
      , "payee_street_1" .= scheduleEEfilePayeeStreet1
      , "payee_street_2" .= scheduleEEfilePayeeStreet2
      , "payee_suffix" .= scheduleEEfilePayeeSuffix
      , "payee_zip" .= scheduleEEfilePayeeZip
      , "pdf_url" .= scheduleEEfilePdfUrl
      , "related_line_number" .= scheduleEEfileRelatedLineNumber
      , "report_type" .= scheduleEEfileReportType
      , "support_oppose_indicator" .= scheduleEEfileSupportOpposeIndicator
      , "transaction_id" .= scheduleEEfileTransactionId
      ]


-- | Construct a value of type 'ScheduleEEfile' (by applying it's required fields, if any)
mkScheduleEEfile
  :: Int -- ^ 'scheduleEEfileFileNumber'
  -> Int -- ^ 'scheduleEEfileRelatedLineNumber'
  -> ScheduleEEfile
mkScheduleEEfile scheduleEEfileFileNumber scheduleEEfileRelatedLineNumber =
  ScheduleEEfile
  { scheduleEEfileAmendmentIndicator = Nothing
  , scheduleEEfileBackReferenceScheduleName = Nothing
  , scheduleEEfileBackReferenceTransactionId = Nothing
  , scheduleEEfileBeginningImageNumber = Nothing
  , scheduleEEfileCandOfficeDistrict = Nothing
  , scheduleEEfileCandOfficeState = Nothing
  , scheduleEEfileCandidateFirstName = Nothing
  , scheduleEEfileCandidateId = Nothing
  , scheduleEEfileCandidateMiddleName = Nothing
  , scheduleEEfileCandidateName = Nothing
  , scheduleEEfileCandidateOffice = Nothing
  , scheduleEEfileCandidatePrefix = Nothing
  , scheduleEEfileCandidateSuffix = Nothing
  , scheduleEEfileCategoryCode = Nothing
  , scheduleEEfileCommittee = Nothing
  , scheduleEEfileCommitteeId = Nothing
  , scheduleEEfileCsvUrl = Nothing
  , scheduleEEfileDisseminationDate = Nothing
  , scheduleEEfileEntityType = Nothing
  , scheduleEEfileExpenditureAmount = Nothing
  , scheduleEEfileExpenditureDate = Nothing
  , scheduleEEfileExpenditureDescription = Nothing
  , scheduleEEfileFecUrl = Nothing
  , scheduleEEfileFileNumber
  , scheduleEEfileFilerFirstName = Nothing
  , scheduleEEfileFilerLastName = Nothing
  , scheduleEEfileFilerMiddleName = Nothing
  , scheduleEEfileFilerPrefix = Nothing
  , scheduleEEfileFilerSuffix = Nothing
  , scheduleEEfileFiling = Nothing
  , scheduleEEfileImageNumber = Nothing
  , scheduleEEfileIsNotice = Nothing
  , scheduleEEfileLineNumber = Nothing
  , scheduleEEfileLoadTimestamp = Nothing
  , scheduleEEfileMemoCode = Nothing
  , scheduleEEfileMemoText = Nothing
  , scheduleEEfileNotarySignDate = Nothing
  , scheduleEEfileOfficeTotalYtd = Nothing
  , scheduleEEfilePayeeCity = Nothing
  , scheduleEEfilePayeeFirstName = Nothing
  , scheduleEEfilePayeeLastName = Nothing
  , scheduleEEfilePayeeMiddleName = Nothing
  , scheduleEEfilePayeeName = Nothing
  , scheduleEEfilePayeePrefix = Nothing
  , scheduleEEfilePayeeState = Nothing
  , scheduleEEfilePayeeStreet1 = Nothing
  , scheduleEEfilePayeeStreet2 = Nothing
  , scheduleEEfilePayeeSuffix = Nothing
  , scheduleEEfilePayeeZip = Nothing
  , scheduleEEfilePdfUrl = Nothing
  , scheduleEEfileRelatedLineNumber
  , scheduleEEfileReportType = Nothing
  , scheduleEEfileSupportOpposeIndicator = Nothing
  , scheduleEEfileTransactionId = Nothing
  }

-- ** ScheduleEEfilePage
-- | ScheduleEEfilePage
data ScheduleEEfilePage = ScheduleEEfilePage
  { scheduleEEfilePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , scheduleEEfilePageResults    :: !(Maybe [ScheduleEEfile]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleEEfilePage
instance A.FromJSON ScheduleEEfilePage where
  parseJSON = A.withObject "ScheduleEEfilePage" $ \o ->
    ScheduleEEfilePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleEEfilePage
instance A.ToJSON ScheduleEEfilePage where
  toJSON ScheduleEEfilePage {..} =
   _omitNulls
      [ "pagination" .= scheduleEEfilePagePagination
      , "results" .= scheduleEEfilePageResults
      ]


-- | Construct a value of type 'ScheduleEEfilePage' (by applying it's required fields, if any)
mkScheduleEEfilePage
  :: ScheduleEEfilePage
mkScheduleEEfilePage =
  ScheduleEEfilePage
  { scheduleEEfilePagePagination = Nothing
  , scheduleEEfilePageResults = Nothing
  }

-- ** ScheduleEPage
-- | ScheduleEPage
data ScheduleEPage = ScheduleEPage
  { scheduleEPagePagination :: !(Maybe SeekInfo) -- ^ "pagination"
  , scheduleEPageResults    :: !(Maybe [ScheduleE]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScheduleEPage
instance A.FromJSON ScheduleEPage where
  parseJSON = A.withObject "ScheduleEPage" $ \o ->
    ScheduleEPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON ScheduleEPage
instance A.ToJSON ScheduleEPage where
  toJSON ScheduleEPage {..} =
   _omitNulls
      [ "pagination" .= scheduleEPagePagination
      , "results" .= scheduleEPageResults
      ]


-- | Construct a value of type 'ScheduleEPage' (by applying it's required fields, if any)
mkScheduleEPage
  :: ScheduleEPage
mkScheduleEPage =
  ScheduleEPage
  { scheduleEPagePagination = Nothing
  , scheduleEPageResults = Nothing
  }

-- ** SeekInfo
-- | SeekInfo
data SeekInfo = SeekInfo
  { seekInfoCount       :: !(Maybe Int) -- ^ "count"
  , seekInfoLastIndexes :: !(Maybe Text) -- ^ "last_indexes"
  , seekInfoPages       :: !(Maybe Int) -- ^ "pages"
  , seekInfoPerPage     :: !(Maybe Int) -- ^ "per_page"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SeekInfo
instance A.FromJSON SeekInfo where
  parseJSON = A.withObject "SeekInfo" $ \o ->
    SeekInfo
      <$> (o .:? "count")
      <*> (o .:? "last_indexes")
      <*> (o .:? "pages")
      <*> (o .:? "per_page")

-- | ToJSON SeekInfo
instance A.ToJSON SeekInfo where
  toJSON SeekInfo {..} =
   _omitNulls
      [ "count" .= seekInfoCount
      , "last_indexes" .= seekInfoLastIndexes
      , "pages" .= seekInfoPages
      , "per_page" .= seekInfoPerPage
      ]


-- | Construct a value of type 'SeekInfo' (by applying it's required fields, if any)
mkSeekInfo
  :: SeekInfo
mkSeekInfo =
  SeekInfo
  { seekInfoCount = Nothing
  , seekInfoLastIndexes = Nothing
  , seekInfoPages = Nothing
  , seekInfoPerPage = Nothing
  }

-- ** StateElectionOfficeInfo
-- | StateElectionOfficeInfo
data StateElectionOfficeInfo = StateElectionOfficeInfo
  { stateElectionOfficeInfoAddressLine1         :: !(Maybe Text) -- ^ "address_line1"
  , stateElectionOfficeInfoAddressLine2         :: !(Maybe Text) -- ^ "address_line2"
  , stateElectionOfficeInfoCity                 :: !(Maybe Text) -- ^ "city"
  , stateElectionOfficeInfoEmail                :: !(Maybe Text) -- ^ "email"
  , stateElectionOfficeInfoFaxNumber            :: !(Maybe Text) -- ^ "fax_number"
  , stateElectionOfficeInfoMailingAddress1      :: !(Maybe Text) -- ^ "mailing_address1"
  , stateElectionOfficeInfoMailingAddress2      :: !(Maybe Text) -- ^ "mailing_address2"
  , stateElectionOfficeInfoMailingCity          :: !(Maybe Text) -- ^ "mailing_city"
  , stateElectionOfficeInfoMailingState         :: !(Maybe Text) -- ^ "mailing_state"
  , stateElectionOfficeInfoMailingZipcode       :: !(Maybe Text) -- ^ "mailing_zipcode"
  , stateElectionOfficeInfoOfficeName           :: !(Maybe Text) -- ^ "office_name"
  , stateElectionOfficeInfoOfficeType           :: !(Text) -- ^ /Required/ "office_type"
  , stateElectionOfficeInfoPrimaryPhoneNumber   :: !(Maybe Text) -- ^ "primary_phone_number"
  , stateElectionOfficeInfoSecondaryPhoneNumber :: !(Maybe Text) -- ^ "secondary_phone_number"
  , stateElectionOfficeInfoState                :: !(Text) -- ^ /Required/ "state"
  , stateElectionOfficeInfoStateFullName        :: !(Maybe Text) -- ^ "state_full_name"
  , stateElectionOfficeInfoWebsiteUrl1          :: !(Maybe Text) -- ^ "website_url1"
  , stateElectionOfficeInfoWebsiteUrl2          :: !(Maybe Text) -- ^ "website_url2"
  , stateElectionOfficeInfoZipCode              :: !(Maybe Text) -- ^ "zip_code"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON StateElectionOfficeInfo
instance A.FromJSON StateElectionOfficeInfo where
  parseJSON = A.withObject "StateElectionOfficeInfo" $ \o ->
    StateElectionOfficeInfo
      <$> (o .:? "address_line1")
      <*> (o .:? "address_line2")
      <*> (o .:? "city")
      <*> (o .:? "email")
      <*> (o .:? "fax_number")
      <*> (o .:? "mailing_address1")
      <*> (o .:? "mailing_address2")
      <*> (o .:? "mailing_city")
      <*> (o .:? "mailing_state")
      <*> (o .:? "mailing_zipcode")
      <*> (o .:? "office_name")
      <*> (o .:  "office_type")
      <*> (o .:? "primary_phone_number")
      <*> (o .:? "secondary_phone_number")
      <*> (o .:  "state")
      <*> (o .:? "state_full_name")
      <*> (o .:? "website_url1")
      <*> (o .:? "website_url2")
      <*> (o .:? "zip_code")

-- | ToJSON StateElectionOfficeInfo
instance A.ToJSON StateElectionOfficeInfo where
  toJSON StateElectionOfficeInfo {..} =
   _omitNulls
      [ "address_line1" .= stateElectionOfficeInfoAddressLine1
      , "address_line2" .= stateElectionOfficeInfoAddressLine2
      , "city" .= stateElectionOfficeInfoCity
      , "email" .= stateElectionOfficeInfoEmail
      , "fax_number" .= stateElectionOfficeInfoFaxNumber
      , "mailing_address1" .= stateElectionOfficeInfoMailingAddress1
      , "mailing_address2" .= stateElectionOfficeInfoMailingAddress2
      , "mailing_city" .= stateElectionOfficeInfoMailingCity
      , "mailing_state" .= stateElectionOfficeInfoMailingState
      , "mailing_zipcode" .= stateElectionOfficeInfoMailingZipcode
      , "office_name" .= stateElectionOfficeInfoOfficeName
      , "office_type" .= stateElectionOfficeInfoOfficeType
      , "primary_phone_number" .= stateElectionOfficeInfoPrimaryPhoneNumber
      , "secondary_phone_number" .= stateElectionOfficeInfoSecondaryPhoneNumber
      , "state" .= stateElectionOfficeInfoState
      , "state_full_name" .= stateElectionOfficeInfoStateFullName
      , "website_url1" .= stateElectionOfficeInfoWebsiteUrl1
      , "website_url2" .= stateElectionOfficeInfoWebsiteUrl2
      , "zip_code" .= stateElectionOfficeInfoZipCode
      ]


-- | Construct a value of type 'StateElectionOfficeInfo' (by applying it's required fields, if any)
mkStateElectionOfficeInfo
  :: Text -- ^ 'stateElectionOfficeInfoOfficeType'
  -> Text -- ^ 'stateElectionOfficeInfoState'
  -> StateElectionOfficeInfo
mkStateElectionOfficeInfo stateElectionOfficeInfoOfficeType stateElectionOfficeInfoState =
  StateElectionOfficeInfo
  { stateElectionOfficeInfoAddressLine1 = Nothing
  , stateElectionOfficeInfoAddressLine2 = Nothing
  , stateElectionOfficeInfoCity = Nothing
  , stateElectionOfficeInfoEmail = Nothing
  , stateElectionOfficeInfoFaxNumber = Nothing
  , stateElectionOfficeInfoMailingAddress1 = Nothing
  , stateElectionOfficeInfoMailingAddress2 = Nothing
  , stateElectionOfficeInfoMailingCity = Nothing
  , stateElectionOfficeInfoMailingState = Nothing
  , stateElectionOfficeInfoMailingZipcode = Nothing
  , stateElectionOfficeInfoOfficeName = Nothing
  , stateElectionOfficeInfoOfficeType
  , stateElectionOfficeInfoPrimaryPhoneNumber = Nothing
  , stateElectionOfficeInfoSecondaryPhoneNumber = Nothing
  , stateElectionOfficeInfoState
  , stateElectionOfficeInfoStateFullName = Nothing
  , stateElectionOfficeInfoWebsiteUrl1 = Nothing
  , stateElectionOfficeInfoWebsiteUrl2 = Nothing
  , stateElectionOfficeInfoZipCode = Nothing
  }

-- ** StateElectionOfficeInfoPage
-- | StateElectionOfficeInfoPage
data StateElectionOfficeInfoPage = StateElectionOfficeInfoPage
  { stateElectionOfficeInfoPagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , stateElectionOfficeInfoPageResults    :: !(Maybe [StateElectionOfficeInfo]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON StateElectionOfficeInfoPage
instance A.FromJSON StateElectionOfficeInfoPage where
  parseJSON = A.withObject "StateElectionOfficeInfoPage" $ \o ->
    StateElectionOfficeInfoPage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON StateElectionOfficeInfoPage
instance A.ToJSON StateElectionOfficeInfoPage where
  toJSON StateElectionOfficeInfoPage {..} =
   _omitNulls
      [ "pagination" .= stateElectionOfficeInfoPagePagination
      , "results" .= stateElectionOfficeInfoPageResults
      ]


-- | Construct a value of type 'StateElectionOfficeInfoPage' (by applying it's required fields, if any)
mkStateElectionOfficeInfoPage
  :: StateElectionOfficeInfoPage
mkStateElectionOfficeInfoPage =
  StateElectionOfficeInfoPage
  { stateElectionOfficeInfoPagePagination = Nothing
  , stateElectionOfficeInfoPageResults = Nothing
  }

-- ** TotalsCommittee
-- | TotalsCommittee
data TotalsCommittee = TotalsCommittee
  { totalsCommitteeCandidateIds            :: !(Maybe [Text]) -- ^ "candidate_ids" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
  , totalsCommitteeCashOnHandEndPeriod     :: !(Maybe Double) -- ^ "cash_on_hand_end_period"
  , totalsCommitteeCity                    :: !(Maybe Text) -- ^ "city" - City of committee as reported on the Form 1
  , totalsCommitteeCommitteeId             :: !(Text) -- ^ /Required/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
  , totalsCommitteeCommitteeType           :: !(Maybe Text) -- ^ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , totalsCommitteeCommitteeTypeFull       :: !(Maybe Text) -- ^ "committee_type_full" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account
  , totalsCommitteeCycle                   :: !(Int) -- ^ /Required/ "cycle" -  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  , totalsCommitteeCycles                  :: !(Maybe [Int]) -- ^ "cycles" -  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  , totalsCommitteeDebtsOwedByCommittee    :: !(Maybe Double) -- ^ "debts_owed_by_committee"
  , totalsCommitteeDesignation             :: !(Maybe Text) -- ^ "designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , totalsCommitteeDesignationFull         :: !(Maybe Text) -- ^ "designation_full" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC
  , totalsCommitteeDisbursements           :: !(Maybe Double) -- ^ "disbursements"
  , totalsCommitteeFilingFrequency         :: !(Maybe Text) -- ^ "filing_frequency" - The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived
  , totalsCommitteeIndependentExpenditures :: !(Maybe Double) -- ^ "independent_expenditures"
  , totalsCommitteeName                    :: !(Maybe Text) -- ^ "name" - The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
  , totalsCommitteeOrganizationType        :: !(Maybe Text) -- ^ "organization_type" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , totalsCommitteeOrganizationTypeFull    :: !(Maybe Text) -- ^ "organization_type_full" - The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock
  , totalsCommitteeParty                   :: !(Maybe Text) -- ^ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , totalsCommitteePartyFull               :: !(Maybe Text) -- ^ "party_full" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
  , totalsCommitteeReceipts                :: !(Maybe Double) -- ^ "receipts"
  , totalsCommitteeState                   :: !(Maybe Text) -- ^ "state" - State of the committee&#39;s address as filed on the Form 1
  , totalsCommitteeStateFull               :: !(Maybe Text) -- ^ "state_full" - State of committee as reported on the Form 1
  , totalsCommitteeStreet1                 :: !(Maybe Text) -- ^ "street_1" - Street address of committee as reported on the Form 1
  , totalsCommitteeStreet2                 :: !(Maybe Text) -- ^ "street_2" - Second line of street address of committee as reported on the Form 1
  , totalsCommitteeTreasurerName           :: !(Maybe Text) -- ^ "treasurer_name" - Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
  , totalsCommitteeZip                     :: !(Maybe Text) -- ^ "zip" - Zip code of committee as reported on the Form 1
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TotalsCommittee
instance A.FromJSON TotalsCommittee where
  parseJSON = A.withObject "TotalsCommittee" $ \o ->
    TotalsCommittee
      <$> (o .:? "candidate_ids")
      <*> (o .:? "cash_on_hand_end_period")
      <*> (o .:? "city")
      <*> (o .:  "committee_id")
      <*> (o .:? "committee_type")
      <*> (o .:? "committee_type_full")
      <*> (o .:  "cycle")
      <*> (o .:? "cycles")
      <*> (o .:? "debts_owed_by_committee")
      <*> (o .:? "designation")
      <*> (o .:? "designation_full")
      <*> (o .:? "disbursements")
      <*> (o .:? "filing_frequency")
      <*> (o .:? "independent_expenditures")
      <*> (o .:? "name")
      <*> (o .:? "organization_type")
      <*> (o .:? "organization_type_full")
      <*> (o .:? "party")
      <*> (o .:? "party_full")
      <*> (o .:? "receipts")
      <*> (o .:? "state")
      <*> (o .:? "state_full")
      <*> (o .:? "street_1")
      <*> (o .:? "street_2")
      <*> (o .:? "treasurer_name")
      <*> (o .:? "zip")

-- | ToJSON TotalsCommittee
instance A.ToJSON TotalsCommittee where
  toJSON TotalsCommittee {..} =
   _omitNulls
      [ "candidate_ids" .= totalsCommitteeCandidateIds
      , "cash_on_hand_end_period" .= totalsCommitteeCashOnHandEndPeriod
      , "city" .= totalsCommitteeCity
      , "committee_id" .= totalsCommitteeCommitteeId
      , "committee_type" .= totalsCommitteeCommitteeType
      , "committee_type_full" .= totalsCommitteeCommitteeTypeFull
      , "cycle" .= totalsCommitteeCycle
      , "cycles" .= totalsCommitteeCycles
      , "debts_owed_by_committee" .= totalsCommitteeDebtsOwedByCommittee
      , "designation" .= totalsCommitteeDesignation
      , "designation_full" .= totalsCommitteeDesignationFull
      , "disbursements" .= totalsCommitteeDisbursements
      , "filing_frequency" .= totalsCommitteeFilingFrequency
      , "independent_expenditures" .= totalsCommitteeIndependentExpenditures
      , "name" .= totalsCommitteeName
      , "organization_type" .= totalsCommitteeOrganizationType
      , "organization_type_full" .= totalsCommitteeOrganizationTypeFull
      , "party" .= totalsCommitteeParty
      , "party_full" .= totalsCommitteePartyFull
      , "receipts" .= totalsCommitteeReceipts
      , "state" .= totalsCommitteeState
      , "state_full" .= totalsCommitteeStateFull
      , "street_1" .= totalsCommitteeStreet1
      , "street_2" .= totalsCommitteeStreet2
      , "treasurer_name" .= totalsCommitteeTreasurerName
      , "zip" .= totalsCommitteeZip
      ]


-- | Construct a value of type 'TotalsCommittee' (by applying it's required fields, if any)
mkTotalsCommittee
  :: Text -- ^ 'totalsCommitteeCommitteeId':  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
  -> Int -- ^ 'totalsCommitteeCycle':  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year.
  -> TotalsCommittee
mkTotalsCommittee totalsCommitteeCommitteeId totalsCommitteeCycle =
  TotalsCommittee
  { totalsCommitteeCandidateIds = Nothing
  , totalsCommitteeCashOnHandEndPeriod = Nothing
  , totalsCommitteeCity = Nothing
  , totalsCommitteeCommitteeId
  , totalsCommitteeCommitteeType = Nothing
  , totalsCommitteeCommitteeTypeFull = Nothing
  , totalsCommitteeCycle
  , totalsCommitteeCycles = Nothing
  , totalsCommitteeDebtsOwedByCommittee = Nothing
  , totalsCommitteeDesignation = Nothing
  , totalsCommitteeDesignationFull = Nothing
  , totalsCommitteeDisbursements = Nothing
  , totalsCommitteeFilingFrequency = Nothing
  , totalsCommitteeIndependentExpenditures = Nothing
  , totalsCommitteeName = Nothing
  , totalsCommitteeOrganizationType = Nothing
  , totalsCommitteeOrganizationTypeFull = Nothing
  , totalsCommitteeParty = Nothing
  , totalsCommitteePartyFull = Nothing
  , totalsCommitteeReceipts = Nothing
  , totalsCommitteeState = Nothing
  , totalsCommitteeStateFull = Nothing
  , totalsCommitteeStreet1 = Nothing
  , totalsCommitteeStreet2 = Nothing
  , totalsCommitteeTreasurerName = Nothing
  , totalsCommitteeZip = Nothing
  }

-- ** TotalsCommitteePage
-- | TotalsCommitteePage
data TotalsCommitteePage = TotalsCommitteePage
  { totalsCommitteePagePagination :: !(Maybe OffsetInfo) -- ^ "pagination"
  , totalsCommitteePageResults    :: !(Maybe [TotalsCommittee]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TotalsCommitteePage
instance A.FromJSON TotalsCommitteePage where
  parseJSON = A.withObject "TotalsCommitteePage" $ \o ->
    TotalsCommitteePage
      <$> (o .:? "pagination")
      <*> (o .:? "results")

-- | ToJSON TotalsCommitteePage
instance A.ToJSON TotalsCommitteePage where
  toJSON TotalsCommitteePage {..} =
   _omitNulls
      [ "pagination" .= totalsCommitteePagePagination
      , "results" .= totalsCommitteePageResults
      ]


-- | Construct a value of type 'TotalsCommitteePage' (by applying it's required fields, if any)
mkTotalsCommitteePage
  :: TotalsCommitteePage
mkTotalsCommitteePage =
  TotalsCommitteePage
  { totalsCommitteePagePagination = Nothing
  , totalsCommitteePageResults = Nothing
  }


-- * Enums


-- ** E'CommitteeType

-- | Enum of 'Text'
data E'CommitteeType
  = E'CommitteeType'Presidential -- ^ @"presidential"@
  | E'CommitteeType'Pac_party -- ^ @"pac-party"@
  | E'CommitteeType'House_senate -- ^ @"house-senate"@
  | E'CommitteeType'Ie_only -- ^ @"ie-only"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'CommitteeType where toJSON = A.toJSON . fromE'CommitteeType
instance A.FromJSON E'CommitteeType where parseJSON o = P.either P.fail (pure . P.id) . toE'CommitteeType =<< A.parseJSON o
instance WH.ToHttpApiData E'CommitteeType where toQueryParam = WH.toQueryParam . fromE'CommitteeType
instance WH.FromHttpApiData E'CommitteeType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'CommitteeType
instance MimeRender MimeMultipartFormData E'CommitteeType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'CommitteeType' enum
fromE'CommitteeType :: E'CommitteeType -> Text
fromE'CommitteeType = \case
  E'CommitteeType'Presidential -> "presidential"
  E'CommitteeType'Pac_party -> "pac-party"
  E'CommitteeType'House_senate -> "house-senate"
  E'CommitteeType'Ie_only -> "ie-only"

-- | parse 'E'CommitteeType' enum
toE'CommitteeType :: Text -> P.Either String E'CommitteeType
toE'CommitteeType = \case
  "presidential" -> P.Right E'CommitteeType'Presidential
  "pac-party" -> P.Right E'CommitteeType'Pac_party
  "house-senate" -> P.Right E'CommitteeType'House_senate
  "ie-only" -> P.Right E'CommitteeType'Ie_only
  s -> P.Left $ "toE'CommitteeType: enum parse failure: " P.++ P.show s


-- ** E'CommitteeType2

-- | Enum of 'Text'
data E'CommitteeType2
  = E'CommitteeType2'Presidential -- ^ @"presidential"@
  | E'CommitteeType2'Pac_party -- ^ @"pac-party"@
  | E'CommitteeType2'Pac -- ^ @"pac"@
  | E'CommitteeType2'Party -- ^ @"party"@
  | E'CommitteeType2'House_senate -- ^ @"house-senate"@
  | E'CommitteeType2'Ie_only -- ^ @"ie-only"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'CommitteeType2 where toJSON = A.toJSON . fromE'CommitteeType2
instance A.FromJSON E'CommitteeType2 where parseJSON o = P.either P.fail (pure . P.id) . toE'CommitteeType2 =<< A.parseJSON o
instance WH.ToHttpApiData E'CommitteeType2 where toQueryParam = WH.toQueryParam . fromE'CommitteeType2
instance WH.FromHttpApiData E'CommitteeType2 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'CommitteeType2
instance MimeRender MimeMultipartFormData E'CommitteeType2 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'CommitteeType2' enum
fromE'CommitteeType2 :: E'CommitteeType2 -> Text
fromE'CommitteeType2 = \case
  E'CommitteeType2'Presidential -> "presidential"
  E'CommitteeType2'Pac_party -> "pac-party"
  E'CommitteeType2'Pac -> "pac"
  E'CommitteeType2'Party -> "party"
  E'CommitteeType2'House_senate -> "house-senate"
  E'CommitteeType2'Ie_only -> "ie-only"

-- | parse 'E'CommitteeType2' enum
toE'CommitteeType2 :: Text -> P.Either String E'CommitteeType2
toE'CommitteeType2 = \case
  "presidential" -> P.Right E'CommitteeType2'Presidential
  "pac-party" -> P.Right E'CommitteeType2'Pac_party
  "pac" -> P.Right E'CommitteeType2'Pac
  "party" -> P.Right E'CommitteeType2'Party
  "house-senate" -> P.Right E'CommitteeType2'House_senate
  "ie-only" -> P.Right E'CommitteeType2'Ie_only
  s -> P.Left $ "toE'CommitteeType2: enum parse failure: " P.++ P.show s


-- ** E'FilerType

-- | Enum of 'Text'
data E'FilerType
  = E'FilerType'E_file -- ^ @"e-file"@
  | E'FilerType'Paper -- ^ @"paper"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'FilerType where toJSON = A.toJSON . fromE'FilerType
instance A.FromJSON E'FilerType where parseJSON o = P.either P.fail (pure . P.id) . toE'FilerType =<< A.parseJSON o
instance WH.ToHttpApiData E'FilerType where toQueryParam = WH.toQueryParam . fromE'FilerType
instance WH.FromHttpApiData E'FilerType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'FilerType
instance MimeRender MimeMultipartFormData E'FilerType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'FilerType' enum
fromE'FilerType :: E'FilerType -> Text
fromE'FilerType = \case
  E'FilerType'E_file -> "e-file"
  E'FilerType'Paper -> "paper"

-- | parse 'E'FilerType' enum
toE'FilerType :: Text -> P.Either String E'FilerType
toE'FilerType = \case
  "e-file" -> P.Right E'FilerType'E_file
  "paper" -> P.Right E'FilerType'Paper
  s -> P.Left $ "toE'FilerType: enum parse failure: " P.++ P.show s


-- ** E'Inner

-- | Enum of 'Text'
data E'Inner
  = E'Inner'Empty -- ^ @""@
  | E'Inner'C -- ^ @"C"@
  | E'Inner'F -- ^ @"F"@
  | E'Inner'N -- ^ @"N"@
  | E'Inner'P -- ^ @"P"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner where toJSON = A.toJSON . fromE'Inner
instance A.FromJSON E'Inner where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner where toQueryParam = WH.toQueryParam . fromE'Inner
instance WH.FromHttpApiData E'Inner where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner
instance MimeRender MimeMultipartFormData E'Inner where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner' enum
fromE'Inner :: E'Inner -> Text
fromE'Inner = \case
  E'Inner'Empty -> ""
  E'Inner'C -> "C"
  E'Inner'F -> "F"
  E'Inner'N -> "N"
  E'Inner'P -> "P"

-- | parse 'E'Inner' enum
toE'Inner :: Text -> P.Either String E'Inner
toE'Inner = \case
  "" -> P.Right E'Inner'Empty
  "C" -> P.Right E'Inner'C
  "F" -> P.Right E'Inner'F
  "N" -> P.Right E'Inner'N
  "P" -> P.Right E'Inner'P
  s -> P.Left $ "toE'Inner: enum parse failure: " P.++ P.show s


-- ** E'Inner10

-- | Enum of 'Text'
data E'Inner10
  = E'Inner10'H -- ^ @"H"@
  | E'Inner10'S -- ^ @"S"@
  | E'Inner10'P -- ^ @"P"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner10 where toJSON = A.toJSON . fromE'Inner10
instance A.FromJSON E'Inner10 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner10 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner10 where toQueryParam = WH.toQueryParam . fromE'Inner10
instance WH.FromHttpApiData E'Inner10 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner10
instance MimeRender MimeMultipartFormData E'Inner10 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner10' enum
fromE'Inner10 :: E'Inner10 -> Text
fromE'Inner10 = \case
  E'Inner10'H -> "H"
  E'Inner10'S -> "S"
  E'Inner10'P -> "P"

-- | parse 'E'Inner10' enum
toE'Inner10 :: Text -> P.Either String E'Inner10
toE'Inner10 = \case
  "H" -> P.Right E'Inner10'H
  "S" -> P.Right E'Inner10'S
  "P" -> P.Right E'Inner10'P
  s -> P.Left $ "toE'Inner10: enum parse failure: " P.++ P.show s


-- ** E'Inner11

-- | Enum of 'Text'
data E'Inner11
  = E'Inner11'F -- ^ @"F"@
  | E'Inner11'V -- ^ @"V"@
  | E'Inner11'D -- ^ @"D"@
  | E'Inner11'R -- ^ @"R"@
  | E'Inner11'W -- ^ @"W"@
  | E'Inner11'C -- ^ @"C"@
  | E'Inner11'S -- ^ @"S"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner11 where toJSON = A.toJSON . fromE'Inner11
instance A.FromJSON E'Inner11 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner11 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner11 where toQueryParam = WH.toQueryParam . fromE'Inner11
instance WH.FromHttpApiData E'Inner11 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner11
instance MimeRender MimeMultipartFormData E'Inner11 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner11' enum
fromE'Inner11 :: E'Inner11 -> Text
fromE'Inner11 = \case
  E'Inner11'F -> "F"
  E'Inner11'V -> "V"
  E'Inner11'D -> "D"
  E'Inner11'R -> "R"
  E'Inner11'W -> "W"
  E'Inner11'C -> "C"
  E'Inner11'S -> "S"

-- | parse 'E'Inner11' enum
toE'Inner11 :: Text -> P.Either String E'Inner11
toE'Inner11 = \case
  "F" -> P.Right E'Inner11'F
  "V" -> P.Right E'Inner11'V
  "D" -> P.Right E'Inner11'D
  "R" -> P.Right E'Inner11'R
  "W" -> P.Right E'Inner11'W
  "C" -> P.Right E'Inner11'C
  "S" -> P.Right E'Inner11'S
  s -> P.Left $ "toE'Inner11: enum parse failure: " P.++ P.show s


-- ** E'Inner12

-- | Enum of 'Int'
data E'Inner12
  = E'Inner12'Num1 -- ^ @1@
  | E'Inner12'Num2 -- ^ @2@
  | E'Inner12'Num3 -- ^ @3@
  | E'Inner12'Num4 -- ^ @4@
  | E'Inner12'Num5 -- ^ @5@
  | E'Inner12'Num6 -- ^ @6@
  | E'Inner12'Num7 -- ^ @7@
  | E'Inner12'Num8 -- ^ @8@
  | E'Inner12'Num9 -- ^ @9@
  | E'Inner12'Num10 -- ^ @10@
  | E'Inner12'Num11 -- ^ @11@
  | E'Inner12'Num12 -- ^ @12@
  | E'Inner12'Num13 -- ^ @13@
  | E'Inner12'Num14 -- ^ @14@
  | E'Inner12'Num15 -- ^ @15@
  | E'Inner12'Num16 -- ^ @16@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner12 where toJSON = A.toJSON . fromE'Inner12
instance A.FromJSON E'Inner12 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner12 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner12 where toQueryParam = WH.toQueryParam . fromE'Inner12
instance WH.FromHttpApiData E'Inner12 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner12
instance MimeRender MimeMultipartFormData E'Inner12 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner12' enum
fromE'Inner12 :: E'Inner12 -> Int
fromE'Inner12 = \case
  E'Inner12'Num1 -> 1
  E'Inner12'Num2 -> 2
  E'Inner12'Num3 -> 3
  E'Inner12'Num4 -> 4
  E'Inner12'Num5 -> 5
  E'Inner12'Num6 -> 6
  E'Inner12'Num7 -> 7
  E'Inner12'Num8 -> 8
  E'Inner12'Num9 -> 9
  E'Inner12'Num10 -> 10
  E'Inner12'Num11 -> 11
  E'Inner12'Num12 -> 12
  E'Inner12'Num13 -> 13
  E'Inner12'Num14 -> 14
  E'Inner12'Num15 -> 15
  E'Inner12'Num16 -> 16

-- | parse 'E'Inner12' enum
toE'Inner12 :: Int -> P.Either String E'Inner12
toE'Inner12 = \case
  1 -> P.Right E'Inner12'Num1
  2 -> P.Right E'Inner12'Num2
  3 -> P.Right E'Inner12'Num3
  4 -> P.Right E'Inner12'Num4
  5 -> P.Right E'Inner12'Num5
  6 -> P.Right E'Inner12'Num6
  7 -> P.Right E'Inner12'Num7
  8 -> P.Right E'Inner12'Num8
  9 -> P.Right E'Inner12'Num9
  10 -> P.Right E'Inner12'Num10
  11 -> P.Right E'Inner12'Num11
  12 -> P.Right E'Inner12'Num12
  13 -> P.Right E'Inner12'Num13
  14 -> P.Right E'Inner12'Num14
  15 -> P.Right E'Inner12'Num15
  16 -> P.Right E'Inner12'Num16
  s -> P.Left $ "toE'Inner12: enum parse failure: " P.++ P.show s


-- ** E'Inner13

-- | Enum of 'Text'
data E'Inner13
  = E'Inner13'0 -- ^ @"0"@
  | E'Inner13'1 -- ^ @"1"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner13 where toJSON = A.toJSON . fromE'Inner13
instance A.FromJSON E'Inner13 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner13 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner13 where toQueryParam = WH.toQueryParam . fromE'Inner13
instance WH.FromHttpApiData E'Inner13 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner13
instance MimeRender MimeMultipartFormData E'Inner13 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner13' enum
fromE'Inner13 :: E'Inner13 -> Text
fromE'Inner13 = \case
  E'Inner13'0 -> "0"
  E'Inner13'1 -> "1"

-- | parse 'E'Inner13' enum
toE'Inner13 :: Text -> P.Either String E'Inner13
toE'Inner13 = \case
  "0" -> P.Right E'Inner13'0
  "1" -> P.Right E'Inner13'1
  s -> P.Left $ "toE'Inner13: enum parse failure: " P.++ P.show s


-- ** E'Inner14

-- | Enum of 'Text'
data E'Inner14
  = E'Inner14'Individual -- ^ @"individual"@
  | E'Inner14'Committee -- ^ @"committee"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner14 where toJSON = A.toJSON . fromE'Inner14
instance A.FromJSON E'Inner14 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner14 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner14 where toQueryParam = WH.toQueryParam . fromE'Inner14
instance WH.FromHttpApiData E'Inner14 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner14
instance MimeRender MimeMultipartFormData E'Inner14 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner14' enum
fromE'Inner14 :: E'Inner14 -> Text
fromE'Inner14 = \case
  E'Inner14'Individual -> "individual"
  E'Inner14'Committee -> "committee"

-- | parse 'E'Inner14' enum
toE'Inner14 :: Text -> P.Either String E'Inner14
toE'Inner14 = \case
  "individual" -> P.Right E'Inner14'Individual
  "committee" -> P.Right E'Inner14'Committee
  s -> P.Left $ "toE'Inner14: enum parse failure: " P.++ P.show s


-- ** E'Inner2

-- | Enum of 'Text'
data E'Inner2
  = E'Inner2'Empty -- ^ @""@
  | E'Inner2'H -- ^ @"H"@
  | E'Inner2'S -- ^ @"S"@
  | E'Inner2'P -- ^ @"P"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner2 where toJSON = A.toJSON . fromE'Inner2
instance A.FromJSON E'Inner2 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner2 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner2 where toQueryParam = WH.toQueryParam . fromE'Inner2
instance WH.FromHttpApiData E'Inner2 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner2
instance MimeRender MimeMultipartFormData E'Inner2 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner2' enum
fromE'Inner2 :: E'Inner2 -> Text
fromE'Inner2 = \case
  E'Inner2'Empty -> ""
  E'Inner2'H -> "H"
  E'Inner2'S -> "S"
  E'Inner2'P -> "P"

-- | parse 'E'Inner2' enum
toE'Inner2 :: Text -> P.Either String E'Inner2
toE'Inner2 = \case
  "" -> P.Right E'Inner2'Empty
  "H" -> P.Right E'Inner2'H
  "S" -> P.Right E'Inner2'S
  "P" -> P.Right E'Inner2'P
  s -> P.Left $ "toE'Inner2: enum parse failure: " P.++ P.show s


-- ** E'Inner3

-- | Enum of 'Text'
data E'Inner3
  = E'Inner3'Empty -- ^ @""@
  | E'Inner3'I -- ^ @"I"@
  | E'Inner3'C -- ^ @"C"@
  | E'Inner3'O -- ^ @"O"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner3 where toJSON = A.toJSON . fromE'Inner3
instance A.FromJSON E'Inner3 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner3 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner3 where toQueryParam = WH.toQueryParam . fromE'Inner3
instance WH.FromHttpApiData E'Inner3 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner3
instance MimeRender MimeMultipartFormData E'Inner3 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner3' enum
fromE'Inner3 :: E'Inner3 -> Text
fromE'Inner3 = \case
  E'Inner3'Empty -> ""
  E'Inner3'I -> "I"
  E'Inner3'C -> "C"
  E'Inner3'O -> "O"

-- | parse 'E'Inner3' enum
toE'Inner3 :: Text -> P.Either String E'Inner3
toE'Inner3 = \case
  "" -> P.Right E'Inner3'Empty
  "I" -> P.Right E'Inner3'I
  "C" -> P.Right E'Inner3'C
  "O" -> P.Right E'Inner3'O
  s -> P.Left $ "toE'Inner3: enum parse failure: " P.++ P.show s


-- ** E'Inner4

-- | Enum of 'Text'
data E'Inner4
  = E'Inner4'Empty -- ^ @""@
  | E'Inner4'C -- ^ @"C"@
  | E'Inner4'L -- ^ @"L"@
  | E'Inner4'M -- ^ @"M"@
  | E'Inner4'T -- ^ @"T"@
  | E'Inner4'V -- ^ @"V"@
  | E'Inner4'W -- ^ @"W"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner4 where toJSON = A.toJSON . fromE'Inner4
instance A.FromJSON E'Inner4 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner4 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner4 where toQueryParam = WH.toQueryParam . fromE'Inner4
instance WH.FromHttpApiData E'Inner4 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner4
instance MimeRender MimeMultipartFormData E'Inner4 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner4' enum
fromE'Inner4 :: E'Inner4 -> Text
fromE'Inner4 = \case
  E'Inner4'Empty -> ""
  E'Inner4'C -> "C"
  E'Inner4'L -> "L"
  E'Inner4'M -> "M"
  E'Inner4'T -> "T"
  E'Inner4'V -> "V"
  E'Inner4'W -> "W"

-- | parse 'E'Inner4' enum
toE'Inner4 :: Text -> P.Either String E'Inner4
toE'Inner4 = \case
  "" -> P.Right E'Inner4'Empty
  "C" -> P.Right E'Inner4'C
  "L" -> P.Right E'Inner4'L
  "M" -> P.Right E'Inner4'M
  "T" -> P.Right E'Inner4'T
  "V" -> P.Right E'Inner4'V
  "W" -> P.Right E'Inner4'W
  s -> P.Left $ "toE'Inner4: enum parse failure: " P.++ P.show s


-- ** E'Inner5

-- | Enum of 'Text'
data E'Inner5
  = E'Inner5'Empty -- ^ @""@
  | E'Inner5'C -- ^ @"C"@
  | E'Inner5'D -- ^ @"D"@
  | E'Inner5'E -- ^ @"E"@
  | E'Inner5'H -- ^ @"H"@
  | E'Inner5'I -- ^ @"I"@
  | E'Inner5'N -- ^ @"N"@
  | E'Inner5'O -- ^ @"O"@
  | E'Inner5'P -- ^ @"P"@
  | E'Inner5'Q -- ^ @"Q"@
  | E'Inner5'S -- ^ @"S"@
  | E'Inner5'U -- ^ @"U"@
  | E'Inner5'V -- ^ @"V"@
  | E'Inner5'W -- ^ @"W"@
  | E'Inner5'X -- ^ @"X"@
  | E'Inner5'Y -- ^ @"Y"@
  | E'Inner5'Z -- ^ @"Z"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner5 where toJSON = A.toJSON . fromE'Inner5
instance A.FromJSON E'Inner5 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner5 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner5 where toQueryParam = WH.toQueryParam . fromE'Inner5
instance WH.FromHttpApiData E'Inner5 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner5
instance MimeRender MimeMultipartFormData E'Inner5 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner5' enum
fromE'Inner5 :: E'Inner5 -> Text
fromE'Inner5 = \case
  E'Inner5'Empty -> ""
  E'Inner5'C -> "C"
  E'Inner5'D -> "D"
  E'Inner5'E -> "E"
  E'Inner5'H -> "H"
  E'Inner5'I -> "I"
  E'Inner5'N -> "N"
  E'Inner5'O -> "O"
  E'Inner5'P -> "P"
  E'Inner5'Q -> "Q"
  E'Inner5'S -> "S"
  E'Inner5'U -> "U"
  E'Inner5'V -> "V"
  E'Inner5'W -> "W"
  E'Inner5'X -> "X"
  E'Inner5'Y -> "Y"
  E'Inner5'Z -> "Z"

-- | parse 'E'Inner5' enum
toE'Inner5 :: Text -> P.Either String E'Inner5
toE'Inner5 = \case
  "" -> P.Right E'Inner5'Empty
  "C" -> P.Right E'Inner5'C
  "D" -> P.Right E'Inner5'D
  "E" -> P.Right E'Inner5'E
  "H" -> P.Right E'Inner5'H
  "I" -> P.Right E'Inner5'I
  "N" -> P.Right E'Inner5'N
  "O" -> P.Right E'Inner5'O
  "P" -> P.Right E'Inner5'P
  "Q" -> P.Right E'Inner5'Q
  "S" -> P.Right E'Inner5'S
  "U" -> P.Right E'Inner5'U
  "V" -> P.Right E'Inner5'V
  "W" -> P.Right E'Inner5'W
  "X" -> P.Right E'Inner5'X
  "Y" -> P.Right E'Inner5'Y
  "Z" -> P.Right E'Inner5'Z
  s -> P.Left $ "toE'Inner5: enum parse failure: " P.++ P.show s


-- ** E'Inner6

-- | Enum of 'Text'
data E'Inner6
  = E'Inner6'Empty -- ^ @""@
  | E'Inner6'A -- ^ @"A"@
  | E'Inner6'J -- ^ @"J"@
  | E'Inner6'P -- ^ @"P"@
  | E'Inner6'U -- ^ @"U"@
  | E'Inner6'B -- ^ @"B"@
  | E'Inner6'D -- ^ @"D"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner6 where toJSON = A.toJSON . fromE'Inner6
instance A.FromJSON E'Inner6 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner6 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner6 where toQueryParam = WH.toQueryParam . fromE'Inner6
instance WH.FromHttpApiData E'Inner6 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner6
instance MimeRender MimeMultipartFormData E'Inner6 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner6' enum
fromE'Inner6 :: E'Inner6 -> Text
fromE'Inner6 = \case
  E'Inner6'Empty -> ""
  E'Inner6'A -> "A"
  E'Inner6'J -> "J"
  E'Inner6'P -> "P"
  E'Inner6'U -> "U"
  E'Inner6'B -> "B"
  E'Inner6'D -> "D"

-- | parse 'E'Inner6' enum
toE'Inner6 :: Text -> P.Either String E'Inner6
toE'Inner6 = \case
  "" -> P.Right E'Inner6'Empty
  "A" -> P.Right E'Inner6'A
  "J" -> P.Right E'Inner6'J
  "P" -> P.Right E'Inner6'P
  "U" -> P.Right E'Inner6'U
  "B" -> P.Right E'Inner6'B
  "D" -> P.Right E'Inner6'D
  s -> P.Left $ "toE'Inner6: enum parse failure: " P.++ P.show s


-- ** E'Inner7

-- | Enum of 'Text'
data E'Inner7
  = E'Inner7'Empty -- ^ @""@
  | E'Inner7'A -- ^ @"A"@
  | E'Inner7'M -- ^ @"M"@
  | E'Inner7'N -- ^ @"N"@
  | E'Inner7'Q -- ^ @"Q"@
  | E'Inner7'T -- ^ @"T"@
  | E'Inner7'W -- ^ @"W"@
  | E'Inner7'_A -- ^ @"-A"@
  | E'Inner7'_T -- ^ @"-T"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner7 where toJSON = A.toJSON . fromE'Inner7
instance A.FromJSON E'Inner7 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner7 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner7 where toQueryParam = WH.toQueryParam . fromE'Inner7
instance WH.FromHttpApiData E'Inner7 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner7
instance MimeRender MimeMultipartFormData E'Inner7 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner7' enum
fromE'Inner7 :: E'Inner7 -> Text
fromE'Inner7 = \case
  E'Inner7'Empty -> ""
  E'Inner7'A -> "A"
  E'Inner7'M -> "M"
  E'Inner7'N -> "N"
  E'Inner7'Q -> "Q"
  E'Inner7'T -> "T"
  E'Inner7'W -> "W"
  E'Inner7'_A -> "-A"
  E'Inner7'_T -> "-T"

-- | parse 'E'Inner7' enum
toE'Inner7 :: Text -> P.Either String E'Inner7
toE'Inner7 = \case
  "" -> P.Right E'Inner7'Empty
  "A" -> P.Right E'Inner7'A
  "M" -> P.Right E'Inner7'M
  "N" -> P.Right E'Inner7'N
  "Q" -> P.Right E'Inner7'Q
  "T" -> P.Right E'Inner7'T
  "W" -> P.Right E'Inner7'W
  "-A" -> P.Right E'Inner7'_A
  "-T" -> P.Right E'Inner7'_T
  s -> P.Left $ "toE'Inner7: enum parse failure: " P.++ P.show s


-- ** E'Inner8

-- | Enum of 'Text'
data E'Inner8
  = E'Inner8'Empty -- ^ @""@
  | E'Inner8'N -- ^ @"N"@
  | E'Inner8'A -- ^ @"A"@
  | E'Inner8'T -- ^ @"T"@
  | E'Inner8'C -- ^ @"C"@
  | E'Inner8'M -- ^ @"M"@
  | E'Inner8'S -- ^ @"S"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner8 where toJSON = A.toJSON . fromE'Inner8
instance A.FromJSON E'Inner8 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner8 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner8 where toQueryParam = WH.toQueryParam . fromE'Inner8
instance WH.FromHttpApiData E'Inner8 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner8
instance MimeRender MimeMultipartFormData E'Inner8 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner8' enum
fromE'Inner8 :: E'Inner8 -> Text
fromE'Inner8 = \case
  E'Inner8'Empty -> ""
  E'Inner8'N -> "N"
  E'Inner8'A -> "A"
  E'Inner8'T -> "T"
  E'Inner8'C -> "C"
  E'Inner8'M -> "M"
  E'Inner8'S -> "S"

-- | parse 'E'Inner8' enum
toE'Inner8 :: Text -> P.Either String E'Inner8
toE'Inner8 = \case
  "" -> P.Right E'Inner8'Empty
  "N" -> P.Right E'Inner8'N
  "A" -> P.Right E'Inner8'A
  "T" -> P.Right E'Inner8'T
  "C" -> P.Right E'Inner8'C
  "M" -> P.Right E'Inner8'M
  "S" -> P.Right E'Inner8'S
  s -> P.Left $ "toE'Inner8: enum parse failure: " P.++ P.show s


-- ** E'Inner9

-- | Enum of 'Int'
data E'Inner9
  = E'Inner9'Num0 -- ^ @0@
  | E'Inner9'Num200 -- ^ @200@
  | E'Inner9'Num500 -- ^ @500@
  | E'Inner9'Num1000 -- ^ @1000@
  | E'Inner9'Num2000 -- ^ @2000@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner9 where toJSON = A.toJSON . fromE'Inner9
instance A.FromJSON E'Inner9 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner9 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner9 where toQueryParam = WH.toQueryParam . fromE'Inner9
instance WH.FromHttpApiData E'Inner9 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner9
instance MimeRender MimeMultipartFormData E'Inner9 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner9' enum
fromE'Inner9 :: E'Inner9 -> Int
fromE'Inner9 = \case
  E'Inner9'Num0 -> 0
  E'Inner9'Num200 -> 200
  E'Inner9'Num500 -> 500
  E'Inner9'Num1000 -> 1000
  E'Inner9'Num2000 -> 2000

-- | parse 'E'Inner9' enum
toE'Inner9 :: Int -> P.Either String E'Inner9
toE'Inner9 = \case
  0 -> P.Right E'Inner9'Num0
  200 -> P.Right E'Inner9'Num200
  500 -> P.Right E'Inner9'Num500
  1000 -> P.Right E'Inner9'Num1000
  2000 -> P.Right E'Inner9'Num2000
  s -> P.Left $ "toE'Inner9: enum parse failure: " P.++ P.show s


-- ** E'MurType

-- | Enum of 'Text'
data E'MurType
  = E'MurType'Current -- ^ @"current"@
  | E'MurType'Archived -- ^ @"archived"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'MurType where toJSON = A.toJSON . fromE'MurType
instance A.FromJSON E'MurType where parseJSON o = P.either P.fail (pure . P.id) . toE'MurType =<< A.parseJSON o
instance WH.ToHttpApiData E'MurType where toQueryParam = WH.toQueryParam . fromE'MurType
instance WH.FromHttpApiData E'MurType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'MurType
instance MimeRender MimeMultipartFormData E'MurType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'MurType' enum
fromE'MurType :: E'MurType -> Text
fromE'MurType = \case
  E'MurType'Current -> "current"
  E'MurType'Archived -> "archived"

-- | parse 'E'MurType' enum
toE'MurType :: Text -> P.Either String E'MurType
toE'MurType = \case
  "current" -> P.Right E'MurType'Current
  "archived" -> P.Right E'MurType'Archived
  s -> P.Left $ "toE'MurType: enum parse failure: " P.++ P.show s


-- ** E'Office

-- | Enum of 'Text'
data E'Office
  = E'Office'House -- ^ @"house"@
  | E'Office'Senate -- ^ @"senate"@
  | E'Office'President -- ^ @"president"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Office where toJSON = A.toJSON . fromE'Office
instance A.FromJSON E'Office where parseJSON o = P.either P.fail (pure . P.id) . toE'Office =<< A.parseJSON o
instance WH.ToHttpApiData E'Office where toQueryParam = WH.toQueryParam . fromE'Office
instance WH.FromHttpApiData E'Office where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Office
instance MimeRender MimeMultipartFormData E'Office where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Office' enum
fromE'Office :: E'Office -> Text
fromE'Office = \case
  E'Office'House -> "house"
  E'Office'Senate -> "senate"
  E'Office'President -> "president"

-- | parse 'E'Office' enum
toE'Office :: Text -> P.Either String E'Office
toE'Office = \case
  "house" -> P.Right E'Office'House
  "senate" -> P.Right E'Office'Senate
  "president" -> P.Right E'Office'President
  s -> P.Left $ "toE'Office: enum parse failure: " P.++ P.show s


-- ** E'Renderer

-- | Enum of 'Text'
data E'Renderer
  = E'Renderer'Ics -- ^ @"ics"@
  | E'Renderer'Csv -- ^ @"csv"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Renderer where toJSON = A.toJSON . fromE'Renderer
instance A.FromJSON E'Renderer where parseJSON o = P.either P.fail (pure . P.id) . toE'Renderer =<< A.parseJSON o
instance WH.ToHttpApiData E'Renderer where toQueryParam = WH.toQueryParam . fromE'Renderer
instance WH.FromHttpApiData E'Renderer where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Renderer
instance MimeRender MimeMultipartFormData E'Renderer where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Renderer' enum
fromE'Renderer :: E'Renderer -> Text
fromE'Renderer = \case
  E'Renderer'Ics -> "ics"
  E'Renderer'Csv -> "csv"

-- | parse 'E'Renderer' enum
toE'Renderer :: Text -> P.Either String E'Renderer
toE'Renderer = \case
  "ics" -> P.Right E'Renderer'Ics
  "csv" -> P.Right E'Renderer'Csv
  s -> P.Left $ "toE'Renderer: enum parse failure: " P.++ P.show s


-- ** E'SupportOppose

-- | Enum of 'Text'
data E'SupportOppose
  = E'SupportOppose'S -- ^ @"S"@
  | E'SupportOppose'O -- ^ @"O"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'SupportOppose where toJSON = A.toJSON . fromE'SupportOppose
instance A.FromJSON E'SupportOppose where parseJSON o = P.either P.fail (pure . P.id) . toE'SupportOppose =<< A.parseJSON o
instance WH.ToHttpApiData E'SupportOppose where toQueryParam = WH.toQueryParam . fromE'SupportOppose
instance WH.FromHttpApiData E'SupportOppose where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'SupportOppose
instance MimeRender MimeMultipartFormData E'SupportOppose where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'SupportOppose' enum
fromE'SupportOppose :: E'SupportOppose -> Text
fromE'SupportOppose = \case
  E'SupportOppose'S -> "S"
  E'SupportOppose'O -> "O"

-- | parse 'E'SupportOppose' enum
toE'SupportOppose :: Text -> P.Either String E'SupportOppose
toE'SupportOppose = \case
  "S" -> P.Right E'SupportOppose'S
  "O" -> P.Right E'SupportOppose'O
  s -> P.Left $ "toE'SupportOppose: enum parse failure: " P.++ P.show s


-- * Auth Methods

-- ** AuthApiKeyApiKey
data AuthApiKeyApiKey =
  AuthApiKeyApiKey Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyApiKey where
  applyAuthMethod _ a@(AuthApiKeyApiKey secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setQuery` toQuery ("api_key", Just secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req

