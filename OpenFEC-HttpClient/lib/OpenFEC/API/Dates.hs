{-
   OpenFEC

   This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.       The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://transition.fec.gov/pages/brochures/saleuse.shtml).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!

   OpenAPI spec version: 2.0
   OpenFEC API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : OpenFEC.API.Dates
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenFEC.API.Dates where

import OpenFEC.Core
import OpenFEC.MimeTypes
import OpenFEC.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Dates

-- *** calendarDatesExportGet

-- | @GET \/calendar-dates\/export\/@
-- 
--  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
calendarDatesExportGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest CalendarDatesExportGet MimeNoContent CalendarDatePage MimeJSON
calendarDatesExportGet (ApiKey apiKey) =
  _mkRequest "GET" ["/calendar-dates/export/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CalendarDatesExportGet  
instance HasOptionalParam CalendarDatesExportGet Renderer where
  applyOptionalParam req (Renderer xs) =
    req `setQuery` toQuery ("renderer", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CalendarDatesExportGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CalendarDatesExportGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "max_start_date" - The maximum start date and time
instance HasOptionalParam CalendarDatesExportGet MaxStartDate where
  applyOptionalParam req (MaxStartDate xs) =
    req `setQuery` toQuery ("max_start_date", Just xs)

-- | /Optional Param/ "event_id" - An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
instance HasOptionalParam CalendarDatesExportGet EventId where
  applyOptionalParam req (EventId xs) =
    req `setQuery` toQuery ("event_id", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CalendarDatesExportGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "max_end_date" - The maximum end date and time
instance HasOptionalParam CalendarDatesExportGet MaxEndDate where
  applyOptionalParam req (MaxEndDate xs) =
    req `setQuery` toQuery ("max_end_date", Just xs)

-- | /Optional Param/ "summary" - Longer description of event
instance HasOptionalParam CalendarDatesExportGet Summary where
  applyOptionalParam req (Summary xs) =
    req `setQuery` toQueryColl MultiParamArray ("summary", Just xs)

-- | /Optional Param/ "min_start_date" - The minimum start date and time
instance HasOptionalParam CalendarDatesExportGet MinStartDate where
  applyOptionalParam req (MinStartDate xs) =
    req `setQuery` toQuery ("min_start_date", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CalendarDatesExportGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "description" - Brief description of event
instance HasOptionalParam CalendarDatesExportGet Description where
  applyOptionalParam req (Description xs) =
    req `setQuery` toQueryColl MultiParamArray ("description", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CalendarDatesExportGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "calendar_category_id" -  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
instance HasOptionalParam CalendarDatesExportGet CalendarCategoryId where
  applyOptionalParam req (CalendarCategoryId xs) =
    req `setQuery` toQueryColl MultiParamArray ("calendar_category_id", Just xs)

-- | /Optional Param/ "min_end_date" - The minimum end date and time
instance HasOptionalParam CalendarDatesExportGet MinEndDate where
  applyOptionalParam req (MinEndDate xs) =
    req `setQuery` toQuery ("min_end_date", Just xs)
-- | @application/json@
instance Produces CalendarDatesExportGet MimeJSON


-- *** calendarDatesGet

-- | @GET \/calendar-dates\/@
-- 
--  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
calendarDatesGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest CalendarDatesGet MimeNoContent CalendarDatePage MimeJSON
calendarDatesGet (ApiKey apiKey) =
  _mkRequest "GET" ["/calendar-dates/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CalendarDatesGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CalendarDatesGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CalendarDatesGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "max_start_date" - The maximum start date and time
instance HasOptionalParam CalendarDatesGet MaxStartDate where
  applyOptionalParam req (MaxStartDate xs) =
    req `setQuery` toQuery ("max_start_date", Just xs)

-- | /Optional Param/ "event_id" - An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
instance HasOptionalParam CalendarDatesGet EventId where
  applyOptionalParam req (EventId xs) =
    req `setQuery` toQuery ("event_id", Just xs)

-- | /Optional Param/ "description" - Brief description of event
instance HasOptionalParam CalendarDatesGet Description where
  applyOptionalParam req (Description xs) =
    req `setQuery` toQueryColl MultiParamArray ("description", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CalendarDatesGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "summary" - Longer description of event
instance HasOptionalParam CalendarDatesGet Summary where
  applyOptionalParam req (Summary xs) =
    req `setQuery` toQueryColl MultiParamArray ("summary", Just xs)

-- | /Optional Param/ "min_start_date" - The minimum start date and time
instance HasOptionalParam CalendarDatesGet MinStartDate where
  applyOptionalParam req (MinStartDate xs) =
    req `setQuery` toQuery ("min_start_date", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CalendarDatesGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "max_end_date" - The maximum end date and time
instance HasOptionalParam CalendarDatesGet MaxEndDate where
  applyOptionalParam req (MaxEndDate xs) =
    req `setQuery` toQuery ("max_end_date", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CalendarDatesGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "calendar_category_id" -  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
instance HasOptionalParam CalendarDatesGet CalendarCategoryId where
  applyOptionalParam req (CalendarCategoryId xs) =
    req `setQuery` toQueryColl MultiParamArray ("calendar_category_id", Just xs)

-- | /Optional Param/ "min_end_date" - The minimum end date and time
instance HasOptionalParam CalendarDatesGet MinEndDate where
  applyOptionalParam req (MinEndDate xs) =
    req `setQuery` toQuery ("min_end_date", Just xs)
-- | @application/json@
instance Produces CalendarDatesGet MimeJSON


-- *** electionDatesGet

-- | @GET \/election-dates\/@
-- 
-- FEC election dates since 1995.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
electionDatesGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest ElectionDatesGet MimeNoContent InlineResponseDefault MimeJSON
electionDatesGet (ApiKey apiKey) =
  _mkRequest "GET" ["/election-dates/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data ElectionDatesGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam ElectionDatesGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "election_district" - House district of the office sought, if applicable.
instance HasOptionalParam ElectionDatesGet ElectionDistrict where
  applyOptionalParam req (ElectionDistrict xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_district", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam ElectionDatesGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "max_primary_general_date" - Date of primary or general election
instance HasOptionalParam ElectionDatesGet MaxPrimaryGeneralDate where
  applyOptionalParam req (MaxPrimaryGeneralDate xs) =
    req `setQuery` toQuery ("max_primary_general_date", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam ElectionDatesGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_year" - Year of election
instance HasOptionalParam ElectionDatesGet ElectionYear[Text] where
  applyOptionalParam req (ElectionYear[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_year", Just xs)

-- | /Optional Param/ "min_create_date" - Date this record was added to the system
instance HasOptionalParam ElectionDatesGet MinCreateDate where
  applyOptionalParam req (MinCreateDate xs) =
    req `setQuery` toQuery ("min_create_date", Just xs)

-- | /Optional Param/ "max_create_date" - Date this record was added to the system
instance HasOptionalParam ElectionDatesGet MaxCreateDate where
  applyOptionalParam req (MaxCreateDate xs) =
    req `setQuery` toQuery ("max_create_date", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam ElectionDatesGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "min_update_date" - Date this record was last updated
instance HasOptionalParam ElectionDatesGet MinUpdateDate where
  applyOptionalParam req (MinUpdateDate xs) =
    req `setQuery` toQuery ("min_update_date", Just xs)

-- | /Optional Param/ "election_party" - Party, if applicable.
instance HasOptionalParam ElectionDatesGet ElectionParty where
  applyOptionalParam req (ElectionParty xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_party", Just xs)

-- | /Optional Param/ "election_state" - State or territory of the office sought
instance HasOptionalParam ElectionDatesGet ElectionState where
  applyOptionalParam req (ElectionState xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_state", Just xs)

-- | /Optional Param/ "election_type_id" - Election type
instance HasOptionalParam ElectionDatesGet ElectionTypeId where
  applyOptionalParam req (ElectionTypeId xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_type_id", Just xs)

-- | /Optional Param/ "min_primary_general_date" - Date of primary or general election
instance HasOptionalParam ElectionDatesGet MinPrimaryGeneralDate where
  applyOptionalParam req (MinPrimaryGeneralDate xs) =
    req `setQuery` toQuery ("min_primary_general_date", Just xs)

-- | /Optional Param/ "max_election_date" - Date of election
instance HasOptionalParam ElectionDatesGet MaxElectionDate where
  applyOptionalParam req (MaxElectionDate xs) =
    req `setQuery` toQuery ("max_election_date", Just xs)

-- | /Optional Param/ "min_election_date" - Date of election
instance HasOptionalParam ElectionDatesGet MinElectionDate where
  applyOptionalParam req (MinElectionDate xs) =
    req `setQuery` toQuery ("min_election_date", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam ElectionDatesGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "office_sought" - House, Senate or presidential office
instance HasOptionalParam ElectionDatesGet OfficeSought where
  applyOptionalParam req (OfficeSought xs) =
    req `setQuery` toQueryColl MultiParamArray ("office_sought", Just xs)

-- | /Optional Param/ "max_update_date" - Date this record was last updated
instance HasOptionalParam ElectionDatesGet MaxUpdateDate where
  applyOptionalParam req (MaxUpdateDate xs) =
    req `setQuery` toQuery ("max_update_date", Just xs)
-- | @application/json@
instance Produces ElectionDatesGet MimeJSON


-- *** reportingDatesGet

-- | @GET \/reporting-dates\/@
-- 
-- FEC reporting dates since 1995.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
reportingDatesGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest ReportingDatesGet MimeNoContent InlineResponseDefault2 MimeJSON
reportingDatesGet (ApiKey apiKey) =
  _mkRequest "GET" ["/reporting-dates/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data ReportingDatesGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam ReportingDatesGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam ReportingDatesGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "min_update_date" - Date this record was last updated
instance HasOptionalParam ReportingDatesGet MinUpdateDate where
  applyOptionalParam req (MinUpdateDate xs) =
    req `setQuery` toQuery ("min_update_date", Just xs)

-- | /Optional Param/ "min_due_date" - Date the report is due
instance HasOptionalParam ReportingDatesGet MinDueDate where
  applyOptionalParam req (MinDueDate xs) =
    req `setQuery` toQuery ("min_due_date", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam ReportingDatesGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "min_create_date" - Date this record was added to the system
instance HasOptionalParam ReportingDatesGet MinCreateDate where
  applyOptionalParam req (MinCreateDate xs) =
    req `setQuery` toQuery ("min_create_date", Just xs)

-- | /Optional Param/ "max_due_date" - Date the report is due
instance HasOptionalParam ReportingDatesGet MaxDueDate where
  applyOptionalParam req (MaxDueDate xs) =
    req `setQuery` toQuery ("max_due_date", Just xs)

-- | /Optional Param/ "max_create_date" - Date this record was added to the system
instance HasOptionalParam ReportingDatesGet MaxCreateDate where
  applyOptionalParam req (MaxCreateDate xs) =
    req `setQuery` toQuery ("max_create_date", Just xs)

-- | /Optional Param/ "report_year" - Year of report
instance HasOptionalParam ReportingDatesGet ReportYear where
  applyOptionalParam req (ReportYear xs) =
    req `setQuery` toQueryColl MultiParamArray ("report_year", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam ReportingDatesGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam ReportingDatesGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "report_type" - Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
instance HasOptionalParam ReportingDatesGet ReportType2 where
  applyOptionalParam req (ReportType2 xs) =
    req `setQuery` toQueryColl MultiParamArray ("report_type", Just xs)

-- | /Optional Param/ "max_update_date" - Date this record was last updated
instance HasOptionalParam ReportingDatesGet MaxUpdateDate where
  applyOptionalParam req (MaxUpdateDate xs) =
    req `setQuery` toQuery ("max_update_date", Just xs)
-- | @application/json@
instance Produces ReportingDatesGet MimeJSON

