{-
   OpenFEC

   This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.       The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://transition.fec.gov/pages/brochures/saleuse.shtml).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!

   OpenAPI spec version: 2.0
   OpenFEC API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : OpenFEC.API.Receipts
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenFEC.API.Receipts where

import OpenFEC.Core
import OpenFEC.MimeTypes
import OpenFEC.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Receipts

-- *** committeeCommitteeIdSchedulesScheduleAByEmployerGet

-- | @GET \/committee\/{committee_id}\/schedules\/schedule_a\/by_employer\/@
-- 
-- Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdSchedulesScheduleAByEmployerGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdSchedulesScheduleAByEmployerGet MimeNoContent ScheduleAByEmployerPage MimeJSON
committeeCommitteeIdSchedulesScheduleAByEmployerGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/schedules/schedule_a/by_employer/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdSchedulesScheduleAByEmployerGet  

-- | /Optional Param/ "employer" - Employer of contributor as reported on the committee's filing
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet Employer where
  applyOptionalParam req (Employer xs) =
    req `setQuery` toQueryColl MultiParamArray ("employer", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByEmployerGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdSchedulesScheduleAByEmployerGet MimeJSON


-- *** committeeCommitteeIdSchedulesScheduleAByOccupationGet

-- | @GET \/committee\/{committee_id}\/schedules\/schedule_a\/by_occupation\/@
-- 
-- Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdSchedulesScheduleAByOccupationGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdSchedulesScheduleAByOccupationGet MimeNoContent ScheduleAByOccupationPage MimeJSON
committeeCommitteeIdSchedulesScheduleAByOccupationGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/schedules/schedule_a/by_occupation/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdSchedulesScheduleAByOccupationGet  

-- | /Optional Param/ "occupation" - Occupation of contributor as reported on the committee's filing
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet Occupation where
  applyOptionalParam req (Occupation xs) =
    req `setQuery` toQueryColl MultiParamArray ("occupation", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByOccupationGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdSchedulesScheduleAByOccupationGet MimeJSON


-- *** committeeCommitteeIdSchedulesScheduleABySizeGet

-- | @GET \/committee\/{committee_id}\/schedules\/schedule_a\/by_size\/@
-- 
--  This endpoint aggregates Schedule A donations based on size:   - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 +  In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdSchedulesScheduleABySizeGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdSchedulesScheduleABySizeGet MimeNoContent ScheduleABySizePage MimeJSON
committeeCommitteeIdSchedulesScheduleABySizeGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/schedules/schedule_a/by_size/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdSchedulesScheduleABySizeGet  

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "size" -  The total all contributions in the following ranges: ```   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + ``` Unitemized contributions are included in the `0` category. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet Size where
  applyOptionalParam req (Size xs) =
    req `setQuery` toQueryColl MultiParamArray ("size", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleABySizeGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdSchedulesScheduleABySizeGet MimeJSON


-- *** committeeCommitteeIdSchedulesScheduleAByStateGet

-- | @GET \/committee\/{committee_id}\/schedules\/schedule_a\/by_state\/@
-- 
--  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdSchedulesScheduleAByStateGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdSchedulesScheduleAByStateGet MimeNoContent ScheduleAByStatePage MimeJSON
committeeCommitteeIdSchedulesScheduleAByStateGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/schedules/schedule_a/by_state/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdSchedulesScheduleAByStateGet  

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "state" - State of contributor
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "hide_null" - Exclude values with missing state
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet HideNull where
  applyOptionalParam req (HideNull xs) =
    req `setQuery` toQuery ("hide_null", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByStateGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdSchedulesScheduleAByStateGet MimeJSON


-- *** committeeCommitteeIdSchedulesScheduleAByZipGet

-- | @GET \/committee\/{committee_id}\/schedules\/schedule_a\/by_zip\/@
-- 
-- Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdSchedulesScheduleAByZipGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdSchedulesScheduleAByZipGet MimeNoContent ScheduleAByZipPage MimeJSON
committeeCommitteeIdSchedulesScheduleAByZipGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/schedules/schedule_a/by_zip/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdSchedulesScheduleAByZipGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "zip" - Zip code
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet Zip where
  applyOptionalParam req (Zip xs) =
    req `setQuery` toQueryColl MultiParamArray ("zip", Just xs)

-- | /Optional Param/ "state" - State of contributor
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleAByZipGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdSchedulesScheduleAByZipGet MimeJSON


-- *** schedulesScheduleAByEmployerGet

-- | @GET \/schedules\/schedule_a\/by_employer\/@
-- 
-- Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAByEmployerGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAByEmployerGet MimeNoContent ScheduleAByEmployerPage MimeJSON
schedulesScheduleAByEmployerGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/by_employer/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAByEmployerGet  

-- | /Optional Param/ "employer" - Employer of contributor as reported on the committee's filing
instance HasOptionalParam SchedulesScheduleAByEmployerGet Employer where
  applyOptionalParam req (Employer xs) =
    req `setQuery` toQueryColl MultiParamArray ("employer", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAByEmployerGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAByEmployerGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAByEmployerGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleAByEmployerGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAByEmployerGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAByEmployerGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAByEmployerGet MimeJSON


-- *** schedulesScheduleAByOccupationGet

-- | @GET \/schedules\/schedule_a\/by_occupation\/@
-- 
-- Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAByOccupationGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAByOccupationGet MimeNoContent ScheduleAByOccupationPage MimeJSON
schedulesScheduleAByOccupationGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/by_occupation/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAByOccupationGet  

-- | /Optional Param/ "occupation" - Occupation of contributor as reported on the committee's filing
instance HasOptionalParam SchedulesScheduleAByOccupationGet Occupation where
  applyOptionalParam req (Occupation xs) =
    req `setQuery` toQueryColl MultiParamArray ("occupation", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAByOccupationGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAByOccupationGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAByOccupationGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleAByOccupationGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAByOccupationGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAByOccupationGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAByOccupationGet MimeJSON


-- *** schedulesScheduleABySizeByCandidateGet

-- | @GET \/schedules\/schedule_a\/by_size\/by_candidate\/@
-- 
-- Schedule A receipts aggregated by contribution size.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleABySizeByCandidateGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> Cycle -- ^ "cycle" -   Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
  -> CandidateId -- ^ "candidateId" -   A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
  -> OpenFECRequest SchedulesScheduleABySizeByCandidateGet MimeNoContent ScheduleABySizeCandidatePage MimeJSON
schedulesScheduleABySizeByCandidateGet (ApiKey apiKey) (Cycle cycle) (CandidateId candidateId) =
  _mkRequest "GET" ["/schedules/schedule_a/by_size/by_candidate/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)
    `setQuery` toQueryColl MultiParamArray ("cycle", Just cycle)
    `setQuery` toQueryColl MultiParamArray ("candidate_id", Just candidateId)

data SchedulesScheduleABySizeByCandidateGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleABySizeByCandidateGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleABySizeByCandidateGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleABySizeByCandidateGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleABySizeByCandidateGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleABySizeByCandidateGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam SchedulesScheduleABySizeByCandidateGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleABySizeByCandidateGet MimeJSON


-- *** schedulesScheduleABySizeGet

-- | @GET \/schedules\/schedule_a\/by_size\/@
-- 
--  This endpoint aggregates Schedule A donations based on size:   - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 +  In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleABySizeGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleABySizeGet MimeNoContent ScheduleABySizePage MimeJSON
schedulesScheduleABySizeGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/by_size/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleABySizeGet  

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleABySizeGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleABySizeGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleABySizeGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "size" -  The total all contributions in the following ranges: ```   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + ``` Unitemized contributions are included in the `0` category. 
instance HasOptionalParam SchedulesScheduleABySizeGet Size where
  applyOptionalParam req (Size xs) =
    req `setQuery` toQueryColl MultiParamArray ("size", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleABySizeGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleABySizeGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleABySizeGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleABySizeGet MimeJSON


-- *** schedulesScheduleAByStateByCandidateGet

-- | @GET \/schedules\/schedule_a\/by_state\/by_candidate\/@
-- 
-- Schedule A receipts aggregated by contributor state.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAByStateByCandidateGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> Cycle -- ^ "cycle" -   Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
  -> CandidateId -- ^ "candidateId" -   A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
  -> OpenFECRequest SchedulesScheduleAByStateByCandidateGet MimeNoContent ScheduleAByStateCandidatePage MimeJSON
schedulesScheduleAByStateByCandidateGet (ApiKey apiKey) (Cycle cycle) (CandidateId candidateId) =
  _mkRequest "GET" ["/schedules/schedule_a/by_state/by_candidate/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)
    `setQuery` toQueryColl MultiParamArray ("cycle", Just cycle)
    `setQuery` toQueryColl MultiParamArray ("candidate_id", Just candidateId)

data SchedulesScheduleAByStateByCandidateGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAByStateByCandidateGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAByStateByCandidateGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAByStateByCandidateGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAByStateByCandidateGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAByStateByCandidateGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam SchedulesScheduleAByStateByCandidateGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAByStateByCandidateGet MimeJSON


-- *** schedulesScheduleAByStateGet

-- | @GET \/schedules\/schedule_a\/by_state\/@
-- 
--  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAByStateGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAByStateGet MimeNoContent ScheduleAByStatePage MimeJSON
schedulesScheduleAByStateGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/by_state/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAByStateGet  

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAByStateGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAByStateGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAByStateGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAByStateGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "state" - State of contributor
instance HasOptionalParam SchedulesScheduleAByStateGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "hide_null" - Exclude values with missing state
instance HasOptionalParam SchedulesScheduleAByStateGet HideNull where
  applyOptionalParam req (HideNull xs) =
    req `setQuery` toQuery ("hide_null", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleAByStateGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAByStateGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAByStateGet MimeJSON


-- *** schedulesScheduleAByStateTotalsGet

-- | @GET \/schedules\/schedule_a\/by_state\/totals\/@
-- 
--  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  These receipts are then added together by committee type for the total amount of each type, grouped by state and cycle. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAByStateTotalsGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAByStateTotalsGet MimeNoContent ScheduleAByStateRecipientTotalsPage MimeJSON
schedulesScheduleAByStateTotalsGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/by_state/totals/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAByStateTotalsGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "committee_type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W) 
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet CommitteeType where
  applyOptionalParam req (CommitteeType xs) =
    req `setQuery` toQueryColl MultiParamArray ("committee_type", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "state" - US state or territory
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAByStateTotalsGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAByStateTotalsGet MimeJSON


-- *** schedulesScheduleAByZipGet

-- | @GET \/schedules\/schedule_a\/by_zip\/@
-- 
-- Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAByZipGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAByZipGet MimeNoContent ScheduleAByZipPage MimeJSON
schedulesScheduleAByZipGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/by_zip/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAByZipGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAByZipGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAByZipGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAByZipGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "zip" - Zip code
instance HasOptionalParam SchedulesScheduleAByZipGet Zip where
  applyOptionalParam req (Zip xs) =
    req `setQuery` toQueryColl MultiParamArray ("zip", Just xs)

-- | /Optional Param/ "state" - State of contributor
instance HasOptionalParam SchedulesScheduleAByZipGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAByZipGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleAByZipGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAByZipGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAByZipGet MimeJSON


-- *** schedulesScheduleAEfileGet

-- | @GET \/schedules\/schedule_a\/efile\/@
-- 
--  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don't contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAEfileGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAEfileGet MimeNoContent ScheduleAEfilePage MimeJSON
schedulesScheduleAEfileGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/efile/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAEfileGet  

-- | /Optional Param/ "max_date" - Maximum date
instance HasOptionalParam SchedulesScheduleAEfileGet MaxDate where
  applyOptionalParam req (MaxDate xs) =
    req `setQuery` toQuery ("max_date", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAEfileGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAEfileGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "min_date" - Minimum date
instance HasOptionalParam SchedulesScheduleAEfileGet MinDate where
  applyOptionalParam req (MinDate xs) =
    req `setQuery` toQuery ("min_date", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleAEfileGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
instance HasOptionalParam SchedulesScheduleAEfileGet MaxImageNumber where
  applyOptionalParam req (MaxImageNumber xs) =
    req `setQuery` toQuery ("max_image_number", Just xs)

-- | /Optional Param/ "image_number" - The image number of the page where the schedule item is reported
instance HasOptionalParam SchedulesScheduleAEfileGet ImageNumber where
  applyOptionalParam req (ImageNumber xs) =
    req `setQuery` toQueryColl MultiParamArray ("image_number", Just xs)

-- | /Optional Param/ "contributor_name" - Name of contributor
instance HasOptionalParam SchedulesScheduleAEfileGet ContributorName where
  applyOptionalParam req (ContributorName xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_name", Just xs)

-- | /Optional Param/ "max_amount" - Filter for all amounts less than a value.
instance HasOptionalParam SchedulesScheduleAEfileGet MaxAmount where
  applyOptionalParam req (MaxAmount xs) =
    req `setQuery` toQuery ("max_amount", Just xs)

-- | /Optional Param/ "contributor_city" - City of contributor
instance HasOptionalParam SchedulesScheduleAEfileGet ContributorCity where
  applyOptionalParam req (ContributorCity xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_city", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAEfileGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "contributor_employer" - Employer of contributor, filers need to make an effort to gather this information
instance HasOptionalParam SchedulesScheduleAEfileGet ContributorEmployer where
  applyOptionalParam req (ContributorEmployer xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_employer", Just xs)

-- | /Optional Param/ "contributor_state" - State of contributor
instance HasOptionalParam SchedulesScheduleAEfileGet ContributorState where
  applyOptionalParam req (ContributorState xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_state", Just xs)

-- | /Optional Param/ "min_amount" - Filter for all amounts greater than a value.
instance HasOptionalParam SchedulesScheduleAEfileGet MinAmount where
  applyOptionalParam req (MinAmount xs) =
    req `setQuery` toQuery ("min_amount", Just xs)

-- | /Optional Param/ "line_number" - Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
instance HasOptionalParam SchedulesScheduleAEfileGet LineNumber where
  applyOptionalParam req (LineNumber xs) =
    req `setQuery` toQuery ("line_number", Just xs)
instance HasOptionalParam SchedulesScheduleAEfileGet MinImageNumber where
  applyOptionalParam req (MinImageNumber xs) =
    req `setQuery` toQuery ("min_image_number", Just xs)

-- | /Optional Param/ "contributor_occupation" - Occupation of contributor, filers need to make an effort to gather this information
instance HasOptionalParam SchedulesScheduleAEfileGet ContributorOccupation where
  applyOptionalParam req (ContributorOccupation xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_occupation", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAEfileGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
instance HasOptionalParam SchedulesScheduleAEfileGet CommitteeId where
  applyOptionalParam req (CommitteeId xs) =
    req `setQuery` toQueryColl MultiParamArray ("committee_id", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAEfileGet MimeJSON


-- *** schedulesScheduleAGet

-- | @GET \/schedules\/schedule_a\/@
-- 
--  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee's percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee's percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleAGet 
  :: TwoYearTransactionPeriod -- ^ "twoYearTransactionPeriod" -   This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
  -> ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleAGet MimeNoContent ScheduleAPage MimeJSON
schedulesScheduleAGet (TwoYearTransactionPeriod twoYearTransactionPeriod) (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_a/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("two_year_transaction_period", Just twoYearTransactionPeriod)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleAGet  

-- | /Optional Param/ "max_date" - Maximum date
instance HasOptionalParam SchedulesScheduleAGet MaxDate where
  applyOptionalParam req (MaxDate xs) =
    req `setQuery` toQuery ("max_date", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleAGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleAGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleAGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "min_date" - Minimum date
instance HasOptionalParam SchedulesScheduleAGet MinDate where
  applyOptionalParam req (MinDate xs) =
    req `setQuery` toQuery ("min_date", Just xs)
instance HasOptionalParam SchedulesScheduleAGet MaxImageNumber where
  applyOptionalParam req (MaxImageNumber xs) =
    req `setQuery` toQuery ("max_image_number", Just xs)

-- | /Optional Param/ "image_number" - The image number of the page where the schedule item is reported
instance HasOptionalParam SchedulesScheduleAGet ImageNumber where
  applyOptionalParam req (ImageNumber xs) =
    req `setQuery` toQueryColl MultiParamArray ("image_number", Just xs)

-- | /Optional Param/ "max_amount" - Filter for all amounts less than a value.
instance HasOptionalParam SchedulesScheduleAGet MaxAmount where
  applyOptionalParam req (MaxAmount xs) =
    req `setQuery` toQuery ("max_amount", Just xs)

-- | /Optional Param/ "contributor_city" - City of contributor
instance HasOptionalParam SchedulesScheduleAGet ContributorCity where
  applyOptionalParam req (ContributorCity xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_city", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleAGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "last_contribution_receipt_date" - When sorting by `contribution_receipt_date`, this is populated with the `contribution_receipt_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleAGet LastContributionReceiptDate where
  applyOptionalParam req (LastContributionReceiptDate xs) =
    req `setQuery` toQuery ("last_contribution_receipt_date", Just xs)

-- | /Optional Param/ "contributor_employer" - Employer of contributor, filers need to make an effort to gather this information
instance HasOptionalParam SchedulesScheduleAGet ContributorEmployer where
  applyOptionalParam req (ContributorEmployer xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_employer", Just xs)

-- | /Optional Param/ "last_contribution_receipt_amount" - When sorting by `contribution_receipt_amount`, this is populated with the `contribution_receipt_amount` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleAGet LastContributionReceiptAmount where
  applyOptionalParam req (LastContributionReceiptAmount xs) =
    req `setQuery` toQuery ("last_contribution_receipt_amount", Just xs)

-- | /Optional Param/ "last_index" - Index of last result from previous page
instance HasOptionalParam SchedulesScheduleAGet LastIndex where
  applyOptionalParam req (LastIndex xs) =
    req `setQuery` toQuery ("last_index", Just xs)

-- | /Optional Param/ "contributor_state" - State of contributor
instance HasOptionalParam SchedulesScheduleAGet ContributorState where
  applyOptionalParam req (ContributorState xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_state", Just xs)

-- | /Optional Param/ "min_amount" - Filter for all amounts greater than a value.
instance HasOptionalParam SchedulesScheduleAGet MinAmount where
  applyOptionalParam req (MinAmount xs) =
    req `setQuery` toQuery ("min_amount", Just xs)

-- | /Optional Param/ "line_number" - Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
instance HasOptionalParam SchedulesScheduleAGet LineNumber where
  applyOptionalParam req (LineNumber xs) =
    req `setQuery` toQuery ("line_number", Just xs)

-- | /Optional Param/ "last_contributor_aggregate_ytd" - When sorting by `contributor_aggregate_ytd`, this is populated with the `contributor_aggregate_ytd` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleAGet LastContributorAggregateYtd where
  applyOptionalParam req (LastContributorAggregateYtd xs) =
    req `setQuery` toQuery ("last_contributor_aggregate_ytd", Just xs)

-- | /Optional Param/ "is_individual" - Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
instance HasOptionalParam SchedulesScheduleAGet IsIndividual where
  applyOptionalParam req (IsIndividual xs) =
    req `setQuery` toQuery ("is_individual", Just xs)
instance HasOptionalParam SchedulesScheduleAGet MinImageNumber where
  applyOptionalParam req (MinImageNumber xs) =
    req `setQuery` toQuery ("min_image_number", Just xs)

-- | /Optional Param/ "contributor_type" - Filters individual or committee contributions based on line number
instance HasOptionalParam SchedulesScheduleAGet ContributorType where
  applyOptionalParam req (ContributorType xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_type", Just xs)

-- | /Optional Param/ "contributor_occupation" - Occupation of contributor, filers need to make an effort to gather this information
instance HasOptionalParam SchedulesScheduleAGet ContributorOccupation where
  applyOptionalParam req (ContributorOccupation xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_occupation", Just xs)

-- | /Optional Param/ "contributor_zip" - Zip code of contributor
instance HasOptionalParam SchedulesScheduleAGet ContributorZip where
  applyOptionalParam req (ContributorZip xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_zip", Just xs)

-- | /Optional Param/ "contributor_id" - The FEC identifier should be represented here if the contributor is registered with the FEC.
instance HasOptionalParam SchedulesScheduleAGet ContributorId where
  applyOptionalParam req (ContributorId xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_id", Just xs)

-- | /Optional Param/ "contributor_name" - Name of contributor
instance HasOptionalParam SchedulesScheduleAGet ContributorName where
  applyOptionalParam req (ContributorName xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_name", Just xs)

-- | /Optional Param/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
instance HasOptionalParam SchedulesScheduleAGet CommitteeId where
  applyOptionalParam req (CommitteeId xs) =
    req `setQuery` toQueryColl MultiParamArray ("committee_id", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleAGet MimeJSON


-- *** schedulesScheduleASubIdGet

-- | @GET \/schedules\/schedule_a\/{sub_id}\/@
-- 
--  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee's percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee's percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleASubIdGet 
  :: TwoYearTransactionPeriod -- ^ "twoYearTransactionPeriod" -   This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
  -> ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> SubId -- ^ "subId"
  -> OpenFECRequest SchedulesScheduleASubIdGet MimeNoContent ScheduleAPage MimeJSON
schedulesScheduleASubIdGet (TwoYearTransactionPeriod twoYearTransactionPeriod) (ApiKey apiKey) (SubId subId) =
  _mkRequest "GET" ["/schedules/schedule_a/",toPath subId,"/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("two_year_transaction_period", Just twoYearTransactionPeriod)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleASubIdGet  

-- | /Optional Param/ "max_date" - Maximum date
instance HasOptionalParam SchedulesScheduleASubIdGet MaxDate where
  applyOptionalParam req (MaxDate xs) =
    req `setQuery` toQuery ("max_date", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleASubIdGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleASubIdGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleASubIdGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "min_date" - Minimum date
instance HasOptionalParam SchedulesScheduleASubIdGet MinDate where
  applyOptionalParam req (MinDate xs) =
    req `setQuery` toQuery ("min_date", Just xs)
instance HasOptionalParam SchedulesScheduleASubIdGet MaxImageNumber where
  applyOptionalParam req (MaxImageNumber xs) =
    req `setQuery` toQuery ("max_image_number", Just xs)

-- | /Optional Param/ "image_number" - The image number of the page where the schedule item is reported
instance HasOptionalParam SchedulesScheduleASubIdGet ImageNumber where
  applyOptionalParam req (ImageNumber xs) =
    req `setQuery` toQueryColl MultiParamArray ("image_number", Just xs)

-- | /Optional Param/ "max_amount" - Filter for all amounts less than a value.
instance HasOptionalParam SchedulesScheduleASubIdGet MaxAmount where
  applyOptionalParam req (MaxAmount xs) =
    req `setQuery` toQuery ("max_amount", Just xs)

-- | /Optional Param/ "contributor_city" - City of contributor
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorCity where
  applyOptionalParam req (ContributorCity xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_city", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleASubIdGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "last_contribution_receipt_date" - When sorting by `contribution_receipt_date`, this is populated with the `contribution_receipt_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleASubIdGet LastContributionReceiptDate where
  applyOptionalParam req (LastContributionReceiptDate xs) =
    req `setQuery` toQuery ("last_contribution_receipt_date", Just xs)

-- | /Optional Param/ "contributor_employer" - Employer of contributor, filers need to make an effort to gather this information
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorEmployer where
  applyOptionalParam req (ContributorEmployer xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_employer", Just xs)

-- | /Optional Param/ "last_contribution_receipt_amount" - When sorting by `contribution_receipt_amount`, this is populated with the `contribution_receipt_amount` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleASubIdGet LastContributionReceiptAmount where
  applyOptionalParam req (LastContributionReceiptAmount xs) =
    req `setQuery` toQuery ("last_contribution_receipt_amount", Just xs)

-- | /Optional Param/ "last_index" - Index of last result from previous page
instance HasOptionalParam SchedulesScheduleASubIdGet LastIndex where
  applyOptionalParam req (LastIndex xs) =
    req `setQuery` toQuery ("last_index", Just xs)

-- | /Optional Param/ "contributor_state" - State of contributor
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorState where
  applyOptionalParam req (ContributorState xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_state", Just xs)

-- | /Optional Param/ "min_amount" - Filter for all amounts greater than a value.
instance HasOptionalParam SchedulesScheduleASubIdGet MinAmount where
  applyOptionalParam req (MinAmount xs) =
    req `setQuery` toQuery ("min_amount", Just xs)

-- | /Optional Param/ "line_number" - Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
instance HasOptionalParam SchedulesScheduleASubIdGet LineNumber where
  applyOptionalParam req (LineNumber xs) =
    req `setQuery` toQuery ("line_number", Just xs)

-- | /Optional Param/ "last_contributor_aggregate_ytd" - When sorting by `contributor_aggregate_ytd`, this is populated with the `contributor_aggregate_ytd` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleASubIdGet LastContributorAggregateYtd where
  applyOptionalParam req (LastContributorAggregateYtd xs) =
    req `setQuery` toQuery ("last_contributor_aggregate_ytd", Just xs)

-- | /Optional Param/ "is_individual" - Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
instance HasOptionalParam SchedulesScheduleASubIdGet IsIndividual where
  applyOptionalParam req (IsIndividual xs) =
    req `setQuery` toQuery ("is_individual", Just xs)
instance HasOptionalParam SchedulesScheduleASubIdGet MinImageNumber where
  applyOptionalParam req (MinImageNumber xs) =
    req `setQuery` toQuery ("min_image_number", Just xs)

-- | /Optional Param/ "contributor_type" - Filters individual or committee contributions based on line number
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorType where
  applyOptionalParam req (ContributorType xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_type", Just xs)

-- | /Optional Param/ "contributor_occupation" - Occupation of contributor, filers need to make an effort to gather this information
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorOccupation where
  applyOptionalParam req (ContributorOccupation xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_occupation", Just xs)

-- | /Optional Param/ "contributor_zip" - Zip code of contributor
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorZip where
  applyOptionalParam req (ContributorZip xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_zip", Just xs)

-- | /Optional Param/ "contributor_id" - The FEC identifier should be represented here if the contributor is registered with the FEC.
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorId where
  applyOptionalParam req (ContributorId xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_id", Just xs)

-- | /Optional Param/ "contributor_name" - Name of contributor
instance HasOptionalParam SchedulesScheduleASubIdGet ContributorName where
  applyOptionalParam req (ContributorName xs) =
    req `setQuery` toQueryColl MultiParamArray ("contributor_name", Just xs)

-- | /Optional Param/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
instance HasOptionalParam SchedulesScheduleASubIdGet CommitteeId where
  applyOptionalParam req (CommitteeId xs) =
    req `setQuery` toQueryColl MultiParamArray ("committee_id", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleASubIdGet MimeJSON

