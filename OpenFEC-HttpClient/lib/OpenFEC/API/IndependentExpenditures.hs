{-
   OpenFEC

   This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.       The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://transition.fec.gov/pages/brochures/saleuse.shtml).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!

   OpenAPI spec version: 2.0
   OpenFEC API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : OpenFEC.API.IndependentExpenditures
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenFEC.API.IndependentExpenditures where

import OpenFEC.Core
import OpenFEC.MimeTypes
import OpenFEC.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** IndependentExpenditures

-- *** committeeCommitteeIdSchedulesScheduleEByCandidateGet

-- | @GET \/committee\/{committee_id}\/schedules\/schedule_e\/by_candidate\/@
-- 
-- Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdSchedulesScheduleEByCandidateGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdSchedulesScheduleEByCandidateGet MimeNoContent ScheduleEByCandidatePage MimeJSON
committeeCommitteeIdSchedulesScheduleEByCandidateGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/schedules/schedule_e/by_candidate/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdSchedulesScheduleEByCandidateGet  

-- | /Optional Param/ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet DistrictText where
  applyOptionalParam req (DistrictText xs) =
    req `setQuery` toQuery ("district", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet Office2 where
  applyOptionalParam req (Office2 xs) =
    req `setQuery` toQuery ("office", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "support_oppose" - Support or opposition
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet SupportOppose where
  applyOptionalParam req (SupportOppose xs) =
    req `setQuery` toQuery ("support_oppose", Just xs)

-- | /Optional Param/ "state" - US state or territory where a candidate runs for office
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet StateText where
  applyOptionalParam req (StateText xs) =
    req `setQuery` toQuery ("state", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam CommitteeCommitteeIdSchedulesScheduleEByCandidateGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdSchedulesScheduleEByCandidateGet MimeJSON


-- *** schedulesScheduleEByCandidateGet

-- | @GET \/schedules\/schedule_e\/by_candidate\/@
-- 
-- Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleEByCandidateGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleEByCandidateGet MimeNoContent ScheduleEByCandidatePage MimeJSON
schedulesScheduleEByCandidateGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_e/by_candidate/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleEByCandidateGet  

-- | /Optional Param/ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam SchedulesScheduleEByCandidateGet DistrictText where
  applyOptionalParam req (DistrictText xs) =
    req `setQuery` toQuery ("district", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleEByCandidateGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam SchedulesScheduleEByCandidateGet Office2 where
  applyOptionalParam req (Office2 xs) =
    req `setQuery` toQuery ("office", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleEByCandidateGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam SchedulesScheduleEByCandidateGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleEByCandidateGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "support_oppose" - Support or opposition
instance HasOptionalParam SchedulesScheduleEByCandidateGet SupportOppose where
  applyOptionalParam req (SupportOppose xs) =
    req `setQuery` toQuery ("support_oppose", Just xs)

-- | /Optional Param/ "state" - US state or territory where a candidate runs for office
instance HasOptionalParam SchedulesScheduleEByCandidateGet StateText where
  applyOptionalParam req (StateText xs) =
    req `setQuery` toQuery ("state", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleEByCandidateGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleEByCandidateGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleEByCandidateGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam SchedulesScheduleEByCandidateGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleEByCandidateGet MimeJSON


-- *** schedulesScheduleEEfileGet

-- | @GET \/schedules\/schedule_e\/efile\/@
-- 
--  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don't contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleEEfileGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleEEfileGet MimeNoContent ScheduleEEfilePage MimeJSON
schedulesScheduleEEfileGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_e/efile/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleEEfileGet  

-- | /Optional Param/ "candidate_name" - Name of candidate running for office
instance HasOptionalParam SchedulesScheduleEEfileGet CandidateName where
  applyOptionalParam req (CandidateName xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_name", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleEEfileGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleEEfileGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam SchedulesScheduleEEfileGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "payee_name" - Name of the entity that received the payment
instance HasOptionalParam SchedulesScheduleEEfileGet PayeeName where
  applyOptionalParam req (PayeeName xs) =
    req `setQuery` toQueryColl MultiParamArray ("payee_name", Just xs)

-- | /Optional Param/ "support_oppose_indicator" - Support or opposition
instance HasOptionalParam SchedulesScheduleEEfileGet SupportOpposeIndicator where
  applyOptionalParam req (SupportOpposeIndicator xs) =
    req `setQuery` toQueryColl MultiParamArray ("support_oppose_indicator", Just xs)

-- | /Optional Param/ "min_expenditure_date" - Selects all items expended by this committee before this date
instance HasOptionalParam SchedulesScheduleEEfileGet MinExpenditureDate where
  applyOptionalParam req (MinExpenditureDate xs) =
    req `setQuery` toQuery ("min_expenditure_date", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam SchedulesScheduleEEfileGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "max_expenditure_amount" - Selects all items expended by this committee less than this amount
instance HasOptionalParam SchedulesScheduleEEfileGet MaxExpenditureAmount where
  applyOptionalParam req (MaxExpenditureAmount xs) =
    req `setQuery` toQuery ("max_expenditure_amount", Just xs)

-- | /Optional Param/ "image_number" - The image number of the page where the schedule item is reported
instance HasOptionalParam SchedulesScheduleEEfileGet ImageNumber where
  applyOptionalParam req (ImageNumber xs) =
    req `setQuery` toQueryColl MultiParamArray ("image_number", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleEEfileGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleEEfileGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "min_expenditure_amount" - Selects all items expended by this committee greater than this amount
instance HasOptionalParam SchedulesScheduleEEfileGet MinExpenditureAmount where
  applyOptionalParam req (MinExpenditureAmount xs) =
    req `setQuery` toQuery ("min_expenditure_amount", Just xs)

-- | /Optional Param/ "max_expenditure_date" - Selects all items expended by this committee after this date
instance HasOptionalParam SchedulesScheduleEEfileGet MaxExpenditureDate where
  applyOptionalParam req (MaxExpenditureDate xs) =
    req `setQuery` toQuery ("max_expenditure_date", Just xs)

-- | /Optional Param/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
instance HasOptionalParam SchedulesScheduleEEfileGet CommitteeId where
  applyOptionalParam req (CommitteeId xs) =
    req `setQuery` toQueryColl MultiParamArray ("committee_id", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleEEfileGet MimeJSON


-- *** schedulesScheduleEGet

-- | @GET \/schedules\/schedule_e\/@
-- 
--  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don't double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
schedulesScheduleEGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest SchedulesScheduleEGet MimeNoContent ScheduleEPage MimeJSON
schedulesScheduleEGet (ApiKey apiKey) =
  _mkRequest "GET" ["/schedules/schedule_e/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data SchedulesScheduleEGet  

-- | /Optional Param/ "max_date" - Maximum date
instance HasOptionalParam SchedulesScheduleEGet MaxDate where
  applyOptionalParam req (MaxDate xs) =
    req `setQuery` toQuery ("max_date", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam SchedulesScheduleEGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam SchedulesScheduleEGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam SchedulesScheduleEGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "is_notice" - Record filed as 24- or 48-hour notice
instance HasOptionalParam SchedulesScheduleEGet IsNotice where
  applyOptionalParam req (IsNotice xs) =
    req `setQuery` toQueryColl MultiParamArray ("is_notice", Just xs)

-- | /Optional Param/ "support_oppose_indicator" - Support or opposition
instance HasOptionalParam SchedulesScheduleEGet SupportOpposeIndicator where
  applyOptionalParam req (SupportOpposeIndicator xs) =
    req `setQuery` toQueryColl MultiParamArray ("support_oppose_indicator", Just xs)

-- | /Optional Param/ "payee_name" - Name of the entity that received the payment
instance HasOptionalParam SchedulesScheduleEGet PayeeName where
  applyOptionalParam req (PayeeName xs) =
    req `setQuery` toQueryColl MultiParamArray ("payee_name", Just xs)

-- | /Optional Param/ "last_expenditure_amount" - When sorting by `expenditure_amount`,this is populated with the `expenditure_amount` of the last result.However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleEGet LastExpenditureAmount where
  applyOptionalParam req (LastExpenditureAmount xs) =
    req `setQuery` toQuery ("last_expenditure_amount", Just xs)

-- | /Optional Param/ "min_date" - Minimum date
instance HasOptionalParam SchedulesScheduleEGet MinDate where
  applyOptionalParam req (MinDate xs) =
    req `setQuery` toQuery ("min_date", Just xs)

-- | /Optional Param/ "last_office_total_ytd" - When sorting by `office_total_ytd`,this is populated with the `office_total_ytd` of the last result.However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleEGet LastOfficeTotalYtd where
  applyOptionalParam req (LastOfficeTotalYtd xs) =
    req `setQuery` toQuery ("last_office_total_ytd", Just xs)
instance HasOptionalParam SchedulesScheduleEGet MaxImageNumber where
  applyOptionalParam req (MaxImageNumber xs) =
    req `setQuery` toQuery ("max_image_number", Just xs)

-- | /Optional Param/ "image_number" - The image number of the page where the schedule item is reported
instance HasOptionalParam SchedulesScheduleEGet ImageNumber where
  applyOptionalParam req (ImageNumber xs) =
    req `setQuery` toQueryColl MultiParamArray ("image_number", Just xs)

-- | /Optional Param/ "max_amount" - Filter for all amounts less than a value.
instance HasOptionalParam SchedulesScheduleEGet MaxAmount where
  applyOptionalParam req (MaxAmount xs) =
    req `setQuery` toQuery ("max_amount", Just xs)

-- | /Optional Param/ "candidate_office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam SchedulesScheduleEGet CandidateOffice where
  applyOptionalParam req (CandidateOffice xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_office", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam SchedulesScheduleEGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam SchedulesScheduleEGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam SchedulesScheduleEGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "candidate_office_state" - US state or territory
instance HasOptionalParam SchedulesScheduleEGet CandidateOfficeState where
  applyOptionalParam req (CandidateOfficeState xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_office_state", Just xs)

-- | /Optional Param/ "last_index" - Index of last result from previous page
instance HasOptionalParam SchedulesScheduleEGet LastIndex where
  applyOptionalParam req (LastIndex xs) =
    req `setQuery` toQuery ("last_index", Just xs)

-- | /Optional Param/ "min_amount" - Filter for all amounts greater than a value.
instance HasOptionalParam SchedulesScheduleEGet MinAmount where
  applyOptionalParam req (MinAmount xs) =
    req `setQuery` toQuery ("min_amount", Just xs)

-- | /Optional Param/ "line_number" - Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
instance HasOptionalParam SchedulesScheduleEGet LineNumber where
  applyOptionalParam req (LineNumber xs) =
    req `setQuery` toQuery ("line_number", Just xs)

-- | /Optional Param/ "candidate_office_district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam SchedulesScheduleEGet CandidateOfficeDistrict where
  applyOptionalParam req (CandidateOfficeDistrict xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_office_district", Just xs)
instance HasOptionalParam SchedulesScheduleEGet MinImageNumber where
  applyOptionalParam req (MinImageNumber xs) =
    req `setQuery` toQuery ("min_image_number", Just xs)

-- | /Optional Param/ "last_expenditure_date" - When sorting by `expenditure_date`,this is populated with the `expenditure_date` of the last result.However, you will need to pass the index of that last result to `last_index` to get the next page.
instance HasOptionalParam SchedulesScheduleEGet LastExpenditureDate where
  applyOptionalParam req (LastExpenditureDate xs) =
    req `setQuery` toQuery ("last_expenditure_date", Just xs)

-- | /Optional Param/ "filing_form" - Filing form
instance HasOptionalParam SchedulesScheduleEGet FilingForm where
  applyOptionalParam req (FilingForm xs) =
    req `setQuery` toQueryColl MultiParamArray ("filing_form", Just xs)

-- | /Optional Param/ "candidate_party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
instance HasOptionalParam SchedulesScheduleEGet CandidateParty where
  applyOptionalParam req (CandidateParty xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_party", Just xs)

-- | /Optional Param/ "committee_id" -  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
instance HasOptionalParam SchedulesScheduleEGet CommitteeId where
  applyOptionalParam req (CommitteeId xs) =
    req `setQuery` toQueryColl MultiParamArray ("committee_id", Just xs)
-- | @application/json@
instance Produces SchedulesScheduleEGet MimeJSON

