{-
   OpenFEC

   This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.       The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://transition.fec.gov/pages/brochures/saleuse.shtml).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!

   OpenAPI spec version: 2.0
   OpenFEC API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : OpenFEC.API.Candidate
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenFEC.API.Candidate where

import OpenFEC.Core
import OpenFEC.MimeTypes
import OpenFEC.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Candidate

-- *** candidateCandidateIdGet

-- | @GET \/candidate\/{candidate_id}\/@
-- 
--  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidateCandidateIdGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CandidateIdText -- ^ "candidateId" -   A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
  -> OpenFECRequest CandidateCandidateIdGet MimeNoContent CandidateDetailPage MimeJSON
candidateCandidateIdGet (ApiKey apiKey) (CandidateIdText candidateId) =
  _mkRequest "GET" ["/candidate/",toPath candidateId,"/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidateCandidateIdGet  

-- | /Optional Param/ "has_raised_funds" - A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
instance HasOptionalParam CandidateCandidateIdGet HasRaisedFunds where
  applyOptionalParam req (HasRaisedFunds xs) =
    req `setQuery` toQuery ("has_raised_funds", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidateCandidateIdGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidateCandidateIdGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "election_year" - Year of election
instance HasOptionalParam CandidateCandidateIdGet ElectionYear where
  applyOptionalParam req (ElectionYear xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_year", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidateCandidateIdGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
instance HasOptionalParam CandidateCandidateIdGet Party where
  applyOptionalParam req (Party xs) =
    req `setQuery` toQueryColl MultiParamArray ("party", Just xs)

-- | /Optional Param/ "state" - US state or territory where a candidate runs for office
instance HasOptionalParam CandidateCandidateIdGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "cycle" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
instance HasOptionalParam CandidateCandidateIdGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidateCandidateIdGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "year" - See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
instance HasOptionalParam CandidateCandidateIdGet Year where
  applyOptionalParam req (Year xs) =
    req `setQuery` toQuery ("year", Just xs)

-- | /Optional Param/ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
instance HasOptionalParam CandidateCandidateIdGet CandidateStatus where
  applyOptionalParam req (CandidateStatus xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_status", Just xs)

-- | /Optional Param/ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam CandidateCandidateIdGet District where
  applyOptionalParam req (District xs) =
    req `setQuery` toQueryColl MultiParamArray ("district", Just xs)

-- | /Optional Param/ "office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam CandidateCandidateIdGet Office where
  applyOptionalParam req (Office xs) =
    req `setQuery` toQueryColl MultiParamArray ("office", Just xs)

-- | /Optional Param/ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
instance HasOptionalParam CandidateCandidateIdGet FederalFundsFlag where
  applyOptionalParam req (FederalFundsFlag xs) =
    req `setQuery` toQuery ("federal_funds_flag", Just xs)

-- | /Optional Param/ "name" - Name (candidate or committee) to search for. Alias for 'q'.
instance HasOptionalParam CandidateCandidateIdGet Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQueryColl MultiParamArray ("name", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidateCandidateIdGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "incumbent_challenge" - One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
instance HasOptionalParam CandidateCandidateIdGet IncumbentChallenge where
  applyOptionalParam req (IncumbentChallenge xs) =
    req `setQuery` toQueryColl MultiParamArray ("incumbent_challenge", Just xs)
-- | @application/json@
instance Produces CandidateCandidateIdGet MimeJSON


-- *** candidateCandidateIdHistoryCycleGet

-- | @GET \/candidate\/{candidate_id}\/history\/{cycle}\/@
-- 
--  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidateCandidateIdHistoryCycleGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CycleInt -- ^ "cycle" -   Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
  -> CandidateIdText -- ^ "candidateId" -   A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
  -> OpenFECRequest CandidateCandidateIdHistoryCycleGet MimeNoContent CandidateHistoryPage MimeJSON
candidateCandidateIdHistoryCycleGet (ApiKey apiKey) (CycleInt cycle) (CandidateIdText candidateId) =
  _mkRequest "GET" ["/candidate/",toPath candidateId,"/history/",toPath cycle,"/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidateCandidateIdHistoryCycleGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidateCandidateIdHistoryCycleGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidateCandidateIdHistoryCycleGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidateCandidateIdHistoryCycleGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidateCandidateIdHistoryCycleGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidateCandidateIdHistoryCycleGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam CandidateCandidateIdHistoryCycleGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces CandidateCandidateIdHistoryCycleGet MimeJSON


-- *** candidateCandidateIdHistoryGet

-- | @GET \/candidate\/{candidate_id}\/history\/@
-- 
--  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidateCandidateIdHistoryGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CandidateIdText -- ^ "candidateId" -   A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
  -> OpenFECRequest CandidateCandidateIdHistoryGet MimeNoContent CandidateHistoryPage MimeJSON
candidateCandidateIdHistoryGet (ApiKey apiKey) (CandidateIdText candidateId) =
  _mkRequest "GET" ["/candidate/",toPath candidateId,"/history/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidateCandidateIdHistoryGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidateCandidateIdHistoryGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidateCandidateIdHistoryGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidateCandidateIdHistoryGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidateCandidateIdHistoryGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidateCandidateIdHistoryGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam CandidateCandidateIdHistoryGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces CandidateCandidateIdHistoryGet MimeJSON


-- *** candidateCandidateIdTotalsGet

-- | @GET \/candidate\/{candidate_id}\/totals\/@
-- 
--  This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidateCandidateIdTotalsGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CandidateIdText -- ^ "candidateId" -   A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
  -> OpenFECRequest CandidateCandidateIdTotalsGet MimeNoContent CommitteeTotalsPage MimeJSON
candidateCandidateIdTotalsGet (ApiKey apiKey) (CandidateIdText candidateId) =
  _mkRequest "GET" ["/candidate/",toPath candidateId,"/totals/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidateCandidateIdTotalsGet  

-- | /Optional Param/ "full_election" - Get totals for full election period.
instance HasOptionalParam CandidateCandidateIdTotalsGet FullElection where
  applyOptionalParam req (FullElection xs) =
    req `setQuery` toQuery ("full_election", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidateCandidateIdTotalsGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidateCandidateIdTotalsGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "designation" - The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
instance HasOptionalParam CandidateCandidateIdTotalsGet DesignationText where
  applyOptionalParam req (DesignationText xs) =
    req `setQuery` toQuery ("designation", Just xs)

-- | /Optional Param/ "type" - The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
instance HasOptionalParam CandidateCandidateIdTotalsGet ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidateCandidateIdTotalsGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidateCandidateIdTotalsGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CandidateCandidateIdTotalsGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidateCandidateIdTotalsGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)
-- | @application/json@
instance Produces CandidateCandidateIdTotalsGet MimeJSON


-- *** candidatesGet

-- | @GET \/candidates\/@
-- 
--  Fetch basic information about candidates, and use parameters to filter results to the candidates you're looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidatesGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest CandidatesGet MimeNoContent CandidatePage MimeJSON
candidatesGet (ApiKey apiKey) =
  _mkRequest "GET" ["/candidates/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidatesGet  

-- | /Optional Param/ "has_raised_funds" - A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
instance HasOptionalParam CandidatesGet HasRaisedFunds where
  applyOptionalParam req (HasRaisedFunds xs) =
    req `setQuery` toQuery ("has_raised_funds", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidatesGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidatesGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "min_first_file_date" - Selects all candidates whose first filing was received by the FEC after this date
instance HasOptionalParam CandidatesGet MinFirstFileDate where
  applyOptionalParam req (MinFirstFileDate xs) =
    req `setQuery` toQuery ("min_first_file_date", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidatesGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_year" - Year of election
instance HasOptionalParam CandidatesGet ElectionYear where
  applyOptionalParam req (ElectionYear xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_year", Just xs)

-- | /Optional Param/ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
instance HasOptionalParam CandidatesGet Party where
  applyOptionalParam req (Party xs) =
    req `setQuery` toQueryColl MultiParamArray ("party", Just xs)

-- | /Optional Param/ "state" - US state or territory where a candidate runs for office
instance HasOptionalParam CandidatesGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "cycle" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
instance HasOptionalParam CandidatesGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam CandidatesGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidatesGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "max_first_file_date" - Selects all candidates whose first filing was received by the FEC before this date
instance HasOptionalParam CandidatesGet MaxFirstFileDate where
  applyOptionalParam req (MaxFirstFileDate xs) =
    req `setQuery` toQuery ("max_first_file_date", Just xs)

-- | /Optional Param/ "year" - See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
instance HasOptionalParam CandidatesGet Year where
  applyOptionalParam req (Year xs) =
    req `setQuery` toQuery ("year", Just xs)

-- | /Optional Param/ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam CandidatesGet District where
  applyOptionalParam req (District xs) =
    req `setQuery` toQueryColl MultiParamArray ("district", Just xs)

-- | /Optional Param/ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
instance HasOptionalParam CandidatesGet CandidateStatus where
  applyOptionalParam req (CandidateStatus xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_status", Just xs)

-- | /Optional Param/ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
instance HasOptionalParam CandidatesGet FederalFundsFlag where
  applyOptionalParam req (FederalFundsFlag xs) =
    req `setQuery` toQuery ("federal_funds_flag", Just xs)

-- | /Optional Param/ "office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam CandidatesGet Office where
  applyOptionalParam req (Office xs) =
    req `setQuery` toQueryColl MultiParamArray ("office", Just xs)

-- | /Optional Param/ "name" - Name (candidate or committee) to search for. Alias for 'q'.
instance HasOptionalParam CandidatesGet Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQueryColl MultiParamArray ("name", Just xs)

-- | /Optional Param/ "q" - Name of candidate running for office
instance HasOptionalParam CandidatesGet Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQueryColl MultiParamArray ("q", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidatesGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "incumbent_challenge" - One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
instance HasOptionalParam CandidatesGet IncumbentChallenge where
  applyOptionalParam req (IncumbentChallenge xs) =
    req `setQuery` toQueryColl MultiParamArray ("incumbent_challenge", Just xs)
-- | @application/json@
instance Produces CandidatesGet MimeJSON


-- *** candidatesSearchGet

-- | @GET \/candidates\/search\/@
-- 
--  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](http://www.fec.gov/pdf/forms/fecfrm1.pdf), for candidate information, and [Form 2](http://www.fec.gov/pdf/forms/fecfrm2.pdf), for committees information, with additional information to provide context. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidatesSearchGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest CandidatesSearchGet MimeNoContent CandidatePage MimeJSON
candidatesSearchGet (ApiKey apiKey) =
  _mkRequest "GET" ["/candidates/search/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidatesSearchGet  

-- | /Optional Param/ "has_raised_funds" - A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
instance HasOptionalParam CandidatesSearchGet HasRaisedFunds where
  applyOptionalParam req (HasRaisedFunds xs) =
    req `setQuery` toQuery ("has_raised_funds", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidatesSearchGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidatesSearchGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "min_first_file_date" - Selects all candidates whose first filing was received by the FEC after this date
instance HasOptionalParam CandidatesSearchGet MinFirstFileDate where
  applyOptionalParam req (MinFirstFileDate xs) =
    req `setQuery` toQuery ("min_first_file_date", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidatesSearchGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_year" - Year of election
instance HasOptionalParam CandidatesSearchGet ElectionYear where
  applyOptionalParam req (ElectionYear xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_year", Just xs)

-- | /Optional Param/ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
instance HasOptionalParam CandidatesSearchGet Party where
  applyOptionalParam req (Party xs) =
    req `setQuery` toQueryColl MultiParamArray ("party", Just xs)

-- | /Optional Param/ "state" - US state or territory where a candidate runs for office
instance HasOptionalParam CandidatesSearchGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "cycle" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
instance HasOptionalParam CandidatesSearchGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam CandidatesSearchGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidatesSearchGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "max_first_file_date" - Selects all candidates whose first filing was received by the FEC before this date
instance HasOptionalParam CandidatesSearchGet MaxFirstFileDate where
  applyOptionalParam req (MaxFirstFileDate xs) =
    req `setQuery` toQuery ("max_first_file_date", Just xs)

-- | /Optional Param/ "year" - See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
instance HasOptionalParam CandidatesSearchGet Year where
  applyOptionalParam req (Year xs) =
    req `setQuery` toQuery ("year", Just xs)

-- | /Optional Param/ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam CandidatesSearchGet District where
  applyOptionalParam req (District xs) =
    req `setQuery` toQueryColl MultiParamArray ("district", Just xs)

-- | /Optional Param/ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
instance HasOptionalParam CandidatesSearchGet CandidateStatus where
  applyOptionalParam req (CandidateStatus xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_status", Just xs)

-- | /Optional Param/ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
instance HasOptionalParam CandidatesSearchGet FederalFundsFlag where
  applyOptionalParam req (FederalFundsFlag xs) =
    req `setQuery` toQuery ("federal_funds_flag", Just xs)

-- | /Optional Param/ "office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam CandidatesSearchGet Office where
  applyOptionalParam req (Office xs) =
    req `setQuery` toQueryColl MultiParamArray ("office", Just xs)

-- | /Optional Param/ "name" - Name (candidate or committee) to search for. Alias for 'q'.
instance HasOptionalParam CandidatesSearchGet Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQueryColl MultiParamArray ("name", Just xs)

-- | /Optional Param/ "q" - Name of candidate running for office
instance HasOptionalParam CandidatesSearchGet Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQueryColl MultiParamArray ("q", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidatesSearchGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "incumbent_challenge" - One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
instance HasOptionalParam CandidatesSearchGet IncumbentChallenge where
  applyOptionalParam req (IncumbentChallenge xs) =
    req `setQuery` toQueryColl MultiParamArray ("incumbent_challenge", Just xs)
-- | @application/json@
instance Produces CandidatesSearchGet MimeJSON


-- *** candidatesTotalsGet

-- | @GET \/candidates\/totals\/@
-- 
-- Aggregated candidate receipts and disbursements grouped by cycle.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
candidatesTotalsGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> OpenFECRequest CandidatesTotalsGet MimeNoContent CandidateHistoryTotalPage MimeJSON
candidatesTotalsGet (ApiKey apiKey) =
  _mkRequest "GET" ["/candidates/totals/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CandidatesTotalsGet  

-- | /Optional Param/ "has_raised_funds" - A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
instance HasOptionalParam CandidatesTotalsGet HasRaisedFunds where
  applyOptionalParam req (HasRaisedFunds xs) =
    req `setQuery` toQuery ("has_raised_funds", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CandidatesTotalsGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CandidatesTotalsGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CandidatesTotalsGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_year" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CandidatesTotalsGet ElectionYear where
  applyOptionalParam req (ElectionYear xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_year", Just xs)

-- | /Optional Param/ "party" - Three-letter party code
instance HasOptionalParam CandidatesTotalsGet Party where
  applyOptionalParam req (Party xs) =
    req `setQuery` toQueryColl MultiParamArray ("party", Just xs)

-- | /Optional Param/ "max_cash_on_hand_end_period" - Maximum cash on hand
instance HasOptionalParam CandidatesTotalsGet MaxCashOnHandEndPeriod where
  applyOptionalParam req (MaxCashOnHandEndPeriod xs) =
    req `setQuery` toQuery ("max_cash_on_hand_end_period", Just xs)

-- | /Optional Param/ "state" - State of candidate
instance HasOptionalParam CandidatesTotalsGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "min_cash_on_hand_end_period" - Minimum cash on hand
instance HasOptionalParam CandidatesTotalsGet MinCashOnHandEndPeriod where
  applyOptionalParam req (MinCashOnHandEndPeriod xs) =
    req `setQuery` toQuery ("min_cash_on_hand_end_period", Just xs)

-- | /Optional Param/ "cycle" -  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
instance HasOptionalParam CandidatesTotalsGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CandidatesTotalsGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "candidate_id" -  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
instance HasOptionalParam CandidatesTotalsGet CandidateId where
  applyOptionalParam req (CandidateId xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_id", Just xs)

-- | /Optional Param/ "max_debts_owed_by_committee" - Maximum debt
instance HasOptionalParam CandidatesTotalsGet MaxDebtsOwedByCommittee where
  applyOptionalParam req (MaxDebtsOwedByCommittee xs) =
    req `setQuery` toQuery ("max_debts_owed_by_committee", Just xs)

-- | /Optional Param/ "district" - District of candidate
instance HasOptionalParam CandidatesTotalsGet District where
  applyOptionalParam req (District xs) =
    req `setQuery` toQueryColl MultiParamArray ("district", Just xs)

-- | /Optional Param/ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
instance HasOptionalParam CandidatesTotalsGet FederalFundsFlag where
  applyOptionalParam req (FederalFundsFlag xs) =
    req `setQuery` toQuery ("federal_funds_flag", Just xs)

-- | /Optional Param/ "office" - Governmental office candidate runs for: House, Senate or presidential
instance HasOptionalParam CandidatesTotalsGet Office where
  applyOptionalParam req (Office xs) =
    req `setQuery` toQueryColl MultiParamArray ("office", Just xs)

-- | /Optional Param/ "min_debts_owed_by_committee" - Minimum debt
instance HasOptionalParam CandidatesTotalsGet MinDebtsOwedByCommittee where
  applyOptionalParam req (MinDebtsOwedByCommittee xs) =
    req `setQuery` toQuery ("min_debts_owed_by_committee", Just xs)

-- | /Optional Param/ "min_receipts" - Minimum aggregated receipts
instance HasOptionalParam CandidatesTotalsGet MinReceipts where
  applyOptionalParam req (MinReceipts xs) =
    req `setQuery` toQuery ("min_receipts", Just xs)

-- | /Optional Param/ "min_disbursements" - Minimum aggregated disbursements
instance HasOptionalParam CandidatesTotalsGet MinDisbursements where
  applyOptionalParam req (MinDisbursements xs) =
    req `setQuery` toQuery ("min_disbursements", Just xs)

-- | /Optional Param/ "q" - Name of candidate running for office
instance HasOptionalParam CandidatesTotalsGet Q where
  applyOptionalParam req (Q xs) =
    req `setQuery` toQueryColl MultiParamArray ("q", Just xs)

-- | /Optional Param/ "max_receipts" - Maximum aggregated receipts
instance HasOptionalParam CandidatesTotalsGet MaxReceipts where
  applyOptionalParam req (MaxReceipts xs) =
    req `setQuery` toQuery ("max_receipts", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CandidatesTotalsGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "max_disbursements" - Maximum aggregated disbursements
instance HasOptionalParam CandidatesTotalsGet MaxDisbursements where
  applyOptionalParam req (MaxDisbursements xs) =
    req `setQuery` toQuery ("max_disbursements", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam CandidatesTotalsGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces CandidatesTotalsGet MimeJSON


-- *** committeeCommitteeIdCandidatesGet

-- | @GET \/committee\/{committee_id}\/candidates\/@
-- 
--  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdCandidatesGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdCandidatesGet MimeNoContent CandidateDetailPage MimeJSON
committeeCommitteeIdCandidatesGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/candidates/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdCandidatesGet  

-- | /Optional Param/ "has_raised_funds" - A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet HasRaisedFunds where
  applyOptionalParam req (HasRaisedFunds xs) =
    req `setQuery` toQuery ("has_raised_funds", Just xs)

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "election_year" - Year of election
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet ElectionYear where
  applyOptionalParam req (ElectionYear xs) =
    req `setQuery` toQueryColl MultiParamArray ("election_year", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "party" - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet Party where
  applyOptionalParam req (Party xs) =
    req `setQuery` toQueryColl MultiParamArray ("party", Just xs)

-- | /Optional Param/ "state" - US state or territory where a candidate runs for office
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet State where
  applyOptionalParam req (State xs) =
    req `setQuery` toQueryColl MultiParamArray ("state", Just xs)

-- | /Optional Param/ "cycle" -  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet Cycle where
  applyOptionalParam req (Cycle xs) =
    req `setQuery` toQueryColl MultiParamArray ("cycle", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "year" - See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet Year where
  applyOptionalParam req (Year xs) =
    req `setQuery` toQuery ("year", Just xs)

-- | /Optional Param/ "candidate_status" - One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet CandidateStatus where
  applyOptionalParam req (CandidateStatus xs) =
    req `setQuery` toQueryColl MultiParamArray ("candidate_status", Just xs)

-- | /Optional Param/ "district" - Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet District where
  applyOptionalParam req (District xs) =
    req `setQuery` toQueryColl MultiParamArray ("district", Just xs)

-- | /Optional Param/ "office" - Federal office candidate runs for: H, S or P
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet Office where
  applyOptionalParam req (Office xs) =
    req `setQuery` toQueryColl MultiParamArray ("office", Just xs)

-- | /Optional Param/ "federal_funds_flag" - A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet FederalFundsFlag where
  applyOptionalParam req (FederalFundsFlag xs) =
    req `setQuery` toQuery ("federal_funds_flag", Just xs)

-- | /Optional Param/ "name" - Name (candidate or committee) to search for. Alias for 'q'.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQueryColl MultiParamArray ("name", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "incumbent_challenge" - One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
instance HasOptionalParam CommitteeCommitteeIdCandidatesGet IncumbentChallenge where
  applyOptionalParam req (IncumbentChallenge xs) =
    req `setQuery` toQueryColl MultiParamArray ("incumbent_challenge", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdCandidatesGet MimeJSON


-- *** committeeCommitteeIdCandidatesHistoryCycleGet

-- | @GET \/committee\/{committee_id}\/candidates\/history\/{cycle}\/@
-- 
--  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdCandidatesHistoryCycleGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CycleInt -- ^ "cycle" -   Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdCandidatesHistoryCycleGet MimeNoContent CandidateHistoryPage MimeJSON
committeeCommitteeIdCandidatesHistoryCycleGet (ApiKey apiKey) (CycleInt cycle) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/candidates/history/",toPath cycle,"/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdCandidatesHistoryCycleGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryCycleGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryCycleGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryCycleGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryCycleGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryCycleGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryCycleGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdCandidatesHistoryCycleGet MimeJSON


-- *** committeeCommitteeIdCandidatesHistoryGet

-- | @GET \/committee\/{committee_id}\/candidates\/history\/@
-- 
--  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
committeeCommitteeIdCandidatesHistoryGet 
  :: ApiKey -- ^ "apiKey" -   API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
  -> CommitteeIdText -- ^ "committeeId" -   A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 
  -> OpenFECRequest CommitteeCommitteeIdCandidatesHistoryGet MimeNoContent CandidateHistoryPage MimeJSON
committeeCommitteeIdCandidatesHistoryGet (ApiKey apiKey) (CommitteeIdText committeeId) =
  _mkRequest "GET" ["/committee/",toPath committeeId,"/candidates/history/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setQuery` toQuery ("api_key", Just apiKey)

data CommitteeCommitteeIdCandidatesHistoryGet  

-- | /Optional Param/ "sort_null_only" - Toggle that filters out all rows having sort column that is non-null
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryGet SortNullOnly where
  applyOptionalParam req (SortNullOnly xs) =
    req `setQuery` toQuery ("sort_null_only", Just xs)

-- | /Optional Param/ "sort" - Provide a field to sort by. Use - for descending order.
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryGet SortText where
  applyOptionalParam req (SortText xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "per_page" - The number of results returned per page. Defaults to 20.
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `setQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "sort_hide_null" - Hide null values on sorted column(s).
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryGet SortHideNull where
  applyOptionalParam req (SortHideNull xs) =
    req `setQuery` toQuery ("sort_hide_null", Just xs)

-- | /Optional Param/ "page" - For paginating through results, starting at page 1
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryGet Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "election_full" - Aggregate values over full election period
instance HasOptionalParam CommitteeCommitteeIdCandidatesHistoryGet ElectionFull where
  applyOptionalParam req (ElectionFull xs) =
    req `setQuery` toQuery ("election_full", Just xs)
-- | @application/json@
instance Produces CommitteeCommitteeIdCandidatesHistoryGet MimeJSON

